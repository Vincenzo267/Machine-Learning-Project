
Prova2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d96c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000858c  0800db00  0800db00  0001db00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801608c  0801608c  0003086c  2**0
                  CONTENTS
  4 .ARM          00000008  0801608c  0801608c  0002608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016094  08016094  0003086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016094  08016094  00026094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016098  08016098  00026098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000086c  20000000  0801609c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009dac  2000086c  08016908  0003086c  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  2000a618  08016908  0003a618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003086c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001757c  00000000  00000000  0003089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003510  00000000  00000000  00047e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0004b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0004c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5fc  00000000  00000000  0004dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c08  00000000  00000000  000781fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103708  00000000  00000000  00090e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  0019450c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c40  00000000  00000000  001945d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0019b218  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0019b2e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000086c 	.word	0x2000086c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dae4 	.word	0x0800dae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000870 	.word	0x20000870
 80001cc:	0800dae4 	.word	0x0800dae4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f001 fac8 	bl	80024e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f81c 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f992 	bl	8001280 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f5c:	f000 f8a0 	bl	80010a0 <MX_CRC_Init>
  MX_TIM2_Init();
 8000f60:	f000 f8c0 	bl	80010e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 f95c 	bl	8001220 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f68:	f000 f90a 	bl	8001180 <MX_TIM3_Init>
  MX_X_CUBE_AI_Init();
 8000f6c:	f005 fbd8 	bl	8006720 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  //vengono inizializzati i sensori e avviati i timer
  BSP_GYRO_Init();
 8000f70:	f001 f832 	bl	8001fd8 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 8000f74:	f000 ffda 	bl	8001f2c <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <main+0x3c>)
 8000f7a:	f003 ffd3 	bl	8004f24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <main+0x40>)
 8000f80:	f003 ffd0 	bl	8004f24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <main+0x38>
 8000f86:	bf00      	nop
 8000f88:	200008ac 	.word	0x200008ac
 8000f8c:	200008f8 	.word	0x200008f8

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0b8      	sub	sp, #224	; 0xe0
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f9a:	2244      	movs	r2, #68	; 0x44
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fca6 	bl	800a8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2288      	movs	r2, #136	; 0x88
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f009 fc98 	bl	800a8f0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fc0:	f002 fc2a 	bl	8003818 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <SystemClock_Config+0x10c>)
 8000fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fca:	4a34      	ldr	r2, [pc, #208]	; (800109c <SystemClock_Config+0x10c>)
 8000fcc:	f023 0318 	bic.w	r3, r3, #24
 8000fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fd4:	2314      	movs	r3, #20
 8000fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001004:	2328      	movs	r3, #40	; 0x28
 8001006:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800100a:	2307      	movs	r3, #7
 800100c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fc6d 	bl	8003900 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800102c:	f000 fb3e 	bl	80016ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f83b 	bl	80040d0 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001060:	f000 fb24 	bl	80016ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001064:	2301      	movs	r3, #1
 8001066:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fa34 	bl	80044dc <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800107a:	f000 fb17 	bl	80016ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001082:	f002 fbe7 	bl	8003854 <HAL_PWREx_ControlVoltageScaling>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800108c:	f000 fb0e 	bl	80016ac <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001090:	f003 fd0e 	bl	8004ab0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001094:	bf00      	nop
 8001096:	37e0      	adds	r7, #224	; 0xe0
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <MX_CRC_Init+0x3c>)
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <MX_CRC_Init+0x40>)
 80010a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_CRC_Init+0x3c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_CRC_Init+0x3c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_CRC_Init+0x3c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_CRC_Init+0x3c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_CRC_Init+0x3c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_CRC_Init+0x3c>)
 80010ca:	f001 fb91 	bl	80027f0 <HAL_CRC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80010d4:	f000 faea 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000888 	.word	0x20000888
 80010e0:	40023000 	.word	0x40023000

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_TIM2_Init+0x98>)
 8001104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_TIM2_Init+0x98>)
 800110c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM2_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7399;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_TIM2_Init+0x98>)
 800111a:	f641 42e7 	movw	r2, #7399	; 0x1ce7
 800111e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_TIM2_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM2_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <MX_TIM2_Init+0x98>)
 800112e:	f003 fea1 	bl	8004e74 <HAL_TIM_Base_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001138:	f000 fab8 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_TIM2_Init+0x98>)
 800114a:	f004 f8a9 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001154:	f000 faaa 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_TIM2_Init+0x98>)
 8001166:	f004 fac7 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001170:	f000 fa9c 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200008ac 	.word	0x200008ac

08001180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_TIM3_Init+0x98>)
 80011a0:	4a1e      	ldr	r2, [pc, #120]	; (800121c <MX_TIM3_Init+0x9c>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM3_Init+0x98>)
 80011a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80011aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM3_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_TIM3_Init+0x98>)
 80011b4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80011b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_TIM3_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM3_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_TIM3_Init+0x98>)
 80011c8:	f003 fe54 	bl	8004e74 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80011d2:	f000 fa6b 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM3_Init+0x98>)
 80011e4:	f004 f85c 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80011ee:	f000 fa5d 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM3_Init+0x98>)
 8001200:	f004 fa7a 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800120a:	f000 fa4f 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200008f8 	.word	0x200008f8
 800121c:	40000400 	.word	0x40000400

08001220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <MX_USART1_UART_Init+0x5c>)
 8001228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_USART1_UART_Init+0x58>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USART1_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART1_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART1_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART1_UART_Init+0x58>)
 8001264:	f004 faee 	bl	8005844 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800126e:	f000 fa1d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000944 	.word	0x20000944
 800127c:	40013800 	.word	0x40013800

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	4bb9      	ldr	r3, [pc, #740]	; (800157c <MX_GPIO_Init+0x2fc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4ab8      	ldr	r2, [pc, #736]	; (800157c <MX_GPIO_Init+0x2fc>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4bb6      	ldr	r3, [pc, #728]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4bb3      	ldr	r3, [pc, #716]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4ab2      	ldr	r2, [pc, #712]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4bb0      	ldr	r3, [pc, #704]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	4bad      	ldr	r3, [pc, #692]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4aac      	ldr	r2, [pc, #688]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4baa      	ldr	r3, [pc, #680]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4ba7      	ldr	r3, [pc, #668]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4aa6      	ldr	r2, [pc, #664]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4ba4      	ldr	r3, [pc, #656]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4ba1      	ldr	r3, [pc, #644]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4aa0      	ldr	r2, [pc, #640]	; (800157c <MX_GPIO_Init+0x2fc>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b9e      	ldr	r3, [pc, #632]	; (800157c <MX_GPIO_Init+0x2fc>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b9b      	ldr	r3, [pc, #620]	; (800157c <MX_GPIO_Init+0x2fc>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a9a      	ldr	r2, [pc, #616]	; (800157c <MX_GPIO_Init+0x2fc>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b98      	ldr	r3, [pc, #608]	; (800157c <MX_GPIO_Init+0x2fc>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 718a 	mov.w	r1, #276	; 0x114
 800132c:	4894      	ldr	r0, [pc, #592]	; (8001580 <MX_GPIO_Init+0x300>)
 800132e:	f001 fcf3 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f248 1104 	movw	r1, #33028	; 0x8104
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f001 fcec 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001340:	2200      	movs	r2, #0
 8001342:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001346:	488f      	ldr	r0, [pc, #572]	; (8001584 <MX_GPIO_Init+0x304>)
 8001348:	f001 fce6 	bl	8002d18 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001352:	488d      	ldr	r0, [pc, #564]	; (8001588 <MX_GPIO_Init+0x308>)
 8001354:	f001 fce0 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	488a      	ldr	r0, [pc, #552]	; (8001588 <MX_GPIO_Init+0x308>)
 8001360:	f001 fcda 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 7110 	mov.w	r1, #576	; 0x240
 800136a:	4888      	ldr	r0, [pc, #544]	; (800158c <MX_GPIO_Init+0x30c>)
 800136c:	f001 fcd4 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2120      	movs	r1, #32
 8001374:	4883      	ldr	r0, [pc, #524]	; (8001584 <MX_GPIO_Init+0x304>)
 8001376:	f001 fccf 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	2101      	movs	r1, #1
 800137e:	4880      	ldr	r0, [pc, #512]	; (8001580 <MX_GPIO_Init+0x300>)
 8001380:	f001 fcca 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001384:	f240 1315 	movw	r3, #277	; 0x115
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4878      	ldr	r0, [pc, #480]	; (8001580 <MX_GPIO_Init+0x300>)
 800139e:	f001 fb11 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80013a2:	236a      	movs	r3, #106	; 0x6a
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <MX_GPIO_Init+0x310>)
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4872      	ldr	r0, [pc, #456]	; (8001580 <MX_GPIO_Init+0x300>)
 80013b6:	f001 fb05 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80013ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c0:	4b74      	ldr	r3, [pc, #464]	; (8001594 <MX_GPIO_Init+0x314>)
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	486f      	ldr	r0, [pc, #444]	; (800158c <MX_GPIO_Init+0x30c>)
 80013d0:	f001 faf8 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80013d4:	233f      	movs	r3, #63	; 0x3f
 80013d6:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013d8:	230b      	movs	r3, #11
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4869      	ldr	r0, [pc, #420]	; (800158c <MX_GPIO_Init+0x30c>)
 80013e8:	f001 faec 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80013ec:	2303      	movs	r3, #3
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013fc:	2308      	movs	r3, #8
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f001 fadb 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800140e:	f248 1304 	movw	r3, #33028	; 0x8104
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f001 facb 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800142e:	2310      	movs	r3, #16
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001432:	230b      	movs	r3, #11
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f001 fabe 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001448:	23e0      	movs	r3, #224	; 0xe0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001458:	2305      	movs	r3, #5
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f001 faad 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800146a:	2301      	movs	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <MX_GPIO_Init+0x310>)
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	4841      	ldr	r0, [pc, #260]	; (8001584 <MX_GPIO_Init+0x304>)
 800147e:	f001 faa1 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001482:	2302      	movs	r3, #2
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001486:	230b      	movs	r3, #11
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	483b      	ldr	r0, [pc, #236]	; (8001584 <MX_GPIO_Init+0x304>)
 8001496:	f001 fa95 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800149a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800149e:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4834      	ldr	r0, [pc, #208]	; (8001584 <MX_GPIO_Init+0x304>)
 80014b4:	f001 fa86 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80014b8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014ca:	2306      	movs	r3, #6
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	482a      	ldr	r0, [pc, #168]	; (8001580 <MX_GPIO_Init+0x300>)
 80014d6:	f001 fa75 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80014da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014de:	61fb      	str	r3, [r7, #28]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014ec:	230a      	movs	r3, #10
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4822      	ldr	r0, [pc, #136]	; (8001580 <MX_GPIO_Init+0x300>)
 80014f8:	f001 fa64 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80014fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	2312      	movs	r3, #18
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800150e:	2304      	movs	r3, #4
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_GPIO_Init+0x304>)
 800151a:	f001 fa53 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800151e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001530:	2307      	movs	r3, #7
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <MX_GPIO_Init+0x308>)
 800153c:	f001 fa42 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001540:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001544:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_GPIO_Init+0x310>)
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_GPIO_Init+0x308>)
 8001556:	f001 fa35 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800155a:	f243 0381 	movw	r3, #12417	; 0x3081
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_GPIO_Init+0x308>)
 8001574:	f001 fa26 	bl	80029c4 <HAL_GPIO_Init>
 8001578:	e00e      	b.n	8001598 <MX_GPIO_Init+0x318>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	48001000 	.word	0x48001000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000c00 	.word	0x48000c00
 800158c:	48000800 	.word	0x48000800
 8001590:	10110000 	.word	0x10110000
 8001594:	10210000 	.word	0x10210000

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001598:	f44f 7310 	mov.w	r3, #576	; 0x240
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	483a      	ldr	r0, [pc, #232]	; (800169c <MX_GPIO_Init+0x41c>)
 80015b2:	f001 fa07 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80015b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <MX_GPIO_Init+0x420>)
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4834      	ldr	r0, [pc, #208]	; (800169c <MX_GPIO_Init+0x41c>)
 80015cc:	f001 f9fa 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 f9ec 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80015ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015fe:	230a      	movs	r3, #10
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160c:	f001 f9da 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001610:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001622:	2306      	movs	r3, #6
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	481b      	ldr	r0, [pc, #108]	; (800169c <MX_GPIO_Init+0x41c>)
 800162e:	f001 f9c9 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001642:	2305      	movs	r3, #5
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_GPIO_Init+0x424>)
 800164e:	f001 f9b9 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001652:	2378      	movs	r3, #120	; 0x78
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_GPIO_Init+0x424>)
 800166e:	f001 f9a9 	bl	80029c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001678:	2312      	movs	r3, #18
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001684:	2304      	movs	r3, #4
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_GPIO_Init+0x428>)
 8001690:	f001 f998 	bl	80029c4 <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3730      	adds	r7, #48	; 0x30
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	48000800 	.word	0x48000800
 80016a0:	10110000 	.word	0x10110000
 80016a4:	48000c00 	.word	0x48000c00
 80016a8:	48000400 	.word	0x48000400

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_CRC_MspInit+0x38>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10b      	bne.n	800172a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_CRC_MspInit+0x3c>)
 8001714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_CRC_MspInit+0x3c>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171c:	6493      	str	r3, [r2, #72]	; 0x48
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_CRC_MspInit+0x3c>)
 8001720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023000 	.word	0x40023000
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d131      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6593      	str	r3, [r2, #88]	; 0x58
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001792:	2308      	movs	r3, #8
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f001 f908 	bl	80029c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	201c      	movs	r0, #28
 80017ba:	f000 ffe2 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017be:	201c      	movs	r0, #28
 80017c0:	f000 fffb 	bl	80027ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017c4:	e010      	b.n	80017e8 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_TIM_Base_MspInit+0xb4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d10b      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	6593      	str	r3, [r2, #88]	; 0x58
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40000400 	.word	0x40000400

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_UART_MspInit+0x7c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d127      	bne.n	800186a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_UART_MspInit+0x80>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <HAL_UART_MspInit+0x80>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6613      	str	r3, [r2, #96]	; 0x60
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_UART_MspInit+0x80>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_UART_MspInit+0x80>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_UART_MspInit+0x80>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_UART_MspInit+0x80>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800184a:	23c0      	movs	r3, #192	; 0xc0
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800185a:	2307      	movs	r3, #7
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <HAL_UART_MspInit+0x84>)
 8001866:	f001 f8ad 	bl	80029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40013800 	.word	0x40013800
 8001878:	40021000 	.word	0x40021000
 800187c:	48000400 	.word	0x48000400

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 fe5e 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0000      	movs	r0, r0
	...

080018d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d8:	b598      	push	{r3, r4, r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//gestione delle operazioni eseguite allo scattare del timer TIM2
	if(cont<20){
 80018dc:	4b9a      	ldr	r3, [pc, #616]	; (8001b48 <TIM2_IRQHandler+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b13      	cmp	r3, #19
 80018e2:	f300 80e8 	bgt.w	8001ab6 <TIM2_IRQHandler+0x1de>
		BSP_GYRO_GetXYZ(xyz_gyro);
 80018e6:	4899      	ldr	r0, [pc, #612]	; (8001b4c <TIM2_IRQHandler+0x274>)
 80018e8:	f000 fbb8 	bl	800205c <BSP_GYRO_GetXYZ>
		BSP_ACCELERO_AccGetXYZ(xyz_acc);
 80018ec:	4898      	ldr	r0, [pc, #608]	; (8001b50 <TIM2_IRQHandler+0x278>)
 80018ee:	f000 fb5b 	bl	8001fa8 <BSP_ACCELERO_AccGetXYZ>

		values1[i]=(xyz_gyro[0]-(-972.34599589))/48703.56139057;
 80018f2:	4b96      	ldr	r3, [pc, #600]	; (8001b4c <TIM2_IRQHandler+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe26 	bl	8000548 <__aeabi_f2d>
 80018fc:	a37a      	add	r3, pc, #488	; (adr r3, 8001ae8 <TIM2_IRQHandler+0x210>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fcc3 	bl	800028c <__adddf3>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	a378      	add	r3, pc, #480	; (adr r3, 8001af0 <TIM2_IRQHandler+0x218>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe ff9a 	bl	800084c <__aeabi_ddiv>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	498d      	ldr	r1, [pc, #564]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 800191e:	680c      	ldr	r4, [r1, #0]
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f940 	bl	8000ba8 <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
 800192a:	498b      	ldr	r1, [pc, #556]	; (8001b58 <TIM2_IRQHandler+0x280>)
 800192c:	00a3      	lsls	r3, r4, #2
 800192e:	440b      	add	r3, r1
 8001930:	601a      	str	r2, [r3, #0]
		values1[i+1]=(xyz_gyro[1]-(-3563.00718686))/91196.18455942;
 8001932:	4b86      	ldr	r3, [pc, #536]	; (8001b4c <TIM2_IRQHandler+0x274>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fe06 	bl	8000548 <__aeabi_f2d>
 800193c:	a36e      	add	r3, pc, #440	; (adr r3, 8001af8 <TIM2_IRQHandler+0x220>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe fca3 	bl	800028c <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	a36c      	add	r3, pc, #432	; (adr r3, 8001b00 <TIM2_IRQHandler+0x228>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe ff7a 	bl	800084c <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	4b7c      	ldr	r3, [pc, #496]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1c5c      	adds	r4, r3, #1
 8001966:	f7ff f91f 	bl	8000ba8 <__aeabi_d2f>
 800196a:	4602      	mov	r2, r0
 800196c:	497a      	ldr	r1, [pc, #488]	; (8001b58 <TIM2_IRQHandler+0x280>)
 800196e:	00a3      	lsls	r3, r4, #2
 8001970:	440b      	add	r3, r1
 8001972:	601a      	str	r2, [r3, #0]
		values1[i+2]=(xyz_gyro[2]-(1854.90657084))/198579.59455869;
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <TIM2_IRQHandler+0x274>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fde5 	bl	8000548 <__aeabi_f2d>
 800197e:	a362      	add	r3, pc, #392	; (adr r3, 8001b08 <TIM2_IRQHandler+0x230>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fc80 	bl	8000288 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	a35f      	add	r3, pc, #380	; (adr r3, 8001b10 <TIM2_IRQHandler+0x238>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe ff59 	bl	800084c <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1c9c      	adds	r4, r3, #2
 80019a8:	f7ff f8fe 	bl	8000ba8 <__aeabi_d2f>
 80019ac:	4602      	mov	r2, r0
 80019ae:	496a      	ldr	r1, [pc, #424]	; (8001b58 <TIM2_IRQHandler+0x280>)
 80019b0:	00a3      	lsls	r3, r4, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	601a      	str	r2, [r3, #0]
		values1[i+3]=((float)xyz_acc[0]-(-8.43593429))/1027.04594633;
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <TIM2_IRQHandler+0x278>)
 80019b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c4:	ee17 0a90 	vmov	r0, s15
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	a352      	add	r3, pc, #328	; (adr r3, 8001b18 <TIM2_IRQHandler+0x240>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fc5b 	bl	800028c <__adddf3>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	a350      	add	r3, pc, #320	; (adr r3, 8001b20 <TIM2_IRQHandler+0x248>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	f7fe ff32 	bl	800084c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1cdc      	adds	r4, r3, #3
 80019f6:	f7ff f8d7 	bl	8000ba8 <__aeabi_d2f>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4956      	ldr	r1, [pc, #344]	; (8001b58 <TIM2_IRQHandler+0x280>)
 80019fe:	00a3      	lsls	r3, r4, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	601a      	str	r2, [r3, #0]
		values1[i+4]=((float)xyz_acc[1]-(-157.03059548))/634.01548887;
 8001a04:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <TIM2_IRQHandler+0x278>)
 8001a06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	ee17 0a90 	vmov	r0, s15
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	a343      	add	r3, pc, #268	; (adr r3, 8001b28 <TIM2_IRQHandler+0x250>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fc34 	bl	800028c <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <TIM2_IRQHandler+0x258>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe ff0b 	bl	800084c <__aeabi_ddiv>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1d1c      	adds	r4, r3, #4
 8001a44:	f7ff f8b0 	bl	8000ba8 <__aeabi_d2f>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4943      	ldr	r1, [pc, #268]	; (8001b58 <TIM2_IRQHandler+0x280>)
 8001a4c:	00a3      	lsls	r3, r4, #2
 8001a4e:	440b      	add	r3, r1
 8001a50:	601a      	str	r2, [r3, #0]
		values1[i+5]=((float)xyz_acc[2]-(945.68480493))/391.37007652;
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <TIM2_IRQHandler+0x278>)
 8001a54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a60:	ee17 0a90 	vmov	r0, s15
 8001a64:	f7fe fd70 	bl	8000548 <__aeabi_f2d>
 8001a68:	a333      	add	r3, pc, #204	; (adr r3, 8001b38 <TIM2_IRQHandler+0x260>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fc0b 	bl	8000288 <__aeabi_dsub>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	a331      	add	r3, pc, #196	; (adr r3, 8001b40 <TIM2_IRQHandler+0x268>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fee4 	bl	800084c <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1d5c      	adds	r4, r3, #5
 8001a92:	f7ff f889 	bl	8000ba8 <__aeabi_d2f>
 8001a96:	4602      	mov	r2, r0
 8001a98:	492f      	ldr	r1, [pc, #188]	; (8001b58 <TIM2_IRQHandler+0x280>)
 8001a9a:	00a3      	lsls	r3, r4, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	601a      	str	r2, [r3, #0]

		i=i+6;
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3306      	adds	r3, #6
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 8001aa8:	6013      	str	r3, [r2, #0]
		cont++;
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <TIM2_IRQHandler+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <TIM2_IRQHandler+0x270>)
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e013      	b.n	8001ade <TIM2_IRQHandler+0x206>

	}
	else{


		HAL_TIM_Base_Stop_IT(&htim2);
 8001ab6:	4829      	ldr	r0, [pc, #164]	; (8001b5c <TIM2_IRQHandler+0x284>)
 8001ab8:	f003 faa4 	bl	8005004 <HAL_TIM_Base_Stop_IT>
		HAL_UART_Transmit(&huart1, "Acquisizione dati sensori effettuata\n\r", 40, 100);
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	2228      	movs	r2, #40	; 0x28
 8001ac0:	4927      	ldr	r1, [pc, #156]	; (8001b60 <TIM2_IRQHandler+0x288>)
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <TIM2_IRQHandler+0x28c>)
 8001ac4:	f003 ff0c 	bl	80058e0 <HAL_UART_Transmit>
//		HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);
		MX_X_CUBE_AI_Process();
 8001ac8:	f004 fe3c 	bl	8006744 <MX_X_CUBE_AI_Process>
//		HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);
		HAL_TIM_Base_Start_IT(&htim2);
 8001acc:	4823      	ldr	r0, [pc, #140]	; (8001b5c <TIM2_IRQHandler+0x284>)
 8001ace:	f003 fa29 	bl	8004f24 <HAL_TIM_Base_Start_IT>
		i=0;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <TIM2_IRQHandler+0x27c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
		cont=0;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <TIM2_IRQHandler+0x270>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]



	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ade:	481f      	ldr	r0, [pc, #124]	; (8001b5c <TIM2_IRQHandler+0x284>)
 8001ae0:	f003 fabf 	bl	8005062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd98      	pop	{r3, r4, r7, pc}
 8001ae8:	997e40ce 	.word	0x997e40ce
 8001aec:	408e62c4 	.word	0x408e62c4
 8001af0:	f6e95b4e 	.word	0xf6e95b4e
 8001af4:	40e7c7f1 	.word	0x40e7c7f1
 8001af8:	adff0152 	.word	0xadff0152
 8001afc:	40abd603 	.word	0x40abd603
 8001b00:	f3f49411 	.word	0xf3f49411
 8001b04:	40f643c2 	.word	0x40f643c2
 8001b08:	541b353b 	.word	0x541b353b
 8001b0c:	409cfba0 	.word	0x409cfba0
 8001b10:	c1a7fc89 	.word	0xc1a7fc89
 8001b14:	41083d9c 	.word	0x41083d9c
 8001b18:	c77d828d 	.word	0xc77d828d
 8001b1c:	4020df32 	.word	0x4020df32
 8001b20:	0c8e02e3 	.word	0x0c8e02e3
 8001b24:	40900c2f 	.word	0x40900c2f
 8001b28:	a35f402c 	.word	0xa35f402c
 8001b2c:	4063a0fa 	.word	0x4063a0fa
 8001b30:	b8a0f0d1 	.word	0xb8a0f0d1
 8001b34:	4083d01f 	.word	0x4083d01f
 8001b38:	7b01d3eb 	.word	0x7b01d3eb
 8001b3c:	408d8d7a 	.word	0x408d8d7a
 8001b40:	d55b66ae 	.word	0xd55b66ae
 8001b44:	407875eb 	.word	0x407875eb
 8001b48:	200009cc 	.word	0x200009cc
 8001b4c:	200009d0 	.word	0x200009d0
 8001b50:	200009dc 	.word	0x200009dc
 8001b54:	200009c8 	.word	0x200009c8
 8001b58:	200009e4 	.word	0x200009e4
 8001b5c:	200008ac 	.word	0x200008ac
 8001b60:	0800db00 	.word	0x0800db00
 8001b64:	20000944 	.word	0x20000944

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f008 fe6a 	bl	800a870 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20018000 	.word	0x20018000
 8001bc8:	00001000 	.word	0x00001000
 8001bcc:	20000bc4 	.word	0x20000bc4
 8001bd0:	2000a618 	.word	0x2000a618

08001bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <SystemInit+0x5c>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <SystemInit+0x5c>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <SystemInit+0x60>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <SystemInit+0x60>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <SystemInit+0x60>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <SystemInit+0x60>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <SystemInit+0x60>)
 8001c00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <SystemInit+0x60>)
 8001c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <SystemInit+0x60>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <SystemInit+0x60>)
 8001c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SystemInit+0x60>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	40021000 	.word	0x40021000

08001c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c3c:	f7ff ffca 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c42:	e003      	b.n	8001c4c <LoopCopyDataInit>

08001c44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c4a:	3104      	adds	r1, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c4c:	480a      	ldr	r0, [pc, #40]	; (8001c78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c54:	d3f6      	bcc.n	8001c44 <CopyDataInit>
	ldr	r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c58:	e002      	b.n	8001c60 <LoopFillZerobss>

08001c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c5c:	f842 3b04 	str.w	r3, [r2], #4

08001c60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <LoopForever+0x16>)
	cmp	r2, r3
 8001c62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c64:	d3f9      	bcc.n	8001c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c66:	f008 fe09 	bl	800a87c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6a:	f7ff f96f 	bl	8000f4c <main>

08001c6e <LoopForever>:

LoopForever:
    b LoopForever
 8001c6e:	e7fe      	b.n	8001c6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c70:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c74:	0801609c 	.word	0x0801609c
	ldr	r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c7c:	2000086c 	.word	0x2000086c
	ldr	r2, =_sbss
 8001c80:	2000086c 	.word	0x2000086c
	ldr	r3, = _ebss
 8001c84:	2000a618 	.word	0x2000a618

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c94:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001cac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cb0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481b      	ldr	r0, [pc, #108]	; (8001d38 <I2Cx_MspInit+0xac>)
 8001cca:	f000 fe7b 	bl	80029c4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4818      	ldr	r0, [pc, #96]	; (8001d38 <I2Cx_MspInit+0xac>)
 8001cd6:	f000 fe75 	bl	80029c4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cfc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <I2Cx_MspInit+0xa8>)
 8001d04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d08:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	2021      	movs	r0, #33	; 0x21
 8001d10:	f000 fd37 	bl	8002782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d14:	2021      	movs	r0, #33	; 0x21
 8001d16:	f000 fd50 	bl	80027ba <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	210f      	movs	r1, #15
 8001d1e:	2022      	movs	r0, #34	; 0x22
 8001d20:	f000 fd2f 	bl	8002782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001d24:	2022      	movs	r0, #34	; 0x22
 8001d26:	f000 fd48 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000400 	.word	0x48000400

08001d3c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <I2Cx_Init+0x54>)
 8001d48:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <I2Cx_Init+0x58>)
 8001d4e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff89 	bl	8001c8c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 ffe4 	bl	8002d48 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001d80:	2100      	movs	r1, #0
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f001 fcfc 	bl	8003780 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005800 	.word	0x40005800
 8001d94:	00702681 	.word	0x00702681

08001d98 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af04      	add	r7, sp, #16
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	72fb      	strb	r3, [r7, #11]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	88f8      	ldrh	r0, [r7, #6]
 8001dbc:	893a      	ldrh	r2, [r7, #8]
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4603      	mov	r3, r0
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f001 f9a0 	bl	8003114 <HAL_I2C_Mem_Read>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	4619      	mov	r1, r3
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f832 	bl	8001e4c <I2Cx_Error>
  }
  return status;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08a      	sub	sp, #40	; 0x28
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	4608      	mov	r0, r1
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	72fb      	strb	r3, [r7, #11]
 8001e04:	460b      	mov	r3, r1
 8001e06:	813b      	strh	r3, [r7, #8]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e10:	7afb      	ldrb	r3, [r7, #11]
 8001e12:	b299      	uxth	r1, r3
 8001e14:	88f8      	ldrh	r0, [r7, #6]
 8001e16:	893a      	ldrh	r2, [r7, #8]
 8001e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4603      	mov	r3, r0
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f001 f85f 	bl	8002eec <HAL_I2C_Mem_Write>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e38:	7afb      	ldrb	r3, [r7, #11]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f805 	bl	8001e4c <I2Cx_Error>
  }
  return status;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f001 f804 	bl	8002e66 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff6c 	bl	8001d3c <I2Cx_Init>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <SENSOR_IO_Init+0x10>)
 8001e72:	f7ff ff63 	bl	8001d3c <I2Cx_Init>
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000bc8 	.word	0x20000bc8

08001e80 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	71bb      	strb	r3, [r7, #6]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001e92:	79bb      	ldrb	r3, [r7, #6]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	79f9      	ldrb	r1, [r7, #7]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	1d7b      	adds	r3, r7, #5
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <SENSOR_IO_Write+0x30>)
 8001ea4:	f7ff ffa5 	bl	8001df2 <I2Cx_WriteMultiple>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000bc8 	.word	0x20000bc8

08001eb4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	79f9      	ldrb	r1, [r7, #7]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	f107 030f 	add.w	r3, r7, #15
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4804      	ldr	r0, [pc, #16]	; (8001eec <SENSOR_IO_Read+0x38>)
 8001edc:	f7ff ff5c 	bl	8001d98 <I2Cx_ReadMultiple>

  return read_value;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000bc8 	.word	0x20000bc8

08001ef0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	603a      	str	r2, [r7, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	460b      	mov	r3, r1
 8001f00:	71bb      	strb	r3, [r7, #6]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	79f9      	ldrb	r1, [r7, #7]
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <SENSOR_IO_ReadMultiple+0x38>)
 8001f18:	f7ff ff3e 	bl	8001d98 <I2Cx_ReadMultiple>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29b      	uxth	r3, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000bc8 	.word	0x20000bc8

08001f2c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001f36:	2300      	movs	r3, #0
 8001f38:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <BSP_ACCELERO_Init+0x74>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4798      	blx	r3
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b6a      	cmp	r3, #106	; 0x6a
 8001f44:	d002      	beq.n	8001f4c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e024      	b.n	8001f96 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <BSP_ACCELERO_Init+0x78>)
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <BSP_ACCELERO_Init+0x74>)
 8001f50:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001f52:	2330      	movs	r3, #48	; 0x30
 8001f54:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001f5e:	2340      	movs	r3, #64	; 0x40
 8001f60:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001f6a:	797a      	ldrb	r2, [r7, #5]
 8001f6c:	7abb      	ldrb	r3, [r7, #10]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001f74:	7a3b      	ldrb	r3, [r7, #8]
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <BSP_ACCELERO_Init+0x78>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	89ba      	ldrh	r2, [r7, #12]
 8001f92:	4610      	mov	r0, r2
 8001f94:	4798      	blx	r3
  }  

  return ret;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	20000c14 	.word	0x20000c14

08001fa8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000c14 	.word	0x20000c14

08001fd8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <BSP_GYRO_Init+0x7c>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4798      	blx	r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b6a      	cmp	r3, #106	; 0x6a
 8001ff0:	d002      	beq.n	8001ff8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e028      	b.n	800204a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	; (8002058 <BSP_GYRO_Init+0x80>)
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <BSP_GYRO_Init+0x7c>)
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002002:	2330      	movs	r3, #48	; 0x30
 8002004:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800200e:	2340      	movs	r3, #64	; 0x40
 8002010:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002016:	230c      	movs	r3, #12
 8002018:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800201a:	7aba      	ldrb	r2, [r7, #10]
 800201c:	797b      	ldrb	r3, [r7, #5]
 800201e:	4313      	orrs	r3, r2
 8002020:	b2db      	uxtb	r3, r3
 8002022:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002024:	7a3b      	ldrb	r3, [r7, #8]
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	b2db      	uxtb	r3, r3
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <BSP_GYRO_Init+0x80>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	89ba      	ldrh	r2, [r7, #12]
 8002042:	4610      	mov	r0, r2
 8002044:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000038 	.word	0x20000038
 8002058:	20000c18 	.word	0x20000c18

0800205c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <BSP_GYRO_GetXYZ+0x2c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <BSP_GYRO_GetXYZ+0x2c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <BSP_GYRO_GetXYZ+0x2c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000c18 	.word	0x20000c18

0800208c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800209a:	2110      	movs	r1, #16
 800209c:	20d4      	movs	r0, #212	; 0xd4
 800209e:	f7ff ff09 	bl	8001eb4 <SENSOR_IO_Read>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80020b2:	7bba      	ldrb	r2, [r7, #14]
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
 80020bc:	461a      	mov	r2, r3
 80020be:	2110      	movs	r1, #16
 80020c0:	20d4      	movs	r0, #212	; 0xd4
 80020c2:	f7ff fedd 	bl	8001e80 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80020c6:	2112      	movs	r1, #18
 80020c8:	20d4      	movs	r0, #212	; 0xd4
 80020ca:	f7ff fef3 	bl	8001eb4 <SENSOR_IO_Read>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80020da:	7bbb      	ldrb	r3, [r7, #14]
 80020dc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80020e0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80020e2:	7bba      	ldrb	r2, [r7, #14]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	461a      	mov	r2, r3
 80020ee:	2112      	movs	r1, #18
 80020f0:	20d4      	movs	r0, #212	; 0xd4
 80020f2:	f7ff fec5 	bl	8001e80 <SENSOR_IO_Write>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002104:	2300      	movs	r3, #0
 8002106:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002108:	2110      	movs	r1, #16
 800210a:	20d4      	movs	r0, #212	; 0xd4
 800210c:	f7ff fed2 	bl	8001eb4 <SENSOR_IO_Read>
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	461a      	mov	r2, r3
 8002120:	2110      	movs	r1, #16
 8002122:	20d4      	movs	r0, #212	; 0xd4
 8002124:	f7ff feac 	bl	8001e80 <SENSOR_IO_Write>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002134:	f7ff fe9a 	bl	8001e6c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002138:	210f      	movs	r1, #15
 800213a:	20d4      	movs	r0, #212	; 0xd4
 800213c:	f7ff feba 	bl	8001eb4 <SENSOR_IO_Read>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}

08002146 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002154:	2115      	movs	r1, #21
 8002156:	20d4      	movs	r0, #212	; 0xd4
 8002158:	f7ff feac 	bl	8001eb4 <SENSOR_IO_Read>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	f023 0310 	bic.w	r3, r3, #16
 8002166:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	461a      	mov	r2, r3
 800217a:	2115      	movs	r1, #21
 800217c:	20d4      	movs	r0, #212	; 0xd4
 800217e:	f7ff fe7f 	bl	8001e80 <SENSOR_IO_Write>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002194:	2300      	movs	r3, #0
 8002196:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80021a2:	2110      	movs	r1, #16
 80021a4:	20d4      	movs	r0, #212	; 0xd4
 80021a6:	f7ff fe85 	bl	8001eb4 <SENSOR_IO_Read>
 80021aa:	4603      	mov	r3, r0
 80021ac:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80021ae:	f107 0208 	add.w	r2, r7, #8
 80021b2:	2306      	movs	r3, #6
 80021b4:	2128      	movs	r1, #40	; 0x28
 80021b6:	20d4      	movs	r0, #212	; 0xd4
 80021b8:	f7ff fe9a 	bl	8001ef0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	77fb      	strb	r3, [r7, #31]
 80021c0:	e01c      	b.n	80021fc <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	3301      	adds	r3, #1
 80021c8:	3320      	adds	r3, #32
 80021ca:	443b      	add	r3, r7
 80021cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	3320      	adds	r3, #32
 80021dc:	443b      	add	r3, r7
 80021de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	b212      	sxth	r2, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	3320      	adds	r3, #32
 80021f0:	443b      	add	r3, r7
 80021f2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	3301      	adds	r3, #1
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	7ffb      	ldrb	r3, [r7, #31]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d9df      	bls.n	80021c2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d829      	bhi.n	8002260 <LSM6DSL_AccReadXYZ+0xd4>
 800220c:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <LSM6DSL_AccReadXYZ+0x88>)
 800220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002212:	bf00      	nop
 8002214:	08002249 	.word	0x08002249
 8002218:	08002261 	.word	0x08002261
 800221c:	08002261 	.word	0x08002261
 8002220:	08002261 	.word	0x08002261
 8002224:	0800225b 	.word	0x0800225b
 8002228:	08002261 	.word	0x08002261
 800222c:	08002261 	.word	0x08002261
 8002230:	08002261 	.word	0x08002261
 8002234:	0800224f 	.word	0x0800224f
 8002238:	08002261 	.word	0x08002261
 800223c:	08002261 	.word	0x08002261
 8002240:	08002261 	.word	0x08002261
 8002244:	08002255 	.word	0x08002255
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <LSM6DSL_AccReadXYZ+0x120>)
 800224a:	61bb      	str	r3, [r7, #24]
    break;
 800224c:	e008      	b.n	8002260 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <LSM6DSL_AccReadXYZ+0x124>)
 8002250:	61bb      	str	r3, [r7, #24]
    break;
 8002252:	e005      	b.n	8002260 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <LSM6DSL_AccReadXYZ+0x128>)
 8002256:	61bb      	str	r3, [r7, #24]
    break;
 8002258:	e002      	b.n	8002260 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <LSM6DSL_AccReadXYZ+0x12c>)
 800225c:	61bb      	str	r3, [r7, #24]
    break;    
 800225e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
 8002264:	e01a      	b.n	800229c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	3320      	adds	r3, #32
 800226c:	443b      	add	r3, r7
 800226e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227a:	edd7 7a06 	vldr	s15, [r7, #24]
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800228e:	ee17 2a90 	vmov	r2, s15
 8002292:	b212      	sxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002296:	7ffb      	ldrb	r3, [r7, #31]
 8002298:	3301      	adds	r3, #1
 800229a:	77fb      	strb	r3, [r7, #31]
 800229c:	7ffb      	ldrb	r3, [r7, #31]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d9e1      	bls.n	8002266 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	3d79db23 	.word	0x3d79db23
 80022b0:	3df9db23 	.word	0x3df9db23
 80022b4:	3e79db23 	.word	0x3e79db23
 80022b8:	3ef9db23 	.word	0x3ef9db23

080022bc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80022ca:	2111      	movs	r1, #17
 80022cc:	20d4      	movs	r0, #212	; 0xd4
 80022ce:	f7ff fdf1 	bl	8001eb4 <SENSOR_IO_Read>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80022e2:	7bba      	ldrb	r2, [r7, #14]
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	461a      	mov	r2, r3
 80022ee:	2111      	movs	r1, #17
 80022f0:	20d4      	movs	r0, #212	; 0xd4
 80022f2:	f7ff fdc5 	bl	8001e80 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80022f6:	2112      	movs	r1, #18
 80022f8:	20d4      	movs	r0, #212	; 0xd4
 80022fa:	f7ff fddb 	bl	8001eb4 <SENSOR_IO_Read>
 80022fe:	4603      	mov	r3, r0
 8002300:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
 8002308:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002310:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002312:	7bba      	ldrb	r2, [r7, #14]
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	4313      	orrs	r3, r2
 8002318:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	461a      	mov	r2, r3
 800231e:	2112      	movs	r1, #18
 8002320:	20d4      	movs	r0, #212	; 0xd4
 8002322:	f7ff fdad 	bl	8001e80 <SENSOR_IO_Write>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002334:	2300      	movs	r3, #0
 8002336:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002338:	2111      	movs	r1, #17
 800233a:	20d4      	movs	r0, #212	; 0xd4
 800233c:	f7ff fdba 	bl	8001eb4 <SENSOR_IO_Read>
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	461a      	mov	r2, r3
 8002350:	2111      	movs	r1, #17
 8002352:	20d4      	movs	r0, #212	; 0xd4
 8002354:	f7ff fd94 	bl	8001e80 <SENSOR_IO_Write>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002364:	f7ff fd82 	bl	8001e6c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002368:	210f      	movs	r1, #15
 800236a:	20d4      	movs	r0, #212	; 0xd4
 800236c:	f7ff fda2 	bl	8001eb4 <SENSOR_IO_Read>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}

08002376 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002384:	2116      	movs	r1, #22
 8002386:	20d4      	movs	r0, #212	; 0xd4
 8002388:	f7ff fd94 	bl	8001eb4 <SENSOR_IO_Read>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002396:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023a4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2116      	movs	r1, #22
 80023ac:	20d4      	movs	r0, #212	; 0xd4
 80023ae:	f7ff fd67 	bl	8001e80 <SENSOR_IO_Write>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80023d2:	2111      	movs	r1, #17
 80023d4:	20d4      	movs	r0, #212	; 0xd4
 80023d6:	f7ff fd6d 	bl	8001eb4 <SENSOR_IO_Read>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80023de:	f107 0208 	add.w	r2, r7, #8
 80023e2:	2306      	movs	r3, #6
 80023e4:	2122      	movs	r1, #34	; 0x22
 80023e6:	20d4      	movs	r0, #212	; 0xd4
 80023e8:	f7ff fd82 	bl	8001ef0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	77fb      	strb	r3, [r7, #31]
 80023f0:	e01c      	b.n	800242c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	3301      	adds	r3, #1
 80023f8:	3320      	adds	r3, #32
 80023fa:	443b      	add	r3, r7
 80023fc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002400:	b29b      	uxth	r3, r3
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b29a      	uxth	r2, r3
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	3320      	adds	r3, #32
 800240c:	443b      	add	r3, r7
 800240e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4413      	add	r3, r2
 8002416:	b29a      	uxth	r2, r3
 8002418:	7ffb      	ldrb	r3, [r7, #31]
 800241a:	b212      	sxth	r2, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	3320      	adds	r3, #32
 8002420:	443b      	add	r3, r7
 8002422:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002426:	7ffb      	ldrb	r3, [r7, #31]
 8002428:	3301      	adds	r3, #1
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d9df      	bls.n	80023f2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d829      	bhi.n	8002490 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002479 	.word	0x08002479
 8002448:	08002491 	.word	0x08002491
 800244c:	08002491 	.word	0x08002491
 8002450:	08002491 	.word	0x08002491
 8002454:	0800247f 	.word	0x0800247f
 8002458:	08002491 	.word	0x08002491
 800245c:	08002491 	.word	0x08002491
 8002460:	08002491 	.word	0x08002491
 8002464:	08002485 	.word	0x08002485
 8002468:	08002491 	.word	0x08002491
 800246c:	08002491 	.word	0x08002491
 8002470:	08002491 	.word	0x08002491
 8002474:	0800248b 	.word	0x0800248b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800247a:	61bb      	str	r3, [r7, #24]
    break;
 800247c:	e008      	b.n	8002490 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002480:	61bb      	str	r3, [r7, #24]
    break;
 8002482:	e005      	b.n	8002490 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002486:	61bb      	str	r3, [r7, #24]
    break;
 8002488:	e002      	b.n	8002490 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800248c:	61bb      	str	r3, [r7, #24]
    break;    
 800248e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	e016      	b.n	80024c4 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	3320      	adds	r3, #32
 800249c:	443b      	add	r3, r7
 800249e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024aa:	7ffb      	ldrb	r3, [r7, #31]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80024be:	7ffb      	ldrb	r3, [r7, #31]
 80024c0:	3301      	adds	r3, #1
 80024c2:	77fb      	strb	r3, [r7, #31]
 80024c4:	7ffb      	ldrb	r3, [r7, #31]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d9e5      	bls.n	8002496 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	410c0000 	.word	0x410c0000
 80024d8:	418c0000 	.word	0x418c0000
 80024dc:	420c0000 	.word	0x420c0000
 80024e0:	428c0000 	.word	0x428c0000

080024e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ee:	2003      	movs	r0, #3
 80024f0:	f000 f93c 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024f4:	2000      	movs	r0, #0
 80024f6:	f000 f80d 	bl	8002514 <HAL_InitTick>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	e001      	b.n	800250a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002506:	f7ff f8d7 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800250a:	79fb      	ldrb	r3, [r7, #7]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_InitTick+0x6c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d023      	beq.n	8002570 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_InitTick+0x70>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_InitTick+0x6c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f949 	bl	80027d6 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d809      	bhi.n	8002564 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f000 f913 	bl	8002782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_InitTick+0x74>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e007      	b.n	8002574 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e004      	b.n	8002574 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e001      	b.n	8002574 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000070 	.word	0x20000070
 8002584:	20000000 	.word	0x20000000
 8002588:	2000006c 	.word	0x2000006c

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000070 	.word	0x20000070
 80025b0:	20000c1c 	.word	0x20000c1c

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000c1c 	.word	0x20000c1c

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff3e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff31 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e054      	b.n	80028ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7f5b      	ldrb	r3, [r3, #29]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe ff74 	bl	8001700 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	791b      	ldrb	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_CRC_Init+0xc4>)
 800282c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0218 	bic.w	r2, r2, #24
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e00c      	b.n	800285a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f834 	bl	80028b8 <HAL_CRCEx_Polynomial_Set>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e028      	b.n	80028ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	795b      	ldrb	r3, [r3, #5]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	611a      	str	r2, [r3, #16]
 800286c:	e004      	b.n	8002878 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6912      	ldr	r2, [r2, #16]
 8002876:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	04c11db7 	.word	0x04c11db7

080028b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028c8:	231f      	movs	r3, #31
 80028ca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028cc:	bf00      	nop
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	613a      	str	r2, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_CRCEx_Polynomial_Set+0x34>
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b18      	cmp	r3, #24
 80028f0:	d846      	bhi.n	8002980 <HAL_CRCEx_Polynomial_Set+0xc8>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002987 	.word	0x08002987
 80028fc:	08002981 	.word	0x08002981
 8002900:	08002981 	.word	0x08002981
 8002904:	08002981 	.word	0x08002981
 8002908:	08002981 	.word	0x08002981
 800290c:	08002981 	.word	0x08002981
 8002910:	08002981 	.word	0x08002981
 8002914:	08002981 	.word	0x08002981
 8002918:	08002975 	.word	0x08002975
 800291c:	08002981 	.word	0x08002981
 8002920:	08002981 	.word	0x08002981
 8002924:	08002981 	.word	0x08002981
 8002928:	08002981 	.word	0x08002981
 800292c:	08002981 	.word	0x08002981
 8002930:	08002981 	.word	0x08002981
 8002934:	08002981 	.word	0x08002981
 8002938:	08002969 	.word	0x08002969
 800293c:	08002981 	.word	0x08002981
 8002940:	08002981 	.word	0x08002981
 8002944:	08002981 	.word	0x08002981
 8002948:	08002981 	.word	0x08002981
 800294c:	08002981 	.word	0x08002981
 8002950:	08002981 	.word	0x08002981
 8002954:	08002981 	.word	0x08002981
 8002958:	0800295d 	.word	0x0800295d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d913      	bls.n	800298a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002966:	e010      	b.n	800298a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b07      	cmp	r3, #7
 800296c:	d90f      	bls.n	800298e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002972:	e00c      	b.n	800298e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	d90b      	bls.n	8002992 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800297e:	e008      	b.n	8002992 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	75fb      	strb	r3, [r7, #23]
      break;
 8002984:	e006      	b.n	8002994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002986:	bf00      	nop
 8002988:	e004      	b.n	8002994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800298a:	bf00      	nop
 800298c:	e002      	b.n	8002994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002992:	bf00      	nop
  }
  if (status == HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 0118 	bic.w	r1, r3, #24
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d2:	e17f      	b.n	8002cd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8171 	beq.w	8002cce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d00b      	beq.n	8002a0c <HAL_GPIO_Init+0x48>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d007      	beq.n	8002a0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a00:	2b11      	cmp	r3, #17
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b12      	cmp	r3, #18
 8002a0a:	d130      	bne.n	8002a6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a42:	2201      	movs	r2, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0201 	and.w	r2, r3, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d118      	bne.n	8002aac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	08db      	lsrs	r3, r3, #3
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x128>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	6939      	ldr	r1, [r7, #16]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80ac 	beq.w	8002cce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7a:	4a5e      	ldr	r2, [pc, #376]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6613      	str	r3, [r2, #96]	; 0x60
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <HAL_GPIO_Init+0x330>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b8e:	4a5a      	ldr	r2, [pc, #360]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb8:	d025      	beq.n	8002c06 <HAL_GPIO_Init+0x242>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <HAL_GPIO_Init+0x338>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01f      	beq.n	8002c02 <HAL_GPIO_Init+0x23e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4e      	ldr	r2, [pc, #312]	; (8002d00 <HAL_GPIO_Init+0x33c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d019      	beq.n	8002bfe <HAL_GPIO_Init+0x23a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <HAL_GPIO_Init+0x340>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x236>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <HAL_GPIO_Init+0x344>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_GPIO_Init+0x232>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4b      	ldr	r2, [pc, #300]	; (8002d0c <HAL_GPIO_Init+0x348>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_GPIO_Init+0x34c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_GPIO_Init+0x22a>
 8002bea:	2306      	movs	r3, #6
 8002bec:	e00c      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00a      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e008      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	e006      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e004      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e002      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x244>
 8002c06:	2300      	movs	r3, #0
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	f002 0203 	and.w	r2, r2, #3
 8002c0e:	0092      	lsls	r2, r2, #2
 8002c10:	4093      	lsls	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c18:	4937      	ldr	r1, [pc, #220]	; (8002cf8 <HAL_GPIO_Init+0x334>)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c26:	4b3b      	ldr	r3, [pc, #236]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c4a:	4a32      	ldr	r2, [pc, #200]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cc8:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_GPIO_Init+0x350>)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f ae78 	bne.w	80029d4 <HAL_GPIO_Init+0x10>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	48000800 	.word	0x48000800
 8002d04:	48000c00 	.word	0x48000c00
 8002d08:	48001000 	.word	0x48001000
 8002d0c:	48001400 	.word	0x48001400
 8002d10:	48001800 	.word	0x48001800
 8002d14:	40010400 	.word	0x40010400

08002d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
 8002d24:	4613      	mov	r3, r2
 8002d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d28:	787b      	ldrb	r3, [r7, #1]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e081      	b.n	8002e5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8a8 	bl	8002ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e006      	b.n	8002dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d104      	bne.n	8002de2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	ea42 0103 	orr.w	r1, r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	021a      	lsls	r2, r3, #8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69d9      	ldr	r1, [r3, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e021      	b.n	8002ebc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f821 	bl	8002ed8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	817b      	strh	r3, [r7, #10]
 8002efe:	460b      	mov	r3, r1
 8002f00:	813b      	strh	r3, [r7, #8]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	f040 80f9 	bne.w	8003106 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x34>
 8002f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0ed      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Mem_Write+0x4e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0e6      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f42:	f7ff fb37 	bl	80025b4 <HAL_GetTick>
 8002f46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fac3 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d1      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2221      	movs	r2, #33	; 0x21
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2240      	movs	r2, #64	; 0x40
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f8c:	88f8      	ldrh	r0, [r7, #6]
 8002f8e:	893a      	ldrh	r2, [r7, #8]
 8002f90:	8979      	ldrh	r1, [r7, #10]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f9d3 	bl	8003348 <I2C_RequestMemoryWrite>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0a9      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2bff      	cmp	r3, #255	; 0xff
 8002fbc:	d90e      	bls.n	8002fdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	8979      	ldrh	r1, [r7, #10]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fba5 	bl	8003724 <I2C_TransferConfig>
 8002fda:	e00f      	b.n	8002ffc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb94 	bl	8003724 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 faad 	bl	8003560 <I2C_WaitOnTXISFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e07b      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d034      	beq.n	80030b4 <HAL_I2C_Mem_Write+0x1c8>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d130      	bne.n	80030b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa3f 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e04d      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2bff      	cmp	r3, #255	; 0xff
 8003074:	d90e      	bls.n	8003094 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	2300      	movs	r3, #0
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fb49 	bl	8003724 <I2C_TransferConfig>
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	8979      	ldrh	r1, [r7, #10]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fb38 	bl	8003724 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d19e      	bne.n	8002ffc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fa8c 	bl	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e01a      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2220      	movs	r2, #32
 80030d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_I2C_Mem_Write+0x224>)
 80030e6:	400b      	ands	r3, r1
 80030e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	fe00e800 	.word	0xfe00e800

08003114 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	460b      	mov	r3, r1
 8003128:	813b      	strh	r3, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b20      	cmp	r3, #32
 8003138:	f040 80fd 	bne.w	8003336 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_I2C_Mem_Read+0x34>
 8003142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0f1      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Mem_Read+0x4e>
 800315e:	2302      	movs	r3, #2
 8003160:	e0ea      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800316a:	f7ff fa23 	bl	80025b4 <HAL_GetTick>
 800316e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	2319      	movs	r3, #25
 8003176:	2201      	movs	r2, #1
 8003178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f9af 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0d5      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2222      	movs	r2, #34	; 0x22
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031b4:	88f8      	ldrh	r0, [r7, #6]
 80031b6:	893a      	ldrh	r2, [r7, #8]
 80031b8:	8979      	ldrh	r1, [r7, #10]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4603      	mov	r3, r0
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f913 	bl	80033f0 <I2C_RequestMemoryRead>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ad      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2bff      	cmp	r3, #255	; 0xff
 80031e4:	d90e      	bls.n	8003204 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	22ff      	movs	r2, #255	; 0xff
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	8979      	ldrh	r1, [r7, #10]
 80031f4:	4b52      	ldr	r3, [pc, #328]	; (8003340 <HAL_I2C_Mem_Read+0x22c>)
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fa91 	bl	8003724 <I2C_TransferConfig>
 8003202:	e00f      	b.n	8003224 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	b2da      	uxtb	r2, r3
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <HAL_I2C_Mem_Read+0x22c>)
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa80 	bl	8003724 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	2200      	movs	r2, #0
 800322c:	2104      	movs	r1, #4
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f956 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07c      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d034      	beq.n	80032e4 <HAL_I2C_Mem_Read+0x1d0>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d130      	bne.n	80032e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f927 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e04d      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2bff      	cmp	r3, #255	; 0xff
 80032a4:	d90e      	bls.n	80032c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	8979      	ldrh	r1, [r7, #10]
 80032b4:	2300      	movs	r3, #0
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fa31 	bl	8003724 <I2C_TransferConfig>
 80032c2:	e00f      	b.n	80032e4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	8979      	ldrh	r1, [r7, #10]
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa20 	bl	8003724 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d19a      	bne.n	8003224 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f974 	bl	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e01a      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2220      	movs	r2, #32
 8003308:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_I2C_Mem_Read+0x230>)
 8003316:	400b      	ands	r3, r1
 8003318:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	80002400 	.word	0x80002400
 8003344:	fe00e800 	.word	0xfe00e800

08003348 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	4608      	mov	r0, r1
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	4603      	mov	r3, r0
 8003358:	817b      	strh	r3, [r7, #10]
 800335a:	460b      	mov	r3, r1
 800335c:	813b      	strh	r3, [r7, #8]
 800335e:	4613      	mov	r3, r2
 8003360:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8979      	ldrh	r1, [r7, #10]
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <I2C_RequestMemoryWrite+0xa4>)
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f9d7 	bl	8003724 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	69b9      	ldr	r1, [r7, #24]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8f0 	bl	8003560 <I2C_WaitOnTXISFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02c      	b.n	80033e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
 800339a:	e015      	b.n	80033c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	69b9      	ldr	r1, [r7, #24]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f8d6 	bl	8003560 <I2C_WaitOnTXISFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e012      	b.n	80033e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033be:	893b      	ldrh	r3, [r7, #8]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f884 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	80002000 	.word	0x80002000

080033f0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <I2C_RequestMemoryRead+0xa4>)
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f984 	bl	8003724 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f89d 	bl	8003560 <I2C_WaitOnTXISFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e02c      	b.n	800348a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003436:	893b      	ldrh	r3, [r7, #8]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
 8003440:	e015      	b.n	800346e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	b29b      	uxth	r3, r3
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f883 	bl	8003560 <I2C_WaitOnTXISFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e012      	b.n	800348a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2200      	movs	r2, #0
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f831 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	80002000 	.word	0x80002000

08003498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	619a      	str	r2, [r3, #24]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f0:	e022      	b.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d01e      	beq.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7ff f85b 	bl	80025b4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d113      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e00f      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	429a      	cmp	r2, r3
 8003554:	d0cd      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800356c:	e02c      	b.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f870 	bl	8003658 <I2C_IsAcknowledgeFailed>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e02a      	b.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d01e      	beq.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7ff f813 	bl	80025b4 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e007      	b.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d1cb      	bne.n	800356e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ec:	e028      	b.n	8003640 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f830 	bl	8003658 <I2C_IsAcknowledgeFailed>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e026      	b.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fe ffd7 	bl	80025b4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e007      	b.n	8003650 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d1cf      	bne.n	80035ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d151      	bne.n	8003716 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003672:	e022      	b.n	80036ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d01e      	beq.n	80036ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367c:	f7fe ff9a 	bl	80025b4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <I2C_IsAcknowledgeFailed+0x3a>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d113      	bne.n	80036ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e02e      	b.n	8003718 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d1d5      	bne.n	8003674 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2210      	movs	r2, #16
 80036ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2220      	movs	r2, #32
 80036d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff fedd 	bl	8003498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <I2C_IsAcknowledgeFailed+0xc8>)
 80036ea:	400b      	ands	r3, r1
 80036ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f043 0204 	orr.w	r2, r3, #4
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	fe00e800 	.word	0xfe00e800

08003724 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	817b      	strh	r3, [r7, #10]
 8003732:	4613      	mov	r3, r2
 8003734:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	0d5b      	lsrs	r3, r3, #21
 8003740:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <I2C_TransferConfig+0x58>)
 8003746:	430b      	orrs	r3, r1
 8003748:	43db      	mvns	r3, r3
 800374a:	ea02 0103 	and.w	r1, r2, r3
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003754:	7a7b      	ldrb	r3, [r7, #9]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	431a      	orrs	r2, r3
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	03ff63ff 	.word	0x03ff63ff

08003780 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d138      	bne.n	8003808 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e032      	b.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003826:	6013      	str	r3, [r2, #0]
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40007000 	.word	0x40007000

08003838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <HAL_PWREx_GetVoltageRange+0x18>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40007000 	.word	0x40007000

08003854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003862:	d130      	bne.n	80038c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003864:	4b23      	ldr	r3, [pc, #140]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d038      	beq.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800387a:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2232      	movs	r2, #50	; 0x32
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0c9b      	lsrs	r3, r3, #18
 8003894:	3301      	adds	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003898:	e002      	b.n	80038a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3b01      	subs	r3, #1
 800389e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ac:	d102      	bne.n	80038b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f2      	bne.n	800389a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c0:	d110      	bne.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e00f      	b.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d007      	beq.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038dc:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40007000 	.word	0x40007000
 80038f8:	20000000 	.word	0x20000000
 80038fc:	431bde83 	.word	0x431bde83

08003900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e3d8      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003912:	4b97      	ldr	r3, [pc, #604]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800391c:	4b94      	ldr	r3, [pc, #592]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80e4 	beq.w	8003afc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_RCC_OscConfig+0x4a>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f040 808b 	bne.w	8003a58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 8087 	bne.w	8003a58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800394a:	4b89      	ldr	r3, [pc, #548]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x62>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e3b0      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <HAL_RCC_OscConfig+0x7c>
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397a:	e005      	b.n	8003988 <HAL_RCC_OscConfig+0x88>
 800397c:	4b7c      	ldr	r3, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 800397e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	4293      	cmp	r3, r2
 800398a:	d223      	bcs.n	80039d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fd43 	bl	800441c <RCC_SetFlashLatencyFromMSIRange>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e391      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a0:	4b73      	ldr	r3, [pc, #460]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a72      	ldr	r2, [pc, #456]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039a6:	f043 0308 	orr.w	r3, r3, #8
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	496d      	ldr	r1, [pc, #436]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039be:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	4968      	ldr	r1, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
 80039d2:	e025      	b.n	8003a20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a65      	ldr	r2, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039da:	f043 0308 	orr.w	r3, r3, #8
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4960      	ldr	r1, [pc, #384]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	495b      	ldr	r1, [pc, #364]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fd03 	bl	800441c <RCC_SetFlashLatencyFromMSIRange>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e351      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a20:	f000 fc38 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b52      	ldr	r3, [pc, #328]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	4950      	ldr	r1, [pc, #320]	; (8003b74 <HAL_RCC_OscConfig+0x274>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3c:	4a4e      	ldr	r2, [pc, #312]	; (8003b78 <HAL_RCC_OscConfig+0x278>)
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a40:	4b4e      	ldr	r3, [pc, #312]	; (8003b7c <HAL_RCC_OscConfig+0x27c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fd65 	bl	8002514 <HAL_InitTick>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d052      	beq.n	8003afa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	e335      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d032      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fda2 	bl	80025b4 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a74:	f7fe fd9e 	bl	80025b4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e31e      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a36      	ldr	r2, [pc, #216]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003a98:	f043 0308 	orr.w	r3, r3, #8
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4931      	ldr	r1, [pc, #196]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	492c      	ldr	r1, [pc, #176]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e01a      	b.n	8003afc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fd6f 	bl	80025b4 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ada:	f7fe fd6b 	bl	80025b4 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e2eb      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x1da>
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003afa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d074      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d005      	beq.n	8003b1a <HAL_RCC_OscConfig+0x21a>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	d10e      	bne.n	8003b32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d10b      	bne.n	8003b32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d064      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d160      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e2c8      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x24a>
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e026      	b.n	8003b98 <HAL_RCC_OscConfig+0x298>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b52:	d115      	bne.n	8003b80 <HAL_RCC_OscConfig+0x280>
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a02      	ldr	r2, [pc, #8]	; (8003b70 <HAL_RCC_OscConfig+0x270>)
 8003b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x298>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	0800dd44 	.word	0x0800dd44
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	2000006c 	.word	0x2000006c
 8003b80:	4ba0      	ldr	r3, [pc, #640]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a9f      	ldr	r2, [pc, #636]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b9d      	ldr	r3, [pc, #628]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9c      	ldr	r2, [pc, #624]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fd08 	bl	80025b4 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fd04 	bl	80025b4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e284      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bba:	4b92      	ldr	r3, [pc, #584]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x2a8>
 8003bc6:	e014      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fcf4 	bl	80025b4 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe fcf0 	bl	80025b4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e270      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003be2:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2d0>
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d060      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_OscConfig+0x310>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b0c      	cmp	r3, #12
 8003c08:	d119      	bne.n	8003c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d116      	bne.n	8003c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c10:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x328>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e24d      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	4973      	ldr	r1, [pc, #460]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c3c:	e040      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d023      	beq.n	8003c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c46:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fe fcaf 	bl	80025b4 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fcab 	bl	80025b4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e22b      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c6c:	4b65      	ldr	r3, [pc, #404]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b62      	ldr	r3, [pc, #392]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	495f      	ldr	r1, [pc, #380]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
 8003c8c:	e018      	b.n	8003cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8e:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fc8b 	bl	80025b4 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fc87 	bl	80025b4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e207      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb4:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01c      	beq.n	8003d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cda:	4a4a      	ldr	r2, [pc, #296]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fe fc66 	bl	80025b4 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cec:	f7fe fc62 	bl	80025b4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e1e2      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfe:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <HAL_RCC_OscConfig+0x3ec>
 8003d0c:	e01b      	b.n	8003d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fc49 	bl	80025b4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe fc45 	bl	80025b4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e1c5      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d38:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ef      	bne.n	8003d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a6 	beq.w	8003ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d58:	4b2a      	ldr	r3, [pc, #168]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10d      	bne.n	8003d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d70:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <HAL_RCC_OscConfig+0x508>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d118      	bne.n	8003dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <HAL_RCC_OscConfig+0x508>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_RCC_OscConfig+0x508>)
 8003d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d98:	f7fe fc0c 	bl	80025b4 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da0:	f7fe fc08 	bl	80025b4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e188      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_RCC_OscConfig+0x508>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d108      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4d8>
 8003dc6:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dd6:	e029      	b.n	8003e2c <HAL_RCC_OscConfig+0x52c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d115      	bne.n	8003e0c <HAL_RCC_OscConfig+0x50c>
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003de8:	f043 0304 	orr.w	r3, r3, #4
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e00:	e014      	b.n	8003e2c <HAL_RCC_OscConfig+0x52c>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	4b91      	ldr	r3, [pc, #580]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a90      	ldr	r2, [pc, #576]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e1c:	4b8d      	ldr	r3, [pc, #564]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	4a8c      	ldr	r2, [pc, #560]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d016      	beq.n	8003e62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e34:	f7fe fbbe 	bl	80025b4 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fbba 	bl	80025b4 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e138      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	4b80      	ldr	r3, [pc, #512]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ed      	beq.n	8003e3c <HAL_RCC_OscConfig+0x53c>
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fe fba7 	bl	80025b4 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fba3 	bl	80025b4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e121      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e80:	4b74      	ldr	r3, [pc, #464]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1ed      	bne.n	8003e6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e94:	4b6f      	ldr	r3, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	4a6e      	ldr	r2, [pc, #440]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 810c 	beq.w	80040c2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	f040 80d4 	bne.w	800405c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eb4:	4b67      	ldr	r3, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0203 	and.w	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d130      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d127      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d11f      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef4:	2a07      	cmp	r2, #7
 8003ef6:	bf14      	ite	ne
 8003ef8:	2201      	movne	r2, #1
 8003efa:	2200      	moveq	r2, #0
 8003efc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d113      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d06e      	beq.n	8004008 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d069      	beq.n	8004004 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f30:	4b48      	ldr	r3, [pc, #288]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0bb      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f58:	f7fe fb2c 	bl	80025b4 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fe fb28 	bl	80025b4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0a8      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7e:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	4b35      	ldr	r3, [pc, #212]	; (8004058 <HAL_RCC_OscConfig+0x758>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f8e:	3a01      	subs	r2, #1
 8003f90:	0112      	lsls	r2, r2, #4
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f98:	0212      	lsls	r2, r2, #8
 8003f9a:	4311      	orrs	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fa0:	0852      	lsrs	r2, r2, #1
 8003fa2:	3a01      	subs	r2, #1
 8003fa4:	0552      	lsls	r2, r2, #21
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fac:	0852      	lsrs	r2, r2, #1
 8003fae:	3a01      	subs	r2, #1
 8003fb0:	0652      	lsls	r2, r2, #25
 8003fb2:	4311      	orrs	r1, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb8:	0912      	lsrs	r2, r2, #4
 8003fba:	0452      	lsls	r2, r2, #17
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	4925      	ldr	r1, [pc, #148]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fdc:	f7fe faea 	bl	80025b4 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe fae6 	bl	80025b4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e066      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004002:	e05e      	b.n	80040c2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e05d      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d156      	bne.n	80040c2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800402c:	f7fe fac2 	bl	80025b4 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe fabe 	bl	80025b4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e03e      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_OscConfig+0x754>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x734>
 8004052:	e036      	b.n	80040c2 <HAL_RCC_OscConfig+0x7c2>
 8004054:	40021000 	.word	0x40021000
 8004058:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d02d      	beq.n	80040be <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a19      	ldr	r2, [pc, #100]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 8004068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 8004080:	f023 0303 	bic.w	r3, r3, #3
 8004084:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4a10      	ldr	r2, [pc, #64]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 800408c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004094:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fe fa8d 	bl	80025b4 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe fa89 	bl	80025b4 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e009      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x7cc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x79e>
 80040bc:	e001      	b.n	80040c2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0c8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d910      	bls.n	8004114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	4961      	ldr	r1, [pc, #388]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b0      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d04c      	beq.n	80041ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004128:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d121      	bne.n	8004178 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e09e      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d107      	bne.n	8004150 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e092      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004158:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e086      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004168:	4b46      	ldr	r3, [pc, #280]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e07e      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004178:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 0203 	bic.w	r2, r3, #3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	493f      	ldr	r1, [pc, #252]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418a:	f7fe fa13 	bl	80025b4 <HAL_GetTick>
 800418e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004192:	f7fe fa0f 	bl	80025b4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e066      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	4b36      	ldr	r3, [pc, #216]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 020c 	and.w	r2, r3, #12
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d1eb      	bne.n	8004192 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	492c      	ldr	r1, [pc, #176]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d210      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 0207 	bic.w	r2, r3, #7
 80041ee:	4924      	ldr	r1, [pc, #144]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1b0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e036      	b.n	8004276 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4918      	ldr	r1, [pc, #96]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4910      	ldr	r1, [pc, #64]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004246:	f000 f825 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <HAL_RCC_ClockConfig+0x1b4>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490c      	ldr	r1, [pc, #48]	; (8004288 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe f952 	bl	8002514 <HAL_InitTick>
 8004270:	4603      	mov	r3, r0
 8004272:	72fb      	strb	r3, [r7, #11]

  return status;
 8004274:	7afb      	ldrb	r3, [r7, #11]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40022000 	.word	0x40022000
 8004284:	40021000 	.word	0x40021000
 8004288:	0800dd44 	.word	0x0800dd44
 800428c:	20000000 	.word	0x20000000
 8004290:	2000006c 	.word	0x2000006c

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	; 0x24
 8004298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x34>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d121      	bne.n	8004306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d11e      	bne.n	8004306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042f0:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004304:	e00a      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d102      	bne.n	8004312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e004      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d101      	bne.n	800431c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800431a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d134      	bne.n	800438c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0xa6>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d003      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xac>
 8004338:	e005      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800433c:	617b      	str	r3, [r7, #20]
      break;
 800433e:	e005      	b.n	800434c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004342:	617b      	str	r3, [r7, #20]
      break;
 8004344:	e002      	b.n	800434c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	617b      	str	r3, [r7, #20]
      break;
 800434a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	3301      	adds	r3, #1
 8004358:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	fb03 f202 	mul.w	r2, r3, r2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	0e5b      	lsrs	r3, r3, #25
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	3301      	adds	r3, #1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800438c:	69bb      	ldr	r3, [r7, #24]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	; 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800dd5c 	.word	0x0800dd5c
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000000 	.word	0x20000000

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c8:	f7ff fff0 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4904      	ldr	r1, [pc, #16]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	0800dd54 	.word	0x0800dd54

080043f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043f4:	f7ff ffda 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0adb      	lsrs	r3, r3, #11
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4904      	ldr	r1, [pc, #16]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	0800dd54 	.word	0x0800dd54

0800441c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004428:	4b2a      	ldr	r3, [pc, #168]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004434:	f7ff fa00 	bl	8003838 <HAL_PWREx_GetVoltageRange>
 8004438:	6178      	str	r0, [r7, #20]
 800443a:	e014      	b.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004446:	6593      	str	r3, [r2, #88]	; 0x58
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004454:	f7ff f9f0 	bl	8003838 <HAL_PWREx_GetVoltageRange>
 8004458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446c:	d10b      	bne.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b80      	cmp	r3, #128	; 0x80
 8004472:	d919      	bls.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2ba0      	cmp	r3, #160	; 0xa0
 8004478:	d902      	bls.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800447a:	2302      	movs	r3, #2
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	e013      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004480:	2301      	movs	r3, #1
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e010      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b80      	cmp	r3, #128	; 0x80
 800448a:	d902      	bls.n	8004492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800448c:	2303      	movs	r3, #3
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	e00a      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d102      	bne.n	800449e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004498:	2302      	movs	r3, #2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	e004      	b.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b70      	cmp	r3, #112	; 0x70
 80044a2:	d101      	bne.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044a4:	2301      	movs	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f023 0207 	bic.w	r2, r3, #7
 80044b0:	4909      	ldr	r1, [pc, #36]	; (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d001      	beq.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40022000 	.word	0x40022000

080044dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e4:	2300      	movs	r3, #0
 80044e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e8:	2300      	movs	r3, #0
 80044ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d041      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004500:	d02a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004502:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004506:	d824      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800450c:	d008      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800450e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004512:	d81e      	bhi.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451c:	d010      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800451e:	e018      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004520:	4b86      	ldr	r3, [pc, #536]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a85      	ldr	r2, [pc, #532]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800452c:	e015      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f000 facb 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800453e:	e00c      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3320      	adds	r3, #32
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fbb6 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	74fb      	strb	r3, [r7, #19]
      break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004560:	4b76      	ldr	r3, [pc, #472]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456e:	4973      	ldr	r1, [pc, #460]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004576:	e001      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d041      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004590:	d02a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004592:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004596:	d824      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459c:	d008      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800459e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045a2:	d81e      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045ac:	d010      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045ae:	e018      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045b0:	4b62      	ldr	r3, [pc, #392]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a61      	ldr	r2, [pc, #388]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045bc:	e015      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fa83 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045ce:	e00c      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3320      	adds	r3, #32
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fb6e 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	74fb      	strb	r3, [r7, #19]
      break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045f0:	4b52      	ldr	r3, [pc, #328]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fe:	494f      	ldr	r1, [pc, #316]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004606:	e001      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a0 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461e:	4b47      	ldr	r3, [pc, #284]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b41      	ldr	r3, [pc, #260]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4a40      	ldr	r2, [pc, #256]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6593      	str	r3, [r2, #88]	; 0x58
 8004640:	4b3e      	ldr	r3, [pc, #248]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464c:	2301      	movs	r3, #1
 800464e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004650:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465c:	f7fd ffaa 	bl	80025b4 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004662:	e009      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fd ffa6 	bl	80025b4 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d902      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	74fb      	strb	r3, [r7, #19]
        break;
 8004676:	e005      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004678:	4b31      	ldr	r3, [pc, #196]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d15c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800468a:	4b2c      	ldr	r3, [pc, #176]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01f      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d019      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a8:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	4a20      	ldr	r2, [pc, #128]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d4:	4a19      	ldr	r2, [pc, #100]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd ff65 	bl	80025b4 <HAL_GetTick>
 80046ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ec:	e00b      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fd ff61 	bl	80025b4 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d902      	bls.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	74fb      	strb	r3, [r7, #19]
            break;
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ec      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472a:	4904      	ldr	r1, [pc, #16]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004732:	e009      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
 8004738:	e006      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800473a:	bf00      	nop
 800473c:	40021000 	.word	0x40021000
 8004740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004748:	7c7b      	ldrb	r3, [r7, #17]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4b9e      	ldr	r3, [pc, #632]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	4a9d      	ldr	r2, [pc, #628]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004766:	4b98      	ldr	r3, [pc, #608]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f023 0203 	bic.w	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	4994      	ldr	r1, [pc, #592]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004788:	4b8f      	ldr	r3, [pc, #572]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 020c 	bic.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	498c      	ldr	r1, [pc, #560]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047aa:	4b87      	ldr	r3, [pc, #540]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	4983      	ldr	r1, [pc, #524]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047cc:	4b7e      	ldr	r3, [pc, #504]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	497b      	ldr	r1, [pc, #492]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ee:	4b76      	ldr	r3, [pc, #472]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	4972      	ldr	r1, [pc, #456]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004810:	4b6d      	ldr	r3, [pc, #436]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	496a      	ldr	r1, [pc, #424]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	4961      	ldr	r1, [pc, #388]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004854:	4b5c      	ldr	r3, [pc, #368]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	4959      	ldr	r1, [pc, #356]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004876:	4b54      	ldr	r3, [pc, #336]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	4950      	ldr	r1, [pc, #320]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004898:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	4948      	ldr	r1, [pc, #288]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ba:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	493f      	ldr	r1, [pc, #252]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d028      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048dc:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ea:	4937      	ldr	r1, [pc, #220]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d106      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a31      	ldr	r2, [pc, #196]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
 8004908:	e011      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004912:	d10c      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f8d8 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d028      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800493a:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	491f      	ldr	r1, [pc, #124]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004958:	d106      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004964:	60d3      	str	r3, [r2, #12]
 8004966:	e011      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004970:	d10c      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	2101      	movs	r1, #1
 8004978:	4618      	mov	r0, r3
 800497a:	f000 f8a9 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	4908      	ldr	r1, [pc, #32]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b6:	d109      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a02      	ldr	r2, [pc, #8]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	60d3      	str	r3, [r2, #12]
 80049c4:	e014      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	2101      	movs	r1, #1
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 f877 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e6:	7cfb      	ldrb	r3, [r7, #19]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049ec:	7cfb      	ldrb	r3, [r7, #19]
 80049ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02f      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049fc:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0a:	4928      	ldr	r1, [pc, #160]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a1a:	d10d      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2102      	movs	r1, #2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f854 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d014      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	74bb      	strb	r3, [r7, #18]
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3320      	adds	r3, #32
 8004a46:	2102      	movs	r1, #2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f935 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a68:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9a:	4904      	ldr	r1, [pc, #16]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aa2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000

08004ab0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004aba:	f043 0304 	orr.w	r3, r3, #4
 8004abe:	6013      	str	r3, [r2, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000

08004ad0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ade:	4b75      	ldr	r3, [pc, #468]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aea:	4b72      	ldr	r3, [pc, #456]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0203 	and.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
       ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b02:	4b6c      	ldr	r3, [pc, #432]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
       ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d047      	beq.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e044      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d018      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x86>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d825      	bhi.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0x62>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d009      	beq.n	8004b44 <RCCEx_PLLSAI1_Config+0x74>
 8004b30:	e020      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b32:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11d      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e01a      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b44:	4b5b      	ldr	r3, [pc, #364]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e013      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b56:	4b57      	ldr	r3, [pc, #348]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10f      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b62:	4b54      	ldr	r3, [pc, #336]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e004      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8a:	4b4a      	ldr	r3, [pc, #296]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	4944      	ldr	r1, [pc, #272]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d17d      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bac:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a40      	ldr	r2, [pc, #256]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fcfc 	bl	80025b4 <HAL_GetTick>
 8004bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bbe:	e009      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc0:	f7fd fcf8 	bl	80025b4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd2:	e005      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd4:	4b37      	ldr	r3, [pc, #220]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ef      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d160      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d111      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bec:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68d2      	ldr	r2, [r2, #12]
 8004c02:	0912      	lsrs	r2, r2, #4
 8004c04:	0452      	lsls	r2, r2, #17
 8004c06:	430a      	orrs	r2, r1
 8004c08:	492a      	ldr	r1, [pc, #168]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	610b      	str	r3, [r1, #16]
 8004c0e:	e027      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d112      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6892      	ldr	r2, [r2, #8]
 8004c26:	0211      	lsls	r1, r2, #8
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6912      	ldr	r2, [r2, #16]
 8004c2c:	0852      	lsrs	r2, r2, #1
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0552      	lsls	r2, r2, #21
 8004c32:	430a      	orrs	r2, r1
 8004c34:	491f      	ldr	r1, [pc, #124]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	610b      	str	r3, [r1, #16]
 8004c3a:	e011      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	0211      	lsls	r1, r2, #8
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6952      	ldr	r2, [r2, #20]
 8004c52:	0852      	lsrs	r2, r2, #1
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0652      	lsls	r2, r2, #25
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c60:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fca2 	bl	80025b4 <HAL_GetTick>
 8004c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c72:	e009      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c74:	f7fd fc9e 	bl	80025b4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	73fb      	strb	r3, [r7, #15]
          break;
 8004c86:	e005      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	4904      	ldr	r1, [pc, #16]	; (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cd2:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10d      	bne.n	8004cfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cea:	4b61      	ldr	r3, [pc, #388]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d047      	beq.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e044      	b.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d018      	beq.n	8004d3e <RCCEx_PLLSAI2_Config+0x86>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d825      	bhi.n	8004d5c <RCCEx_PLLSAI2_Config+0xa4>
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d002      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x62>
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d009      	beq.n	8004d2c <RCCEx_PLLSAI2_Config+0x74>
 8004d18:	e020      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d1a:	4b55      	ldr	r3, [pc, #340]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11d      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e01a      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d2c:	4b50      	ldr	r3, [pc, #320]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e013      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d4a:	4b49      	ldr	r3, [pc, #292]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d5a:	e006      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e004      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d72:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	430b      	orrs	r3, r1
 8004d88:	4939      	ldr	r1, [pc, #228]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d167      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d94:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a35      	ldr	r2, [pc, #212]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fd fc08 	bl	80025b4 <HAL_GetTick>
 8004da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004da6:	e009      	b.n	8004dbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da8:	f7fd fc04 	bl	80025b4 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d902      	bls.n	8004dbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dba:	e005      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dbc:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ef      	bne.n	8004da8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d14a      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d111      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd4:	4b26      	ldr	r3, [pc, #152]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	0912      	lsrs	r2, r2, #4
 8004dec:	0452      	lsls	r2, r2, #17
 8004dee:	430a      	orrs	r2, r1
 8004df0:	491f      	ldr	r1, [pc, #124]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	614b      	str	r3, [r1, #20]
 8004df6:	e011      	b.n	8004e1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	0211      	lsls	r1, r2, #8
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6912      	ldr	r2, [r2, #16]
 8004e0e:	0852      	lsrs	r2, r2, #1
 8004e10:	3a01      	subs	r2, #1
 8004e12:	0652      	lsls	r2, r2, #25
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4916      	ldr	r1, [pc, #88]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fd fbc4 	bl	80025b4 <HAL_GetTick>
 8004e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e2e:	e009      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e30:	f7fd fbc0 	bl	80025b4 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	73fb      	strb	r3, [r7, #15]
          break;
 8004e42:	e005      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ef      	beq.n	8004e30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4904      	ldr	r1, [pc, #16]	; (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000

08004e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e049      	b.n	8004f1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc fc50 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 faec 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d018      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_TIM_Base_Start_IT+0xc8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_Base_Start_IT+0x76>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d115      	bne.n	8004fc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	4b17      	ldr	r3, [pc, #92]	; (8005000 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d015      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0xb4>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d011      	beq.n	8004fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	e008      	b.n	8004fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e000      	b.n	8004fda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40000400 	.word	0x40000400
 8004ff0:	40000800 	.word	0x40000800
 8004ff4:	40000c00 	.word	0x40000c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	00010007 	.word	0x00010007

08005004 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	f241 1311 	movw	r3, #4369	; 0x1111
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10f      	bne.n	800504c <HAL_TIM_Base_Stop_IT+0x48>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	f240 4344 	movw	r3, #1092	; 0x444
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d107      	bne.n	800504c <HAL_TIM_Base_Stop_IT+0x48>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b02      	cmp	r3, #2
 8005076:	d122      	bne.n	80050be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b02      	cmp	r3, #2
 8005084:	d11b      	bne.n	80050be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0202 	mvn.w	r2, #2
 800508e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f9d5 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050aa:	e005      	b.n	80050b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f9c7 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9d8 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d122      	bne.n	8005112 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d11b      	bne.n	8005112 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f06f 0204 	mvn.w	r2, #4
 80050e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f9ab 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050fe:	e005      	b.n	800510c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f99d 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9ae 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d122      	bne.n	8005166 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b08      	cmp	r3, #8
 800512c:	d11b      	bne.n	8005166 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f06f 0208 	mvn.w	r2, #8
 8005136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2204      	movs	r2, #4
 800513c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f981 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005152:	e005      	b.n	8005160 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f973 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f984 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b10      	cmp	r3, #16
 8005172:	d122      	bne.n	80051ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b10      	cmp	r3, #16
 8005180:	d11b      	bne.n	80051ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0210 	mvn.w	r2, #16
 800518a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2208      	movs	r2, #8
 8005190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f957 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80051a6:	e005      	b.n	80051b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f949 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f95a 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10e      	bne.n	80051e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d107      	bne.n	80051e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f06f 0201 	mvn.w	r2, #1
 80051de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f923 	bl	800542c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b80      	cmp	r3, #128	; 0x80
 80051f2:	d10e      	bne.n	8005212 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb05 	bl	800581c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 faf8 	bl	8005830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d10e      	bne.n	800526c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d107      	bne.n	800526c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f908 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b20      	cmp	r3, #32
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b20      	cmp	r3, #32
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0220 	mvn.w	r2, #32
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fab8 	bl	8005808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0b5      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f4:	d03e      	beq.n	8005374 <HAL_TIM_ConfigClockSource+0xd4>
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fa:	f200 8087 	bhi.w	800540c <HAL_TIM_ConfigClockSource+0x16c>
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	f000 8085 	beq.w	8005410 <HAL_TIM_ConfigClockSource+0x170>
 8005306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530a:	d87f      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	2b70      	cmp	r3, #112	; 0x70
 800530e:	d01a      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0xa6>
 8005310:	2b70      	cmp	r3, #112	; 0x70
 8005312:	d87b      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b60      	cmp	r3, #96	; 0x60
 8005316:	d050      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x11a>
 8005318:	2b60      	cmp	r3, #96	; 0x60
 800531a:	d877      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b50      	cmp	r3, #80	; 0x50
 800531e:	d03c      	beq.n	800539a <HAL_TIM_ConfigClockSource+0xfa>
 8005320:	2b50      	cmp	r3, #80	; 0x50
 8005322:	d873      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d058      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x13a>
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d86f      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d064      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	2b30      	cmp	r3, #48	; 0x30
 8005332:	d86b      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d060      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d867      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05c      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d05a      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005344:	e062      	b.n	800540c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6899      	ldr	r1, [r3, #8]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f000 f9af 	bl	80056b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005368:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	609a      	str	r2, [r3, #8]
      break;
 8005372:	e04e      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6899      	ldr	r1, [r3, #8]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f000 f998 	bl	80056b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005396:	609a      	str	r2, [r3, #8]
      break;
 8005398:	e03b      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6859      	ldr	r1, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f000 f90c 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2150      	movs	r1, #80	; 0x50
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f965 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 80053b8:	e02b      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6859      	ldr	r1, [r3, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f000 f92b 	bl	8005622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2160      	movs	r1, #96	; 0x60
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f955 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 80053d8:	e01b      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f000 f8ec 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2140      	movs	r1, #64	; 0x40
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f945 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 80053f8:	e00b      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f000 f93c 	bl	8005682 <TIM_ITRx_SetConfig>
        break;
 800540a:	e002      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a40      	ldr	r2, [pc, #256]	; (80055a4 <TIM_Base_SetConfig+0x114>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d00f      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3d      	ldr	r2, [pc, #244]	; (80055a8 <TIM_Base_SetConfig+0x118>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3c      	ldr	r2, [pc, #240]	; (80055ac <TIM_Base_SetConfig+0x11c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3b      	ldr	r2, [pc, #236]	; (80055b0 <TIM_Base_SetConfig+0x120>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3a      	ldr	r2, [pc, #232]	; (80055b4 <TIM_Base_SetConfig+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d108      	bne.n	80054e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2f      	ldr	r2, [pc, #188]	; (80055a4 <TIM_Base_SetConfig+0x114>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01f      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f0:	d01b      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2c      	ldr	r2, [pc, #176]	; (80055a8 <TIM_Base_SetConfig+0x118>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d017      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2b      	ldr	r2, [pc, #172]	; (80055ac <TIM_Base_SetConfig+0x11c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2a      	ldr	r2, [pc, #168]	; (80055b0 <TIM_Base_SetConfig+0x120>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00f      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a29      	ldr	r2, [pc, #164]	; (80055b4 <TIM_Base_SetConfig+0x124>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a28      	ldr	r2, [pc, #160]	; (80055b8 <TIM_Base_SetConfig+0x128>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a27      	ldr	r2, [pc, #156]	; (80055bc <TIM_Base_SetConfig+0x12c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_Base_SetConfig+0x9a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a26      	ldr	r2, [pc, #152]	; (80055c0 <TIM_Base_SetConfig+0x130>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a10      	ldr	r2, [pc, #64]	; (80055a4 <TIM_Base_SetConfig+0x114>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00f      	beq.n	8005588 <TIM_Base_SetConfig+0xf8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <TIM_Base_SetConfig+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_Base_SetConfig+0xf8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <TIM_Base_SetConfig+0x128>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_Base_SetConfig+0xf8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a10      	ldr	r2, [pc, #64]	; (80055bc <TIM_Base_SetConfig+0x12c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0xf8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0f      	ldr	r2, [pc, #60]	; (80055c0 <TIM_Base_SetConfig+0x130>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d103      	bne.n	8005590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	615a      	str	r2, [r3, #20]
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800

080055c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f023 0201 	bic.w	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 030a 	bic.w	r3, r3, #10
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0210 	bic.w	r2, r3, #16
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800564c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800565e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f043 0307 	orr.w	r3, r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e068      	b.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800574a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d01d      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d018      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00e      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d009      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d004      	beq.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a14      	ldr	r2, [pc, #80]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10c      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40014000 	.word	0x40014000

08005808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e040      	b.n	80058d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb ffc6 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2224      	movs	r2, #36	; 0x24
 8005870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8c0 	bl	8005a08 <UART_SetConfig>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e022      	b.n	80058d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fb6e 	bl	8005f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fbf5 	bl	80060c0 <UART_CheckIdleState>
 80058d6:	4603      	mov	r3, r0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	f040 8082 	bne.w	80059fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_UART_Transmit+0x26>
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e07a      	b.n	8005a00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_UART_Transmit+0x38>
 8005914:	2302      	movs	r3, #2
 8005916:	e073      	b.n	8005a00 <HAL_UART_Transmit+0x120>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2221      	movs	r2, #33	; 0x21
 800592c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592e:	f7fc fe41 	bl	80025b4 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594c:	d108      	bne.n	8005960 <HAL_UART_Transmit+0x80>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e003      	b.n	8005968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005970:	e02d      	b.n	80059ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	2180      	movs	r1, #128	; 0x80
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fbe8 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e039      	b.n	8005a00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	881a      	ldrh	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599e:	b292      	uxth	r2, r2
 80059a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	3302      	adds	r3, #2
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	e008      	b.n	80059bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	b292      	uxth	r2, r2
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3301      	adds	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1cb      	bne.n	8005972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2140      	movs	r1, #64	; 0x40
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fbb4 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e005      	b.n	8005a00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a0c:	b08a      	sub	sp, #40	; 0x28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4ba4      	ldr	r3, [pc, #656]	; (8005cc8 <UART_SetConfig+0x2c0>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a99      	ldr	r2, [pc, #612]	; (8005ccc <UART_SetConfig+0x2c4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	4313      	orrs	r3, r2
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a90      	ldr	r2, [pc, #576]	; (8005cd0 <UART_SetConfig+0x2c8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d126      	bne.n	8005ae0 <UART_SetConfig+0xd8>
 8005a92:	4b90      	ldr	r3, [pc, #576]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d81b      	bhi.n	8005ad8 <UART_SetConfig+0xd0>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0xa0>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e116      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	e112      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ace:	e10e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad6:	e10a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ade:	e106      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a7c      	ldr	r2, [pc, #496]	; (8005cd8 <UART_SetConfig+0x2d0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d138      	bne.n	8005b5c <UART_SetConfig+0x154>
 8005aea:	4b7a      	ldr	r3, [pc, #488]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d82d      	bhi.n	8005b54 <UART_SetConfig+0x14c>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0xf8>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b35 	.word	0x08005b35
 8005b04:	08005b55 	.word	0x08005b55
 8005b08:	08005b55 	.word	0x08005b55
 8005b0c:	08005b55 	.word	0x08005b55
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b55 	.word	0x08005b55
 8005b20:	08005b3d 	.word	0x08005b3d
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b4d 	.word	0x08005b4d
 8005b34:	2300      	movs	r3, #0
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e0d8      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e0d4      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b44:	2304      	movs	r3, #4
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4a:	e0d0      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b4c:	2308      	movs	r3, #8
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b52:	e0cc      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b54:	2310      	movs	r3, #16
 8005b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5a:	e0c8      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <UART_SetConfig+0x2d4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d125      	bne.n	8005bb2 <UART_SetConfig+0x1aa>
 8005b66:	4b5b      	ldr	r3, [pc, #364]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d016      	beq.n	8005ba2 <UART_SetConfig+0x19a>
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d818      	bhi.n	8005baa <UART_SetConfig+0x1a2>
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d00a      	beq.n	8005b92 <UART_SetConfig+0x18a>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d814      	bhi.n	8005baa <UART_SetConfig+0x1a2>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <UART_SetConfig+0x182>
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d008      	beq.n	8005b9a <UART_SetConfig+0x192>
 8005b88:	e00f      	b.n	8005baa <UART_SetConfig+0x1a2>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b90:	e0ad      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b92:	2302      	movs	r3, #2
 8005b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b98:	e0a9      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba0:	e0a5      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba8:	e0a1      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005baa:	2310      	movs	r3, #16
 8005bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb0:	e09d      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a4a      	ldr	r2, [pc, #296]	; (8005ce0 <UART_SetConfig+0x2d8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d125      	bne.n	8005c08 <UART_SetConfig+0x200>
 8005bbc:	4b45      	ldr	r3, [pc, #276]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8005bc8:	d016      	beq.n	8005bf8 <UART_SetConfig+0x1f0>
 8005bca:	2bc0      	cmp	r3, #192	; 0xc0
 8005bcc:	d818      	bhi.n	8005c00 <UART_SetConfig+0x1f8>
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d00a      	beq.n	8005be8 <UART_SetConfig+0x1e0>
 8005bd2:	2b80      	cmp	r3, #128	; 0x80
 8005bd4:	d814      	bhi.n	8005c00 <UART_SetConfig+0x1f8>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <UART_SetConfig+0x1d8>
 8005bda:	2b40      	cmp	r3, #64	; 0x40
 8005bdc:	d008      	beq.n	8005bf0 <UART_SetConfig+0x1e8>
 8005bde:	e00f      	b.n	8005c00 <UART_SetConfig+0x1f8>
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e082      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005be8:	2302      	movs	r3, #2
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	e07e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf6:	e07a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e076      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c06:	e072      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a35      	ldr	r2, [pc, #212]	; (8005ce4 <UART_SetConfig+0x2dc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d12a      	bne.n	8005c68 <UART_SetConfig+0x260>
 8005c12:	4b30      	ldr	r3, [pc, #192]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c20:	d01a      	beq.n	8005c58 <UART_SetConfig+0x250>
 8005c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c26:	d81b      	bhi.n	8005c60 <UART_SetConfig+0x258>
 8005c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c2c:	d00c      	beq.n	8005c48 <UART_SetConfig+0x240>
 8005c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c32:	d815      	bhi.n	8005c60 <UART_SetConfig+0x258>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <UART_SetConfig+0x238>
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3c:	d008      	beq.n	8005c50 <UART_SetConfig+0x248>
 8005c3e:	e00f      	b.n	8005c60 <UART_SetConfig+0x258>
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e052      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e04e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e04a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e046      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e042      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <UART_SetConfig+0x2c4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d13a      	bne.n	8005ce8 <UART_SetConfig+0x2e0>
 8005c72:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <UART_SetConfig+0x2cc>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c80:	d01a      	beq.n	8005cb8 <UART_SetConfig+0x2b0>
 8005c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c86:	d81b      	bhi.n	8005cc0 <UART_SetConfig+0x2b8>
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d00c      	beq.n	8005ca8 <UART_SetConfig+0x2a0>
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d815      	bhi.n	8005cc0 <UART_SetConfig+0x2b8>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0x298>
 8005c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c9c:	d008      	beq.n	8005cb0 <UART_SetConfig+0x2a8>
 8005c9e:	e00f      	b.n	8005cc0 <UART_SetConfig+0x2b8>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca6:	e022      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e01e      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	e01a      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbe:	e016      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc6:	e012      	b.n	8005cee <UART_SetConfig+0x2e6>
 8005cc8:	efff69f3 	.word	0xefff69f3
 8005ccc:	40008000 	.word	0x40008000
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40004400 	.word	0x40004400
 8005cdc:	40004800 	.word	0x40004800
 8005ce0:	40004c00 	.word	0x40004c00
 8005ce4:	40005000 	.word	0x40005000
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4aa0      	ldr	r2, [pc, #640]	; (8005f74 <UART_SetConfig+0x56c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d17a      	bne.n	8005dee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d824      	bhi.n	8005d4a <UART_SetConfig+0x342>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x300>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d4b 	.word	0x08005d4b
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d4b 	.word	0x08005d4b
 8005d18:	08005d3b 	.word	0x08005d3b
 8005d1c:	08005d4b 	.word	0x08005d4b
 8005d20:	08005d4b 	.word	0x08005d4b
 8005d24:	08005d4b 	.word	0x08005d4b
 8005d28:	08005d43 	.word	0x08005d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe fb4a 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 8005d30:	61f8      	str	r0, [r7, #28]
        break;
 8005d32:	e010      	b.n	8005d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d34:	4b90      	ldr	r3, [pc, #576]	; (8005f78 <UART_SetConfig+0x570>)
 8005d36:	61fb      	str	r3, [r7, #28]
        break;
 8005d38:	e00d      	b.n	8005d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3a:	f7fe faab 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8005d3e:	61f8      	str	r0, [r7, #28]
        break;
 8005d40:	e009      	b.n	8005d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d46:	61fb      	str	r3, [r7, #28]
        break;
 8005d48:	e005      	b.n	8005d56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80fd 	beq.w	8005f58 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d305      	bcc.n	8005d7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d903      	bls.n	8005d82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d80:	e0ea      	b.n	8005f58 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2200      	movs	r2, #0
 8005d86:	461c      	mov	r4, r3
 8005d88:	4615      	mov	r5, r2
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	022b      	lsls	r3, r5, #8
 8005d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d98:	0222      	lsls	r2, r4, #8
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	6849      	ldr	r1, [r1, #4]
 8005d9e:	0849      	lsrs	r1, r1, #1
 8005da0:	2000      	movs	r0, #0
 8005da2:	4688      	mov	r8, r1
 8005da4:	4681      	mov	r9, r0
 8005da6:	eb12 0a08 	adds.w	sl, r2, r8
 8005daa:	eb43 0b09 	adc.w	fp, r3, r9
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	4659      	mov	r1, fp
 8005dc0:	f7fa ff42 	bl	8000c48 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4613      	mov	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd2:	d308      	bcc.n	8005de6 <UART_SetConfig+0x3de>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dda:	d204      	bcs.n	8005de6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	60da      	str	r2, [r3, #12]
 8005de4:	e0b8      	b.n	8005f58 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dec:	e0b4      	b.n	8005f58 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df6:	d15f      	bne.n	8005eb8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8005df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d828      	bhi.n	8005e52 <UART_SetConfig+0x44a>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x400>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	08005e53 	.word	0x08005e53
 8005e18:	08005e43 	.word	0x08005e43
 8005e1c:	08005e53 	.word	0x08005e53
 8005e20:	08005e53 	.word	0x08005e53
 8005e24:	08005e53 	.word	0x08005e53
 8005e28:	08005e4b 	.word	0x08005e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fe faca 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 8005e30:	61f8      	str	r0, [r7, #28]
        break;
 8005e32:	e014      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e34:	f7fe fadc 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e010      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e3c:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <UART_SetConfig+0x570>)
 8005e3e:	61fb      	str	r3, [r7, #28]
        break;
 8005e40:	e00d      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e42:	f7fe fa27 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8005e46:	61f8      	str	r0, [r7, #28]
        break;
 8005e48:	e009      	b.n	8005e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4e:	61fb      	str	r3, [r7, #28]
        break;
 8005e50:	e005      	b.n	8005e5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d079      	beq.n	8005f58 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005a      	lsls	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	441a      	add	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b0f      	cmp	r3, #15
 8005e80:	d916      	bls.n	8005eb0 <UART_SetConfig+0x4a8>
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d212      	bcs.n	8005eb0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f023 030f 	bic.w	r3, r3, #15
 8005e92:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	8afb      	ldrh	r3, [r7, #22]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	8afa      	ldrh	r2, [r7, #22]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e053      	b.n	8005f58 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eb6:	e04f      	b.n	8005f58 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d828      	bhi.n	8005f12 <UART_SetConfig+0x50a>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0x4c0>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005ef5 	.word	0x08005ef5
 8005ed0:	08005efd 	.word	0x08005efd
 8005ed4:	08005f13 	.word	0x08005f13
 8005ed8:	08005f03 	.word	0x08005f03
 8005edc:	08005f13 	.word	0x08005f13
 8005ee0:	08005f13 	.word	0x08005f13
 8005ee4:	08005f13 	.word	0x08005f13
 8005ee8:	08005f0b 	.word	0x08005f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eec:	f7fe fa6a 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 8005ef0:	61f8      	str	r0, [r7, #28]
        break;
 8005ef2:	e014      	b.n	8005f1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fe fa7c 	bl	80043f0 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	61f8      	str	r0, [r7, #28]
        break;
 8005efa:	e010      	b.n	8005f1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005efc:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <UART_SetConfig+0x570>)
 8005efe:	61fb      	str	r3, [r7, #28]
        break;
 8005f00:	e00d      	b.n	8005f1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f02:	f7fe f9c7 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8005f06:	61f8      	str	r0, [r7, #28]
        break;
 8005f08:	e009      	b.n	8005f1e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0e:	61fb      	str	r3, [r7, #28]
        break;
 8005f10:	e005      	b.n	8005f1e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d019      	beq.n	8005f58 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	085a      	lsrs	r2, r3, #1
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d908      	bls.n	8005f52 <UART_SetConfig+0x54a>
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f46:	d204      	bcs.n	8005f52 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	60da      	str	r2, [r3, #12]
 8005f50:	e002      	b.n	8005f58 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	; 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f72:	bf00      	nop
 8005f74:	40008000 	.word	0x40008000
 8005f78:	00f42400 	.word	0x00f42400

08005f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607a:	d10a      	bne.n	8006092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060d0:	f7fc fa70 	bl	80025b4 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d10e      	bne.n	8006102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f82d 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e023      	b.n	800614a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b04      	cmp	r3, #4
 800610e:	d10e      	bne.n	800612e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f817 	bl	8006152 <UART_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e00d      	b.n	800614a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	e05e      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d05a      	beq.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616c:	f7fc fa22 	bl	80025b4 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <UART_WaitOnFlagUntilTimeout+0x30>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d11b      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006190:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e043      	b.n	8006242 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d02c      	beq.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d6:	d124      	bne.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2220      	movs	r2, #32
 8006206:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e00f      	b.n	8006242 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4013      	ands	r3, r2
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	429a      	cmp	r2, r3
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	429a      	cmp	r2, r3
 800623e:	d091      	beq.n	8006164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <max>:
uint32_t time;
uint8_t buffertx[50]={0};
uint8_t buffertx1[100]={0};

//definizione della funzione che restituisce l'indice del valore massimo in un array
int max(float a[], int dim){
 800624a:	b480      	push	{r7}
 800624c:	b087      	sub	sp, #28
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
	float max=0;
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
	int index;
	for (int i=0; i<dim; i++) {
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	e017      	b.n	8006290 <max+0x46>
		if (max<a[i])
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	edd3 7a00 	vldr	s15, [r3]
 800626c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006278:	d507      	bpl.n	800628a <max+0x40>
		{
			max=a[i];
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4413      	add	r3, r2
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	617b      	str	r3, [r7, #20]
			index=i;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	613b      	str	r3, [r7, #16]
	for (int i=0; i<dim; i++) {
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	dbe3      	blt.n	8006260 <max+0x16>
		}
	}
	return index;
 8006298:	693b      	ldr	r3, [r7, #16]
}
 800629a:	4618      	mov	r0, r3
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <riempi_array>:


//definizione della funzione che va a riempire un array di dimensione pari a k=30
void riempi_array(int x){
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	if(k<1){
 80062b0:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <riempi_array+0x50>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dc0b      	bgt.n	80062d0 <riempi_array+0x28>
		val[k]=x;
 80062b8:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <riempi_array+0x50>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	490f      	ldr	r1, [pc, #60]	; (80062fc <riempi_array+0x54>)
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 80062c4:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <riempi_array+0x50>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <riempi_array+0x50>)
 80062cc:	6013      	str	r3, [r2, #0]
	}else{
		k=0;
		val[k]=x;
		k++;
	}
}
 80062ce:	e00d      	b.n	80062ec <riempi_array+0x44>
		k=0;
 80062d0:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <riempi_array+0x50>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
		val[k]=x;
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <riempi_array+0x50>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4908      	ldr	r1, [pc, #32]	; (80062fc <riempi_array+0x54>)
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <riempi_array+0x50>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a03      	ldr	r2, [pc, #12]	; (80062f8 <riempi_array+0x50>)
 80062ea:	6013      	str	r3, [r2, #0]
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000c24 	.word	0x20000c24
 80062fc:	20000c28 	.word	0x20000c28

08006300 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
	if (fct)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <ai_log_err+0x24>
		printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
				err.type, err.code);
 8006310:	793b      	ldrb	r3, [r7, #4]
		printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006312:	461a      	mov	r2, r3
				err.type, err.code);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f3c3 2317 	ubfx	r3, r3, #8, #24
		printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	4806      	ldr	r0, [pc, #24]	; (8006338 <ai_log_err+0x38>)
 800631e:	f005 f839 	bl	800b394 <iprintf>
 8006322:	e008      	b.n	8006336 <ai_log_err+0x36>
	else
		printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006324:	793b      	ldrb	r3, [r7, #4]
 8006326:	4619      	mov	r1, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800632e:	461a      	mov	r2, r3
 8006330:	4802      	ldr	r0, [pc, #8]	; (800633c <ai_log_err+0x3c>)
 8006332:	f005 f82f 	bl	800b394 <iprintf>

	do {} while (1);
 8006336:	e7fe      	b.n	8006336 <ai_log_err+0x36>
 8006338:	0800db28 	.word	0x0800db28
 800633c:	0800db5c 	.word	0x0800db5c

08006340 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b090      	sub	sp, #64	; 0x40
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800634a:	2100      	movs	r1, #0
 800634c:	4838      	ldr	r0, [pc, #224]	; (8006430 <ai_boostrap+0xf0>)
 800634e:	f000 fb95 	bl	8006a7c <ai_network_create>
 8006352:	4603      	mov	r3, r0
 8006354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8006356:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <ai_boostrap+0x2c>
    ai_log_err(err, "ai_network_create");
 800635e:	4935      	ldr	r1, [pc, #212]	; (8006434 <ai_boostrap+0xf4>)
 8006360:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006362:	f7ff ffcd 	bl	8006300 <ai_log_err>
    return -1;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e05c      	b.n	8006426 <ai_boostrap+0xe6>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 800636c:	4b32      	ldr	r3, [pc, #200]	; (8006438 <ai_boostrap+0xf8>)
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	2301      	movs	r3, #1
 8006372:	823b      	strh	r3, [r7, #16]
 8006374:	2301      	movs	r3, #1
 8006376:	827b      	strh	r3, [r7, #18]
 8006378:	2301      	movs	r3, #1
 800637a:	82bb      	strh	r3, [r7, #20]
 800637c:	f647 63d0 	movw	r3, #32464	; 0x7ed0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	2300      	movs	r3, #0
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	4b2c      	ldr	r3, [pc, #176]	; (800643c <ai_boostrap+0xfc>)
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
 800638e:	2301      	movs	r3, #1
 8006390:	853b      	strh	r3, [r7, #40]	; 0x28
 8006392:	2301      	movs	r3, #1
 8006394:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006396:	2301      	movs	r3, #1
 8006398:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800639a:	f249 63c0 	movw	r3, #38592	; 0x96c0
 800639e:	633b      	str	r3, [r7, #48]	; 0x30
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
 80063a4:	2300      	movs	r3, #0
 80063a6:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 80063a8:	4b21      	ldr	r3, [pc, #132]	; (8006430 <ai_boostrap+0xf0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f107 020c 	add.w	r2, r7, #12
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fb84 	bl	8006ac0 <ai_network_init>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f083 0301 	eor.w	r3, r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00d      	beq.n	80063e0 <ai_boostrap+0xa0>
      err = ai_network_get_error(network);
 80063c4:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <ai_boostrap+0xf0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fb4b 	bl	8006a64 <ai_network_get_error>
 80063ce:	4603      	mov	r3, r0
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_network_init");
 80063d2:	491b      	ldr	r1, [pc, #108]	; (8006440 <ai_boostrap+0x100>)
 80063d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063d6:	f7ff ff93 	bl	8006300 <ai_log_err>
      return -1;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	e022      	b.n	8006426 <ai_boostrap+0xe6>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <ai_boostrap+0xf0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4917      	ldr	r1, [pc, #92]	; (8006444 <ai_boostrap+0x104>)
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fade 	bl	80069a8 <ai_network_get_info>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f083 0301 	eor.w	r3, r3, #1
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <ai_boostrap+0xe4>
    err = ai_network_get_error(network);
 80063f8:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <ai_boostrap+0xf0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fb31 	bl	8006a64 <ai_network_get_error>
 8006402:	4603      	mov	r3, r0
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_network_get_error");
 8006406:	4910      	ldr	r1, [pc, #64]	; (8006448 <ai_boostrap+0x108>)
 8006408:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800640a:	f7ff ff79 	bl	8006300 <ai_log_err>
    ai_network_destroy(network);
 800640e:	4b08      	ldr	r3, [pc, #32]	; (8006430 <ai_boostrap+0xf0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb48 	bl	8006aa8 <ai_network_destroy>
    network = AI_HANDLE_NULL;
 8006418:	4b05      	ldr	r3, [pc, #20]	; (8006430 <ai_boostrap+0xf0>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
    return -3;
 800641e:	f06f 0302 	mvn.w	r3, #2
 8006422:	e000      	b.n	8006426 <ai_boostrap+0xe6>
  }

  return 0;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3740      	adds	r7, #64	; 0x40
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000c60 	.word	0x20000c60
 8006434:	0800db8c 	.word	0x0800db8c
 8006438:	40040440 	.word	0x40040440
 800643c:	00040440 	.word	0x00040440
 8006440:	0800dba0 	.word	0x0800dba0
 8006444:	20000c64 	.word	0x20000c64
 8006448:	0800dbb0 	.word	0x0800dbb0

0800644c <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <ai_run+0x5c>)
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	617b      	str	r3, [r7, #20]
  ai_buffer *ai_output = network_info.outputs;
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <ai_run+0x5c>)
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	613b      	str	r3, [r7, #16]

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	611a      	str	r2, [r3, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	611a      	str	r2, [r3, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <ai_run+0x60>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fb61 	bl	8006b3e <ai_network_run>
 800647c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d00c      	beq.n	800649e <ai_run+0x52>
    ai_log_err(ai_network_get_error(network),
 8006484:	4b09      	ldr	r3, [pc, #36]	; (80064ac <ai_run+0x60>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 faeb 	bl	8006a64 <ai_network_get_error>
 800648e:	4603      	mov	r3, r0
 8006490:	4907      	ldr	r1, [pc, #28]	; (80064b0 <ai_run+0x64>)
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff ff34 	bl	8006300 <ai_log_err>
        "ai_network_run");
    return -1;
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	e000      	b.n	80064a0 <ai_run+0x54>
  }

  return 0;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000c64 	.word	0x20000c64
 80064ac:	20000c60 	.word	0x20000c60
 80064b0:	0800dbc8 	.word	0x0800dbc8

080064b4 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
//definizone della funzione di preprocessing
int acquire_and_process_data(void * data)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	ai_handle *in_data=AI_HANDLE_PTR(data);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<120; i++){
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e00c      	b.n	80064e0 <acquire_and_process_data+0x2c>
		((ai_float *)in_data)[i]= values1[i];
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	4909      	ldr	r1, [pc, #36]	; (80064f4 <acquire_and_process_data+0x40>)
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	440a      	add	r2, r1
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	601a      	str	r2, [r3, #0]
	for(int i=0; i<120; i++){
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b77      	cmp	r3, #119	; 0x77
 80064e4:	ddef      	ble.n	80064c6 <acquire_and_process_data+0x12>
	}
	return 0;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	200009e4 	.word	0x200009e4

080064f8 <post_process>:

//definizione della funzione di postprocessing
int post_process(void * out_data, void * in_data)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b090      	sub	sp, #64	; 0x40
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	float f[4];

	char a[] = { ((char *)out_data)[0], ((char *)out_data)[1], ((char *)out_data)[2], ((char *)out_data)[3] };
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	763b      	strb	r3, [r7, #24]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	767b      	strb	r3, [r7, #25]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	76bb      	strb	r3, [r7, #26]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	78db      	ldrb	r3, [r3, #3]
 8006518:	76fb      	strb	r3, [r7, #27]
	char b[] = { ((char *)out_data)[4], ((char *)out_data)[5], ((char *)out_data)[6], ((char *)out_data)[7] };
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	791b      	ldrb	r3, [r3, #4]
 800651e:	753b      	strb	r3, [r7, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	795b      	ldrb	r3, [r3, #5]
 8006524:	757b      	strb	r3, [r7, #21]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	799b      	ldrb	r3, [r3, #6]
 800652a:	75bb      	strb	r3, [r7, #22]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	79db      	ldrb	r3, [r3, #7]
 8006530:	75fb      	strb	r3, [r7, #23]
	char c[] = { ((char *)out_data)[8], ((char *)out_data)[9], ((char *)out_data)[10], ((char *)out_data)[11] };
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7a1b      	ldrb	r3, [r3, #8]
 8006536:	743b      	strb	r3, [r7, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7a5b      	ldrb	r3, [r3, #9]
 800653c:	747b      	strb	r3, [r7, #17]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	7a9b      	ldrb	r3, [r3, #10]
 8006542:	74bb      	strb	r3, [r7, #18]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7adb      	ldrb	r3, [r3, #11]
 8006548:	74fb      	strb	r3, [r7, #19]
	char d[]= { ((char *)out_data)[12], ((char *)out_data)[13], ((char *)out_data)[14], ((char *)out_data)[15] };
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	7b1b      	ldrb	r3, [r3, #12]
 800654e:	733b      	strb	r3, [r7, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7b5b      	ldrb	r3, [r3, #13]
 8006554:	737b      	strb	r3, [r7, #13]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7b9b      	ldrb	r3, [r3, #14]
 800655a:	73bb      	strb	r3, [r7, #14]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7bdb      	ldrb	r3, [r3, #15]
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	69bb      	ldr	r3, [r7, #24]
	memcpy(&f[0], &a, sizeof(f[0]));
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	697b      	ldr	r3, [r7, #20]
	memcpy(&f[1], &b, sizeof(f[1]));
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	693b      	ldr	r3, [r7, #16]
	memcpy(&f[2], &c, sizeof(f[2]));
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
 800656e:	68fb      	ldr	r3, [r7, #12]
	memcpy(&f[3], &d, sizeof(f[3]));
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28

	int m=0;
 8006572:	2300      	movs	r3, #0
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
	float media=0;
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int sum=0;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
	int cont=0;
 8006580:	2300      	movs	r3, #0
 8006582:	63bb      	str	r3, [r7, #56]	; 0x38
	v=max(f, sizeof(f));
 8006584:	f107 031c 	add.w	r3, r7, #28
 8006588:	2110      	movs	r1, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fe5d 	bl	800624a <max>
 8006590:	4603      	mov	r3, r0
 8006592:	4a59      	ldr	r2, [pc, #356]	; (80066f8 <post_process+0x200>)
 8006594:	6013      	str	r3, [r2, #0]
	riempi_array(v);
 8006596:	4b58      	ldr	r3, [pc, #352]	; (80066f8 <post_process+0x200>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fe84 	bl	80062a8 <riempi_array>
	if(k==1){
 80065a0:	4b56      	ldr	r3, [pc, #344]	; (80066fc <post_process+0x204>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	f040 80a0 	bne.w	80066ea <post_process+0x1f2>
		for(int h=0; h<1; h++){
 80065aa:	2300      	movs	r3, #0
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34
 80065ae:	e012      	b.n	80065d6 <post_process+0xde>
			if(val[h]!=0){
 80065b0:	4a53      	ldr	r2, [pc, #332]	; (8006700 <post_process+0x208>)
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <post_process+0xd8>
				sum=sum+val[h];
 80065bc:	4a50      	ldr	r2, [pc, #320]	; (8006700 <post_process+0x208>)
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065c6:	4413      	add	r3, r2
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
				cont++;
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	3301      	adds	r3, #1
 80065ce:	63bb      	str	r3, [r7, #56]	; 0x38
		for(int h=0; h<1; h++){
 80065d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d2:	3301      	adds	r3, #1
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dde9      	ble.n	80065b0 <post_process+0xb8>
			}
		}
		media=(float)sum/cont;
 80065dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		m=roundf(media);
 80065f8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80065fc:	f007 f8d8 	bl	800d7b0 <roundf>
 8006600:	eef0 7a40 	vmov.f32	s15, s0
 8006604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006608:	ee17 3a90 	vmov	r3, s15
 800660c:	633b      	str	r3, [r7, #48]	; 0x30
		if(m==0){
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	2b00      	cmp	r3, #0
 8006612:	d115      	bne.n	8006640 <post_process+0x148>
			sprintf(buffertx, "Veicolo fermo\n\r");
 8006614:	493b      	ldr	r1, [pc, #236]	; (8006704 <post_process+0x20c>)
 8006616:	483c      	ldr	r0, [pc, #240]	; (8006708 <post_process+0x210>)
 8006618:	f004 ff5a 	bl	800b4d0 <siprintf>
			HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, 0);
 800661c:	2200      	movs	r2, #0
 800661e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006626:	f7fc fb77 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, 0);
 800662a:	2200      	movs	r2, #0
 800662c:	2104      	movs	r1, #4
 800662e:	4837      	ldr	r0, [pc, #220]	; (800670c <post_process+0x214>)
 8006630:	f7fc fb72 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, 0);
 8006634:	2200      	movs	r2, #0
 8006636:	2104      	movs	r1, #4
 8006638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800663c:	f7fc fb6c 	bl	8002d18 <HAL_GPIO_WritePin>
		}
		if(m==1){
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b01      	cmp	r3, #1
 8006644:	d115      	bne.n	8006672 <post_process+0x17a>
			sprintf(buffertx, "Guida sicura\n\r");
 8006646:	4932      	ldr	r1, [pc, #200]	; (8006710 <post_process+0x218>)
 8006648:	482f      	ldr	r0, [pc, #188]	; (8006708 <post_process+0x210>)
 800664a:	f004 ff41 	bl	800b4d0 <siprintf>
			HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, 0);
 800664e:	2200      	movs	r2, #0
 8006650:	2104      	movs	r1, #4
 8006652:	482e      	ldr	r0, [pc, #184]	; (800670c <post_process+0x214>)
 8006654:	f7fc fb60 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, 1);
 8006658:	2201      	movs	r2, #1
 800665a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800665e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006662:	f7fc fb59 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, 0);
 8006666:	2200      	movs	r2, #0
 8006668:	2104      	movs	r1, #4
 800666a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800666e:	f7fc fb53 	bl	8002d18 <HAL_GPIO_WritePin>
		}
		if(m==2){
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	2b02      	cmp	r3, #2
 8006676:	d115      	bne.n	80066a4 <post_process+0x1ac>
			sprintf(buffertx, "Guida normale\n\r");
 8006678:	4926      	ldr	r1, [pc, #152]	; (8006714 <post_process+0x21c>)
 800667a:	4823      	ldr	r0, [pc, #140]	; (8006708 <post_process+0x210>)
 800667c:	f004 ff28 	bl	800b4d0 <siprintf>
			HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, 1);
 8006680:	2201      	movs	r2, #1
 8006682:	2104      	movs	r1, #4
 8006684:	4821      	ldr	r0, [pc, #132]	; (800670c <post_process+0x214>)
 8006686:	f7fc fb47 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, 0);
 800668a:	2200      	movs	r2, #0
 800668c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006694:	f7fc fb40 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, 0);
 8006698:	2200      	movs	r2, #0
 800669a:	2104      	movs	r1, #4
 800669c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066a0:	f7fc fb3a 	bl	8002d18 <HAL_GPIO_WritePin>
		}
		if(m==3){
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d115      	bne.n	80066d6 <post_process+0x1de>
			sprintf(buffertx, "Guida non adeguata\n\r");
 80066aa:	491b      	ldr	r1, [pc, #108]	; (8006718 <post_process+0x220>)
 80066ac:	4816      	ldr	r0, [pc, #88]	; (8006708 <post_process+0x210>)
 80066ae:	f004 ff0f 	bl	800b4d0 <siprintf>
			HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, 0);
 80066b2:	2200      	movs	r2, #0
 80066b4:	2104      	movs	r1, #4
 80066b6:	4815      	ldr	r0, [pc, #84]	; (800670c <post_process+0x214>)
 80066b8:	f7fc fb2e 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, 0);
 80066bc:	2200      	movs	r2, #0
 80066be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066c6:	f7fc fb27 	bl	8002d18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, 1);
 80066ca:	2201      	movs	r2, #1
 80066cc:	2104      	movs	r1, #4
 80066ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066d2:	f7fc fb21 	bl	8002d18 <HAL_GPIO_WritePin>
		}
		HAL_UART_Transmit(&huart1, buffertx, strlen(buffertx), 100);
 80066d6:	480c      	ldr	r0, [pc, #48]	; (8006708 <post_process+0x210>)
 80066d8:	f7f9 fd7a 	bl	80001d0 <strlen>
 80066dc:	4603      	mov	r3, r0
 80066de:	b29a      	uxth	r2, r3
 80066e0:	2364      	movs	r3, #100	; 0x64
 80066e2:	4909      	ldr	r1, [pc, #36]	; (8006708 <post_process+0x210>)
 80066e4:	480d      	ldr	r0, [pc, #52]	; (800671c <post_process+0x224>)
 80066e6:	f7ff f8fb 	bl	80058e0 <HAL_UART_Transmit>


	}
	return -1;
 80066ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3740      	adds	r7, #64	; 0x40
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000c20 	.word	0x20000c20
 80066fc:	20000c24 	.word	0x20000c24
 8006700:	20000c28 	.word	0x20000c28
 8006704:	0800dbd8 	.word	0x0800dbd8
 8006708:	20000c2c 	.word	0x20000c2c
 800670c:	48000400 	.word	0x48000400
 8006710:	0800dbe8 	.word	0x0800dbe8
 8006714:	0800dbf8 	.word	0x0800dbf8
 8006718:	0800dc08 	.word	0x0800dc08
 800671c:	20000944 	.word	0x20000944

08006720 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
	printf("\r\nTEMPLATE - initialization\r\n");
 8006724:	4805      	ldr	r0, [pc, #20]	; (800673c <MX_X_CUBE_AI_Init+0x1c>)
 8006726:	f004 febb 	bl	800b4a0 <puts>

	ai_boostrap(ai_network_data_weights_get(), activations);
 800672a:	f000 fa19 	bl	8006b60 <ai_network_data_weights_get>
 800672e:	4603      	mov	r3, r0
 8006730:	4903      	ldr	r1, [pc, #12]	; (8006740 <MX_X_CUBE_AI_Init+0x20>)
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fe04 	bl	8006340 <ai_boostrap>
    /* USER CODE END 5 */
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	0800dc20 	.word	0x0800dc20
 8006740:	20000cd8 	.word	0x20000cd8

08006744 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */


	int res = -1;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	617b      	str	r3, [r7, #20]
	ai_u8 *in_data = NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
	ai_u8 *out_data = NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]


	printf("TEMPLATE - run - main loop\r\n");
 8006758:	4828      	ldr	r0, [pc, #160]	; (80067fc <MX_X_CUBE_AI_Process+0xb8>)
 800675a:	f004 fea1 	bl	800b4a0 <puts>

	if (network) {
 800675e:	4b28      	ldr	r3, [pc, #160]	; (8006800 <MX_X_CUBE_AI_Process+0xbc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d038      	beq.n	80067d8 <MX_X_CUBE_AI_Process+0x94>

		if ((network_info.n_inputs != 1) || (network_info.n_outputs != 1)) {
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <MX_X_CUBE_AI_Process+0xc0>)
 8006768:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800676a:	2b01      	cmp	r3, #1
 800676c:	d103      	bne.n	8006776 <MX_X_CUBE_AI_Process+0x32>
 800676e:	4b25      	ldr	r3, [pc, #148]	; (8006804 <MX_X_CUBE_AI_Process+0xc0>)
 8006770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006772:	2b01      	cmp	r3, #1
 8006774:	d00b      	beq.n	800678e <MX_X_CUBE_AI_Process+0x4a>
			ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 8006776:	2314      	movs	r3, #20
 8006778:	723b      	strb	r3, [r7, #8]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2220      	movs	r2, #32
 800677e:	f362 231f 	bfi	r3, r2, #8, #24
 8006782:	60bb      	str	r3, [r7, #8]
			ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 8006784:	4920      	ldr	r1, [pc, #128]	; (8006808 <MX_X_CUBE_AI_Process+0xc4>)
 8006786:	68b8      	ldr	r0, [r7, #8]
 8006788:	f7ff fdba 	bl	8006300 <ai_log_err>
 800678c:	e032      	b.n	80067f4 <MX_X_CUBE_AI_Process+0xb0>
		/* 1 - Set the I/O data buffer */

#if AI_NETWORK_INPUTS_IN_ACTIVATIONS
		in_data = network_info.inputs[0].data;
#else
		in_data = in_data_s;
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <MX_X_CUBE_AI_Process+0xc8>)
 8006790:	613b      	str	r3, [r7, #16]
#endif

#if AI_NETWORK_OUTPUTS_IN_ACTIVATIONS
		out_data = network_info.outputs[0].data;
#else
		out_data = out_data_s;
 8006792:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <MX_X_CUBE_AI_Process+0xcc>)
 8006794:	60fb      	str	r3, [r7, #12]
#endif

		if ((!in_data) || (!out_data)) {
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <MX_X_CUBE_AI_Process+0x5e>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <MX_X_CUBE_AI_Process+0x66>
			printf("TEMPLATE - I/O buffers are invalid\r\n");
 80067a2:	481c      	ldr	r0, [pc, #112]	; (8006814 <MX_X_CUBE_AI_Process+0xd0>)
 80067a4:	f004 fe7c 	bl	800b4a0 <puts>
			return;
 80067a8:	e024      	b.n	80067f4 <MX_X_CUBE_AI_Process+0xb0>
		}

		/* 2 - main loop */
		do {
			/* 1 - acquire and pre-process input data */
			res = acquire_and_process_data(in_data);
 80067aa:	6938      	ldr	r0, [r7, #16]
 80067ac:	f7ff fe82 	bl	80064b4 <acquire_and_process_data>
 80067b0:	6178      	str	r0, [r7, #20]
			/* 2 - process the data - call inference engine */

			if (res == 0){
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <MX_X_CUBE_AI_Process+0x7e>
				//				__HAL_TIM_SET_COUNTER(&htim3, 0);
				//				sprintf(buffertx1, "Start\n\r");
				//				HAL_UART_Transmit(&huart1, buffertx1, sizeof(buffertx1), 1000);
				//				HAL_GPIO_TogglePin(ARD_D8_GPIO_Port, ARD_D8_Pin);
				res = ai_run(in_data, out_data);
 80067b8:	68f9      	ldr	r1, [r7, #12]
 80067ba:	6938      	ldr	r0, [r7, #16]
 80067bc:	f7ff fe46 	bl	800644c <ai_run>
 80067c0:	6178      	str	r0, [r7, #20]
				//				float M=time*0.1;
				//				sprintf(buffertx1, "Time value: %f ms\n\r", M);
				//				HAL_UART_Transmit(&huart1, buffertx1, sizeof(buffertx1), 1000);
			}
			/* 3- post-process the predictions */
			if (res == 0)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <MX_X_CUBE_AI_Process+0x8e>
				res = post_process(out_data, in_data);
 80067c8:	6939      	ldr	r1, [r7, #16]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fe94 	bl	80064f8 <post_process>
 80067d0:	6178      	str	r0, [r7, #20]

		} while (res==0);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0e8      	beq.n	80067aa <MX_X_CUBE_AI_Process+0x66>
	}

	if (res==1) {
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d10a      	bne.n	80067f4 <MX_X_CUBE_AI_Process+0xb0>
		ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80067de:	2311      	movs	r3, #17
 80067e0:	713b      	strb	r3, [r7, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2210      	movs	r2, #16
 80067e6:	f362 231f 	bfi	r3, r2, #8, #24
 80067ea:	607b      	str	r3, [r7, #4]
		ai_log_err(err, "Process has FAILED");
 80067ec:	490a      	ldr	r1, [pc, #40]	; (8006818 <MX_X_CUBE_AI_Process+0xd4>)
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff fd86 	bl	8006300 <ai_log_err>
	}
    /* USER CODE END 6 */
}
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	0800dc40 	.word	0x0800dc40
 8006800:	20000c60 	.word	0x20000c60
 8006804:	20000c64 	.word	0x20000c64
 8006808:	0800dc5c 	.word	0x0800dc5c
 800680c:	2000a398 	.word	0x2000a398
 8006810:	2000a578 	.word	0x2000a578
 8006814:	0800dca4 	.word	0x0800dca4
 8006818:	0800dcc8 	.word	0x0800dcc8

0800681c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	3303      	adds	r3, #3
 800682c:	f023 0303 	bic.w	r3, r3, #3
 8006830:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_10_output_array.data = AI_PTR(NULL);
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <network_configure_activations+0x7c>)
 8006834:	2200      	movs	r2, #0
 8006836:	609a      	str	r2, [r3, #8]
    input_10_output_array.data_start = AI_PTR(NULL);
 8006838:	4b17      	ldr	r3, [pc, #92]	; (8006898 <network_configure_activations+0x7c>)
 800683a:	2200      	movs	r2, #0
 800683c:	60da      	str	r2, [r3, #12]
    conv1d_14_output_array.data = AI_PTR(activations + 0);
 800683e:	4a17      	ldr	r2, [pc, #92]	; (800689c <network_configure_activations+0x80>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6093      	str	r3, [r2, #8]
    conv1d_14_output_array.data_start = AI_PTR(activations + 0);
 8006844:	4a15      	ldr	r2, [pc, #84]	; (800689c <network_configure_activations+0x80>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	60d3      	str	r3, [r2, #12]
    conv1d_15_output_array.data = AI_PTR(activations + 38400);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <network_configure_activations+0x84>)
 8006852:	6093      	str	r3, [r2, #8]
    conv1d_15_output_array.data_start = AI_PTR(activations + 38400);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 800685a:	4a11      	ldr	r2, [pc, #68]	; (80068a0 <network_configure_activations+0x84>)
 800685c:	60d3      	str	r3, [r2, #12]
    dense_9_output_array.data = AI_PTR(activations + 0);
 800685e:	4a11      	ldr	r2, [pc, #68]	; (80068a4 <network_configure_activations+0x88>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6093      	str	r3, [r2, #8]
    dense_9_output_array.data_start = AI_PTR(activations + 0);
 8006864:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <network_configure_activations+0x88>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	60d3      	str	r3, [r2, #12]
    dense_9_nl_output_array.data = AI_PTR(NULL);
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <network_configure_activations+0x8c>)
 800686c:	2200      	movs	r2, #0
 800686e:	609a      	str	r2, [r3, #8]
    dense_9_nl_output_array.data_start = AI_PTR(NULL);
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <network_configure_activations+0x8c>)
 8006872:	2200      	movs	r2, #0
 8006874:	60da      	str	r2, [r3, #12]
    conv1d_15_scratch0_array.data = AI_PTR(activations + 15360);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800687c:	4a0b      	ldr	r2, [pc, #44]	; (80068ac <network_configure_activations+0x90>)
 800687e:	6093      	str	r3, [r2, #8]
    conv1d_15_scratch0_array.data_start = AI_PTR(activations + 15360);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <network_configure_activations+0x90>)
 8006888:	60d3      	str	r3, [r2, #12]
    
  }
  return true;
 800688a:	2301      	movs	r3, #1
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	200000d8 	.word	0x200000d8
 800689c:	200000e8 	.word	0x200000e8
 80068a0:	200000f8 	.word	0x200000f8
 80068a4:	20000108 	.word	0x20000108
 80068a8:	20000118 	.word	0x20000118
 80068ac:	20000188 	.word	0x20000188

080068b0 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    conv1d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 80068c0:	4b33      	ldr	r3, [pc, #204]	; (8006990 <network_configure_weights+0xe0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c8:	4a31      	ldr	r2, [pc, #196]	; (8006990 <network_configure_weights+0xe0>)
 80068ca:	6013      	str	r3, [r2, #0]
    conv1d_14_weights_array.data = AI_PTR(weights + 0);
 80068cc:	4a30      	ldr	r2, [pc, #192]	; (8006990 <network_configure_weights+0xe0>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6093      	str	r3, [r2, #8]
    conv1d_14_weights_array.data_start = AI_PTR(weights + 0);
 80068d2:	4a2f      	ldr	r2, [pc, #188]	; (8006990 <network_configure_weights+0xe0>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	60d3      	str	r3, [r2, #12]
    conv1d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 80068d8:	4b2e      	ldr	r3, [pc, #184]	; (8006994 <network_configure_weights+0xe4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e0:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <network_configure_weights+0xe4>)
 80068e2:	6013      	str	r3, [r2, #0]
    conv1d_14_bias_array.data = AI_PTR(weights + 640);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068ea:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <network_configure_weights+0xe4>)
 80068ec:	6093      	str	r3, [r2, #8]
    conv1d_14_bias_array.data_start = AI_PTR(weights + 640);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068f4:	4a27      	ldr	r2, [pc, #156]	; (8006994 <network_configure_weights+0xe4>)
 80068f6:	60d3      	str	r3, [r2, #12]
    conv1d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80068f8:	4b27      	ldr	r3, [pc, #156]	; (8006998 <network_configure_weights+0xe8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006900:	4a25      	ldr	r2, [pc, #148]	; (8006998 <network_configure_weights+0xe8>)
 8006902:	6013      	str	r3, [r2, #0]
    conv1d_15_weights_array.data = AI_PTR(weights + 768);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800690a:	4a23      	ldr	r2, [pc, #140]	; (8006998 <network_configure_weights+0xe8>)
 800690c:	6093      	str	r3, [r2, #8]
    conv1d_15_weights_array.data_start = AI_PTR(weights + 768);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006914:	4a20      	ldr	r2, [pc, #128]	; (8006998 <network_configure_weights+0xe8>)
 8006916:	60d3      	str	r3, [r2, #12]
    conv1d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8006918:	4b20      	ldr	r3, [pc, #128]	; (800699c <network_configure_weights+0xec>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <network_configure_weights+0xec>)
 8006922:	6013      	str	r3, [r2, #0]
    conv1d_15_bias_array.data = AI_PTR(weights + 31488);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 43f6 	add.w	r3, r3, #31488	; 0x7b00
 800692a:	4a1c      	ldr	r2, [pc, #112]	; (800699c <network_configure_weights+0xec>)
 800692c:	6093      	str	r3, [r2, #8]
    conv1d_15_bias_array.data_start = AI_PTR(weights + 31488);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f503 43f6 	add.w	r3, r3, #31488	; 0x7b00
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <network_configure_weights+0xec>)
 8006936:	60d3      	str	r3, [r2, #12]
    dense_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8006938:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <network_configure_weights+0xf0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006940:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <network_configure_weights+0xf0>)
 8006942:	6013      	str	r3, [r2, #0]
    dense_9_weights_array.data = AI_PTR(weights + 31680);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 800694a:	3340      	adds	r3, #64	; 0x40
 800694c:	4a14      	ldr	r2, [pc, #80]	; (80069a0 <network_configure_weights+0xf0>)
 800694e:	6093      	str	r3, [r2, #8]
    dense_9_weights_array.data_start = AI_PTR(weights + 31680);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 43f7 	add.w	r3, r3, #31616	; 0x7b80
 8006956:	3340      	adds	r3, #64	; 0x40
 8006958:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <network_configure_weights+0xf0>)
 800695a:	60d3      	str	r3, [r2, #12]
    dense_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <network_configure_weights+0xf4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006964:	4a0f      	ldr	r2, [pc, #60]	; (80069a4 <network_configure_weights+0xf4>)
 8006966:	6013      	str	r3, [r2, #0]
    dense_9_bias_array.data = AI_PTR(weights + 32448);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 43fd 	add.w	r3, r3, #32384	; 0x7e80
 800696e:	3340      	adds	r3, #64	; 0x40
 8006970:	4a0c      	ldr	r2, [pc, #48]	; (80069a4 <network_configure_weights+0xf4>)
 8006972:	6093      	str	r3, [r2, #8]
    dense_9_bias_array.data_start = AI_PTR(weights + 32448);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 43fd 	add.w	r3, r3, #32384	; 0x7e80
 800697a:	3340      	adds	r3, #64	; 0x40
 800697c:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <network_configure_weights+0xf4>)
 800697e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8006980:	2301      	movs	r3, #1
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000128 	.word	0x20000128
 8006994:	20000138 	.word	0x20000138
 8006998:	20000148 	.word	0x20000148
 800699c:	20000158 	.word	0x20000158
 80069a0:	20000168 	.word	0x20000168
 80069a4:	20000178 	.word	0x20000178

080069a8 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b0a0      	sub	sp, #128	; 0x80
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9f8 	bl	8006da8 <ai_platform_context_acquire>
 80069b8:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d040      	beq.n	8006a42 <ai_network_get_info+0x9a>
 80069c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d03d      	beq.n	8006a42 <ai_network_get_info+0x9a>
  {
    ai_network_report r = {
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	2274      	movs	r2, #116	; 0x74
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f003 ff8e 	bl	800a8f0 <memset>
 80069d4:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <ai_network_get_info+0xa4>)
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <ai_network_get_info+0xa8>)
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <ai_network_get_info+0xac>)
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <ai_network_get_info+0xb0>)
 80069e2:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80069e4:	f000 f934 	bl	8006c50 <ai_platform_runtime_get_revision>
 80069e8:	4603      	mov	r3, r0
    ai_network_report r = {
 80069ea:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 80069ec:	f000 f952 	bl	8006c94 <ai_platform_runtime_get_version>
 80069f0:	4603      	mov	r3, r0
 80069f2:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 80069f4:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <ai_network_get_info+0xb4>)
 80069f6:	623b      	str	r3, [r7, #32]
 80069f8:	2306      	movs	r3, #6
 80069fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80069fe:	f000 f96b 	bl	8006cd8 <ai_platform_api_get_version>
 8006a02:	4603      	mov	r3, r0
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006a06:	f000 f99b 	bl	8006d40 <ai_platform_interface_api_get_version>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <ai_network_get_info+0xb8>)
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006a12:	f107 0308 	add.w	r3, r7, #8
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fa21 	bl	8006e60 <ai_platform_api_get_network_report>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f083 0301 	eor.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <ai_network_get_info+0x86>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e00a      	b.n	8006a44 <ai_network_get_info+0x9c>

    *report = r;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	2274      	movs	r2, #116	; 0x74
 8006a38:	4619      	mov	r1, r3
 8006a3a:	f003 ff4b 	bl	800a8d4 <memcpy>
    return true;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <ai_network_get_info+0x9c>
  }

  return false;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3780      	adds	r7, #128	; 0x80
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	0800dcdc 	.word	0x0800dcdc
 8006a50:	0800dce4 	.word	0x0800dce4
 8006a54:	0800dd08 	.word	0x0800dd08
 8006a58:	0800dd24 	.word	0x0800dd24
 8006a5c:	0800dd3c 	.word	0x0800dd3c
 8006a60:	000e9850 	.word	0x000e9850

08006a64 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f9c5 	bl	8006dfc <ai_platform_network_get_error>
 8006a72:	4603      	mov	r3, r0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006a86:	2300      	movs	r3, #0
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	2304      	movs	r3, #4
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4a04      	ldr	r2, [pc, #16]	; (8006aa4 <ai_network_create+0x28>)
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fad9 	bl	800704c <ai_platform_network_create>
 8006a9a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000074 	.word	0x20000074

08006aa8 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fb3d 	bl	8007130 <ai_platform_network_destroy>
 8006ab6:	4603      	mov	r3, r0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb61 	bl	8007194 <ai_platform_network_init>
 8006ad2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <ai_network_init+0x1e>
 8006ada:	2300      	movs	r3, #0
 8006adc:	e02b      	b.n	8006b36 <ai_network_init+0x76>

  ai_bool ok = true;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff fee2 	bl	80068b0 <network_configure_weights>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	3318      	adds	r3, #24
 8006b02:	4619      	mov	r1, r3
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff fe89 	bl	800681c <network_configure_activations>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf14      	ite	ne
 8006b16:	2301      	movne	r3, #1
 8006b18:	2300      	moveq	r3, #0
 8006b1a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fbab 	bl	8007278 <ai_platform_network_post_init>
 8006b22:	4603      	mov	r3, r0
 8006b24:	461a      	mov	r2, r3
 8006b26:	7afb      	ldrb	r3, [r7, #11]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fbde 	bl	8007310 <ai_platform_network_process>
 8006b54:	4603      	mov	r3, r0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <ai_network_data_weights_get>:
*/

#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
    0xbe, 0x57, 0xaa, 0xf7, 0xbe, 0xbe, 0xe4, 0x97, 0x3e,
    0x70, 0xd7, 0x13, 0xbf, 0x48, 0xb2, 0xb9, 0x3e, 0xb4,
    0x7e, 0x37, 0xbf, 0x00, 0xd0, 0x98, 0x3e, 0xad, 0x17,
    0xbc, 0x3f, 0x42, 0xcd, 0x61, 0x3d, 0xa9, 0x38, 0x13,
    0x3e, 0x26, 0x2a, 0x4e, 0x3d, 0xd5, 0xff, 0x74, 0xbe  };
  return AI_HANDLE_PTR(s_network_weights);
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <ai_network_data_weights_get+0x10>)
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	0800ddc0 	.word	0x0800ddc0

08006b74 <_ai_platform_get_io_buffers_info>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	2400      	movs	r4, #0
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	4688      	mov	r8, r1
 8006b80:	46a3      	mov	fp, r4
 8006b82:	f04f 0a18 	mov.w	sl, #24
 8006b86:	f04f 0901 	mov.w	r9, #1
 8006b8a:	b2a0      	uxth	r0, r4
 8006b8c:	b936      	cbnz	r6, 8006b9c <_ai_platform_get_io_buffers_info+0x28>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d03b      	beq.n	8006c0a <_ai_platform_get_io_buffers_info+0x96>
 8006b92:	68b3      	ldr	r3, [r6, #8]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f8c8 3000 	str.w	r3, [r8]
 8006b9a:	e036      	b.n	8006c0a <_ai_platform_get_io_buffers_info+0x96>
 8006b9c:	8833      	ldrh	r3, [r6, #0]
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d2f5      	bcs.n	8006b8e <_ai_platform_get_io_buffers_info+0x1a>
 8006ba2:	6873      	ldr	r3, [r6, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f2      	beq.n	8006b8e <_ai_platform_get_io_buffers_info+0x1a>
 8006ba8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	d0ee      	beq.n	8006b8e <_ai_platform_get_io_buffers_info+0x1a>
 8006bb0:	68b3      	ldr	r3, [r6, #8]
 8006bb2:	69aa      	ldr	r2, [r5, #24]
 8006bb4:	6859      	ldr	r1, [r3, #4]
 8006bb6:	6810      	ldr	r0, [r2, #0]
 8006bb8:	689f      	ldr	r7, [r3, #8]
 8006bba:	9101      	str	r1, [sp, #4]
 8006bbc:	f003 fdea 	bl	800a794 <ai_array_to_buffer_fmt>
 8006bc0:	9901      	ldr	r1, [sp, #4]
 8006bc2:	fb0a f304 	mul.w	r3, sl, r4
 8006bc6:	18ca      	adds	r2, r1, r3
 8006bc8:	50c8      	str	r0, [r1, r3]
 8006bca:	f8a2 9004 	strh.w	r9, [r2, #4]
 8006bce:	68eb      	ldr	r3, [r5, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	80d3      	strh	r3, [r2, #6]
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	8113      	strh	r3, [r2, #8]
 8006bda:	68eb      	ldr	r3, [r5, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60d3      	str	r3, [r2, #12]
 8006be0:	69ab      	ldr	r3, [r5, #24]
 8006be2:	00e1      	lsls	r1, r4, #3
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	6113      	str	r3, [r2, #16]
 8006be8:	1878      	adds	r0, r7, r1
 8006bea:	b150      	cbz	r0, 8006c02 <_ai_platform_get_io_buffers_info+0x8e>
 8006bec:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	6043      	str	r3, [r0, #4]
 8006bf4:	b11b      	cbz	r3, 8006bfe <_ai_platform_get_io_buffers_info+0x8a>
 8006bf6:	885b      	ldrh	r3, [r3, #2]
 8006bf8:	3300      	adds	r3, #0
 8006bfa:	bf18      	it	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	507b      	str	r3, [r7, r1]
 8006c00:	b903      	cbnz	r3, 8006c04 <_ai_platform_get_io_buffers_info+0x90>
 8006c02:	2000      	movs	r0, #0
 8006c04:	6150      	str	r0, [r2, #20]
 8006c06:	3401      	adds	r4, #1
 8006c08:	e7bf      	b.n	8006b8a <_ai_platform_get_io_buffers_info+0x16>
 8006c0a:	b003      	add	sp, #12
 8006c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c10 <_platform_network_state_setup.isra.1>:
 8006c10:	b430      	push	{r4, r5}
 8006c12:	68dd      	ldr	r5, [r3, #12]
 8006c14:	695c      	ldr	r4, [r3, #20]
 8006c16:	68ed      	ldr	r5, [r5, #12]
 8006c18:	68e4      	ldr	r4, [r4, #12]
 8006c1a:	fb04 f405 	mul.w	r4, r4, r5
 8006c1e:	6084      	str	r4, [r0, #8]
 8006c20:	8809      	ldrh	r1, [r1, #0]
 8006c22:	fb04 f401 	mul.w	r4, r4, r1
 8006c26:	60c4      	str	r4, [r0, #12]
 8006c28:	6811      	ldr	r1, [r2, #0]
 8006c2a:	6041      	str	r1, [r0, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	4414      	add	r4, r2
 8006c30:	6004      	str	r4, [r0, #0]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	6814      	ldr	r4, [r2, #0]
 8006c36:	00a4      	lsls	r4, r4, #2
 8006c38:	d407      	bmi.n	8006c4a <_platform_network_state_setup.isra.1+0x3a>
 8006c3a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8006c3e:	1b64      	subs	r4, r4, r5
 8006c40:	4421      	add	r1, r4
 8006c42:	6091      	str	r1, [r2, #8]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	6842      	ldr	r2, [r0, #4]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	bc30      	pop	{r4, r5}
 8006c4c:	4770      	bx	lr
	...

08006c50 <ai_platform_runtime_get_revision>:
 8006c50:	490a      	ldr	r1, [pc, #40]	; (8006c7c <ai_platform_runtime_get_revision+0x2c>)
 8006c52:	4a0b      	ldr	r2, [pc, #44]	; (8006c80 <ai_platform_runtime_get_revision+0x30>)
 8006c54:	680b      	ldr	r3, [r1, #0]
 8006c56:	2001      	movs	r0, #1
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	600b      	str	r3, [r1, #0]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	d1fc      	bne.n	8006c62 <ai_platform_runtime_get_revision+0x12>
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <ai_platform_runtime_get_revision+0x34>)
 8006c6a:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <ai_platform_runtime_get_revision+0x38>)
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <ai_platform_runtime_get_revision+0x3c>)
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d000      	beq.n	8006c78 <ai_platform_runtime_get_revision+0x28>
 8006c76:	e7fe      	b.n	8006c76 <ai_platform_runtime_get_revision+0x26>
 8006c78:	4805      	ldr	r0, [pc, #20]	; (8006c90 <ai_platform_runtime_get_revision+0x40>)
 8006c7a:	4770      	bx	lr
 8006c7c:	e0002000 	.word	0xe0002000
 8006c80:	40023008 	.word	0x40023008
 8006c84:	40023000 	.word	0x40023000
 8006c88:	f407a5c2 	.word	0xf407a5c2
 8006c8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c90:	08015c90 	.word	0x08015c90

08006c94 <ai_platform_runtime_get_version>:
 8006c94:	490b      	ldr	r1, [pc, #44]	; (8006cc4 <ai_platform_runtime_get_version+0x30>)
 8006c96:	4a0c      	ldr	r2, [pc, #48]	; (8006cc8 <ai_platform_runtime_get_version+0x34>)
 8006c98:	680b      	ldr	r3, [r1, #0]
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	6010      	str	r0, [r2, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	d1fc      	bne.n	8006ca8 <ai_platform_runtime_get_version+0x14>
 8006cae:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <ai_platform_runtime_get_version+0x38>)
 8006cb0:	4a07      	ldr	r2, [pc, #28]	; (8006cd0 <ai_platform_runtime_get_version+0x3c>)
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <ai_platform_runtime_get_version+0x40>)
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d000      	beq.n	8006cbe <ai_platform_runtime_get_version+0x2a>
 8006cbc:	e7fe      	b.n	8006cbc <ai_platform_runtime_get_version+0x28>
 8006cbe:	2006      	movs	r0, #6
 8006cc0:	b002      	add	sp, #8
 8006cc2:	4770      	bx	lr
 8006cc4:	e0002000 	.word	0xe0002000
 8006cc8:	40023008 	.word	0x40023008
 8006ccc:	40023000 	.word	0x40023000
 8006cd0:	f407a5c2 	.word	0xf407a5c2
 8006cd4:	b5e8b5cd 	.word	0xb5e8b5cd

08006cd8 <ai_platform_api_get_version>:
 8006cd8:	4913      	ldr	r1, [pc, #76]	; (8006d28 <ai_platform_api_get_version+0x50>)
 8006cda:	4a14      	ldr	r2, [pc, #80]	; (8006d2c <ai_platform_api_get_version+0x54>)
 8006cdc:	680b      	ldr	r3, [r1, #0]
 8006cde:	2001      	movs	r0, #1
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	600b      	str	r3, [r1, #0]
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	4613      	mov	r3, r2
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d1fc      	bne.n	8006cec <ai_platform_api_get_version+0x14>
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <ai_platform_api_get_version+0x58>)
 8006cf4:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <ai_platform_api_get_version+0x5c>)
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	; (8006d38 <ai_platform_api_get_version+0x60>)
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d000      	beq.n	8006d02 <ai_platform_api_get_version+0x2a>
 8006d00:	e7fe      	b.n	8006d00 <ai_platform_api_get_version+0x28>
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <ai_platform_api_get_version+0x64>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	f362 0007 	bfi	r0, r2, #0, #8
 8006d0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006d10:	f362 200f 	bfi	r0, r2, #8, #8
 8006d14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006d18:	f362 4017 	bfi	r0, r2, #16, #8
 8006d1c:	0e1b      	lsrs	r3, r3, #24
 8006d1e:	f363 601f 	bfi	r0, r3, #24, #8
 8006d22:	b002      	add	sp, #8
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	e0002000 	.word	0xe0002000
 8006d2c:	40023008 	.word	0x40023008
 8006d30:	40023000 	.word	0x40023000
 8006d34:	f407a5c2 	.word	0xf407a5c2
 8006d38:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d3c:	08015c94 	.word	0x08015c94

08006d40 <ai_platform_interface_api_get_version>:
 8006d40:	4913      	ldr	r1, [pc, #76]	; (8006d90 <ai_platform_interface_api_get_version+0x50>)
 8006d42:	4a14      	ldr	r2, [pc, #80]	; (8006d94 <ai_platform_interface_api_get_version+0x54>)
 8006d44:	680b      	ldr	r3, [r1, #0]
 8006d46:	2001      	movs	r0, #1
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	600b      	str	r3, [r1, #0]
 8006d4e:	b082      	sub	sp, #8
 8006d50:	4613      	mov	r3, r2
 8006d52:	6010      	str	r0, [r2, #0]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1fc      	bne.n	8006d54 <ai_platform_interface_api_get_version+0x14>
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <ai_platform_interface_api_get_version+0x58>)
 8006d5c:	4a0f      	ldr	r2, [pc, #60]	; (8006d9c <ai_platform_interface_api_get_version+0x5c>)
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <ai_platform_interface_api_get_version+0x60>)
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d000      	beq.n	8006d6a <ai_platform_interface_api_get_version+0x2a>
 8006d68:	e7fe      	b.n	8006d68 <ai_platform_interface_api_get_version+0x28>
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <ai_platform_interface_api_get_version+0x64>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	f362 0007 	bfi	r0, r2, #0, #8
 8006d74:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006d78:	f362 200f 	bfi	r0, r2, #8, #8
 8006d7c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006d80:	f362 4017 	bfi	r0, r2, #16, #8
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f363 601f 	bfi	r0, r3, #24, #8
 8006d8a:	b002      	add	sp, #8
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	e0002000 	.word	0xe0002000
 8006d94:	40023008 	.word	0x40023008
 8006d98:	40023000 	.word	0x40023000
 8006d9c:	f407a5c2 	.word	0xf407a5c2
 8006da0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006da4:	08015c98 	.word	0x08015c98

08006da8 <ai_platform_context_acquire>:
 8006da8:	b410      	push	{r4}
 8006daa:	b120      	cbz	r0, 8006db6 <ai_platform_context_acquire+0xe>
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <ai_platform_context_acquire+0x3c>)
 8006dae:	6802      	ldr	r2, [r0, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	bf18      	it	ne
 8006db4:	2000      	movne	r0, #0
 8006db6:	490c      	ldr	r1, [pc, #48]	; (8006de8 <ai_platform_context_acquire+0x40>)
 8006db8:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <ai_platform_context_acquire+0x44>)
 8006dba:	680b      	ldr	r3, [r1, #0]
 8006dbc:	2401      	movs	r4, #1
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	600b      	str	r3, [r1, #0]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	6014      	str	r4, [r2, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	2a00      	cmp	r2, #0
 8006dcc:	d1fc      	bne.n	8006dc8 <ai_platform_context_acquire+0x20>
 8006dce:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <ai_platform_context_acquire+0x48>)
 8006dd0:	4a08      	ldr	r2, [pc, #32]	; (8006df4 <ai_platform_context_acquire+0x4c>)
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <ai_platform_context_acquire+0x50>)
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d000      	beq.n	8006dde <ai_platform_context_acquire+0x36>
 8006ddc:	e7fe      	b.n	8006ddc <ai_platform_context_acquire+0x34>
 8006dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	a1c00100 	.word	0xa1c00100
 8006de8:	e0002000 	.word	0xe0002000
 8006dec:	40023008 	.word	0x40023008
 8006df0:	40023000 	.word	0x40023000
 8006df4:	f407a5c2 	.word	0xf407a5c2
 8006df8:	b5e8b5cd 	.word	0xb5e8b5cd

08006dfc <ai_platform_network_get_error>:
 8006dfc:	b410      	push	{r4}
 8006dfe:	b120      	cbz	r0, 8006e0a <ai_platform_network_get_error+0xe>
 8006e00:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <ai_platform_network_get_error+0x4c>)
 8006e02:	6802      	ldr	r2, [r0, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	bf18      	it	ne
 8006e08:	2000      	movne	r0, #0
 8006e0a:	4910      	ldr	r1, [pc, #64]	; (8006e4c <ai_platform_network_get_error+0x50>)
 8006e0c:	4a10      	ldr	r2, [pc, #64]	; (8006e50 <ai_platform_network_get_error+0x54>)
 8006e0e:	680b      	ldr	r3, [r1, #0]
 8006e10:	2401      	movs	r4, #1
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	600b      	str	r3, [r1, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	6014      	str	r4, [r2, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	d1fc      	bne.n	8006e1c <ai_platform_network_get_error+0x20>
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <ai_platform_network_get_error+0x58>)
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <ai_platform_network_get_error+0x5c>)
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <ai_platform_network_get_error+0x60>)
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d000      	beq.n	8006e32 <ai_platform_network_get_error+0x36>
 8006e30:	e7fe      	b.n	8006e30 <ai_platform_network_get_error+0x34>
 8006e32:	b120      	cbz	r0, 8006e3e <ai_platform_network_get_error+0x42>
 8006e34:	3010      	adds	r0, #16
 8006e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e3a:	f000 bc75 	b.w	8007728 <core_get_error>
 8006e3e:	f241 0010 	movw	r0, #4112	; 0x1010
 8006e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	a1c00100 	.word	0xa1c00100
 8006e4c:	e0002000 	.word	0xe0002000
 8006e50:	40023008 	.word	0x40023008
 8006e54:	40023000 	.word	0x40023000
 8006e58:	f407a5c2 	.word	0xf407a5c2
 8006e5c:	b5e8b5cd 	.word	0xb5e8b5cd

08006e60 <ai_platform_api_get_network_report>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	4605      	mov	r5, r0
 8006e66:	b120      	cbz	r0, 8006e72 <ai_platform_api_get_network_report+0x12>
 8006e68:	4b71      	ldr	r3, [pc, #452]	; (8007030 <ai_platform_api_get_network_report+0x1d0>)
 8006e6a:	6802      	ldr	r2, [r0, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf18      	it	ne
 8006e70:	2500      	movne	r5, #0
 8006e72:	4970      	ldr	r1, [pc, #448]	; (8007034 <ai_platform_api_get_network_report+0x1d4>)
 8006e74:	4a70      	ldr	r2, [pc, #448]	; (8007038 <ai_platform_api_get_network_report+0x1d8>)
 8006e76:	680b      	ldr	r3, [r1, #0]
 8006e78:	2001      	movs	r0, #1
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	600b      	str	r3, [r1, #0]
 8006e80:	4611      	mov	r1, r2
 8006e82:	6010      	str	r0, [r2, #0]
 8006e84:	680b      	ldr	r3, [r1, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1fc      	bne.n	8006e84 <ai_platform_api_get_network_report+0x24>
 8006e8a:	4a6c      	ldr	r2, [pc, #432]	; (800703c <ai_platform_api_get_network_report+0x1dc>)
 8006e8c:	496c      	ldr	r1, [pc, #432]	; (8007040 <ai_platform_api_get_network_report+0x1e0>)
 8006e8e:	6011      	str	r1, [r2, #0]
 8006e90:	6811      	ldr	r1, [r2, #0]
 8006e92:	4a6c      	ldr	r2, [pc, #432]	; (8007044 <ai_platform_api_get_network_report+0x1e4>)
 8006e94:	4291      	cmp	r1, r2
 8006e96:	d000      	beq.n	8006e9a <ai_platform_api_get_network_report+0x3a>
 8006e98:	e7fe      	b.n	8006e98 <ai_platform_api_get_network_report+0x38>
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	d062      	beq.n	8006f64 <ai_platform_api_get_network_report+0x104>
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	d062      	beq.n	8006f68 <ai_platform_api_get_network_report+0x108>
 8006ea2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006ea4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	d056      	beq.n	8006f58 <ai_platform_api_get_network_report+0xf8>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006eae:	6913      	ldr	r3, [r2, #16]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d00c      	beq.n	8006ece <ai_platform_api_get_network_report+0x6e>
 8006eb4:	b15b      	cbz	r3, 8006ece <ai_platform_api_get_network_report+0x6e>
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	e003      	b.n	8006ec2 <ai_platform_api_get_network_report+0x62>
 8006eba:	1c50      	adds	r0, r2, #1
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	b121      	cbz	r1, 8006eca <ai_platform_api_get_network_report+0x6a>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006ec4:	6919      	ldr	r1, [r3, #16]
 8006ec6:	4299      	cmp	r1, r3
 8006ec8:	d1f7      	bne.n	8006eba <ai_platform_api_get_network_report+0x5a>
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	d044      	beq.n	8006f58 <ai_platform_api_get_network_report+0xf8>
 8006ece:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8006ed2:	b100      	cbz	r0, 8006ed6 <ai_platform_api_get_network_report+0x76>
 8006ed4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8006ed6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8006eda:	f7ff fe4b 	bl	8006b74 <_ai_platform_get_io_buffers_info>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	8620      	strh	r0, [r4, #48]	; 0x30
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d05f      	beq.n	8006fa6 <ai_platform_api_get_network_report+0x146>
 8006ee6:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	bf8a      	itet	hi
 8006eee:	6ce8      	ldrhi	r0, [r5, #76]	; 0x4c
 8006ef0:	2000      	movls	r0, #0
 8006ef2:	300c      	addhi	r0, #12
 8006ef4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006ef8:	f7ff fe3c 	bl	8006b74 <_ai_platform_get_io_buffers_info>
 8006efc:	4606      	mov	r6, r0
 8006efe:	8660      	strh	r0, [r4, #50]	; 0x32
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d048      	beq.n	8006f96 <ai_platform_api_get_network_report+0x136>
 8006f04:	686b      	ldr	r3, [r5, #4]
 8006f06:	6723      	str	r3, [r4, #112]	; 0x70
 8006f08:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8006f0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006f0e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8006f12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f14:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006f18:	e886 0003 	stmia.w	r6, {r0, r1}
 8006f1c:	f105 0718 	add.w	r7, r5, #24
 8006f20:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006f22:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8006f26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006f28:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006f2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8006f30:	4a40      	ldr	r2, [pc, #256]	; (8007034 <ai_platform_api_get_network_report+0x1d4>)
 8006f32:	4941      	ldr	r1, [pc, #260]	; (8007038 <ai_platform_api_get_network_report+0x1d8>)
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	2001      	movs	r0, #1
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	460a      	mov	r2, r1
 8006f40:	6008      	str	r0, [r1, #0]
 8006f42:	6813      	ldr	r3, [r2, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1fc      	bne.n	8006f42 <ai_platform_api_get_network_report+0xe2>
 8006f48:	4b3c      	ldr	r3, [pc, #240]	; (800703c <ai_platform_api_get_network_report+0x1dc>)
 8006f4a:	493d      	ldr	r1, [pc, #244]	; (8007040 <ai_platform_api_get_network_report+0x1e0>)
 8006f4c:	6019      	str	r1, [r3, #0]
 8006f4e:	6819      	ldr	r1, [r3, #0]
 8006f50:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <ai_platform_api_get_network_report+0x1e4>)
 8006f52:	4299      	cmp	r1, r3
 8006f54:	d00a      	beq.n	8006f6c <ai_platform_api_get_network_report+0x10c>
 8006f56:	e7fe      	b.n	8006f56 <ai_platform_api_get_network_report+0xf6>
 8006f58:	f105 0010 	add.w	r0, r5, #16
 8006f5c:	2218      	movs	r2, #24
 8006f5e:	2111      	movs	r1, #17
 8006f60:	f000 fbe8 	bl	8007734 <core_set_error>
 8006f64:	2000      	movs	r0, #0
 8006f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f68:	4620      	mov	r0, r4
 8006f6a:	e7fc      	b.n	8006f66 <ai_platform_api_get_network_report+0x106>
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <ai_platform_api_get_network_report+0x1e8>)
 8006f6e:	4831      	ldr	r0, [pc, #196]	; (8007034 <ai_platform_api_get_network_report+0x1d4>)
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	6803      	ldr	r3, [r0, #0]
 8006f74:	4930      	ldr	r1, [pc, #192]	; (8007038 <ai_platform_api_get_network_report+0x1d8>)
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	680b      	ldr	r3, [r1, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1fc      	bne.n	8006f80 <ai_platform_api_get_network_report+0x120>
 8006f86:	4b2d      	ldr	r3, [pc, #180]	; (800703c <ai_platform_api_get_network_report+0x1dc>)
 8006f88:	4a2d      	ldr	r2, [pc, #180]	; (8007040 <ai_platform_api_get_network_report+0x1e0>)
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b2d      	ldr	r3, [pc, #180]	; (8007044 <ai_platform_api_get_network_report+0x1e4>)
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d010      	beq.n	8006fb6 <ai_platform_api_get_network_report+0x156>
 8006f94:	e7fe      	b.n	8006f94 <ai_platform_api_get_network_report+0x134>
 8006f96:	f105 0010 	add.w	r0, r5, #16
 8006f9a:	2218      	movs	r2, #24
 8006f9c:	2113      	movs	r1, #19
 8006f9e:	f000 fbc9 	bl	8007734 <core_set_error>
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	e7df      	b.n	8006f66 <ai_platform_api_get_network_report+0x106>
 8006fa6:	f105 0010 	add.w	r0, r5, #16
 8006faa:	2218      	movs	r2, #24
 8006fac:	2112      	movs	r1, #18
 8006fae:	f000 fbc1 	bl	8007734 <core_set_error>
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	e7d7      	b.n	8006f66 <ai_platform_api_get_network_report+0x106>
 8006fb6:	2306      	movs	r3, #6
 8006fb8:	481e      	ldr	r0, [pc, #120]	; (8007034 <ai_platform_api_get_network_report+0x1d4>)
 8006fba:	6163      	str	r3, [r4, #20]
 8006fbc:	6803      	ldr	r3, [r0, #0]
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <ai_platform_api_get_network_report+0x1d8>)
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	600b      	str	r3, [r1, #0]
 8006fca:	6813      	ldr	r3, [r2, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1fc      	bne.n	8006fca <ai_platform_api_get_network_report+0x16a>
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <ai_platform_api_get_network_report+0x1dc>)
 8006fd2:	491b      	ldr	r1, [pc, #108]	; (8007040 <ai_platform_api_get_network_report+0x1e0>)
 8006fd4:	6019      	str	r1, [r3, #0]
 8006fd6:	6819      	ldr	r1, [r3, #0]
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <ai_platform_api_get_network_report+0x1e4>)
 8006fda:	4299      	cmp	r1, r3
 8006fdc:	d000      	beq.n	8006fe0 <ai_platform_api_get_network_report+0x180>
 8006fde:	e7fe      	b.n	8006fde <ai_platform_api_get_network_report+0x17e>
 8006fe0:	f240 1301 	movw	r3, #257	; 0x101
 8006fe4:	4913      	ldr	r1, [pc, #76]	; (8007034 <ai_platform_api_get_network_report+0x1d4>)
 8006fe6:	6263      	str	r3, [r4, #36]	; 0x24
 8006fe8:	680b      	ldr	r3, [r1, #0]
 8006fea:	4813      	ldr	r0, [pc, #76]	; (8007038 <ai_platform_api_get_network_report+0x1d8>)
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	600b      	str	r3, [r1, #0]
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	6802      	ldr	r2, [r0, #0]
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	d1fc      	bne.n	8006ff6 <ai_platform_api_get_network_report+0x196>
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <ai_platform_api_get_network_report+0x1dc>)
 8006ffe:	4910      	ldr	r1, [pc, #64]	; (8007040 <ai_platform_api_get_network_report+0x1e0>)
 8007000:	6019      	str	r1, [r3, #0]
 8007002:	6819      	ldr	r1, [r3, #0]
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <ai_platform_api_get_network_report+0x1e4>)
 8007006:	4299      	cmp	r1, r3
 8007008:	d000      	beq.n	800700c <ai_platform_api_get_network_report+0x1ac>
 800700a:	e7fe      	b.n	800700a <ai_platform_api_get_network_report+0x1aa>
 800700c:	f240 4301 	movw	r3, #1025	; 0x401
 8007010:	62a3      	str	r3, [r4, #40]	; 0x28
 8007012:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007014:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8007018:	0e19      	lsrs	r1, r3, #24
 800701a:	0c1a      	lsrs	r2, r3, #16
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	f884 1020 	strb.w	r1, [r4, #32]
 8007022:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8007026:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800702a:	2001      	movs	r0, #1
 800702c:	e79b      	b.n	8006f66 <ai_platform_api_get_network_report+0x106>
 800702e:	bf00      	nop
 8007030:	a1c00100 	.word	0xa1c00100
 8007034:	e0002000 	.word	0xe0002000
 8007038:	40023008 	.word	0x40023008
 800703c:	40023000 	.word	0x40023000
 8007040:	f407a5c2 	.word	0xf407a5c2
 8007044:	b5e8b5cd 	.word	0xb5e8b5cd
 8007048:	08015c90 	.word	0x08015c90

0800704c <ai_platform_network_create>:
 800704c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007050:	4f30      	ldr	r7, [pc, #192]	; (8007114 <ai_platform_network_create+0xc8>)
 8007052:	4e31      	ldr	r6, [pc, #196]	; (8007118 <ai_platform_network_create+0xcc>)
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	b083      	sub	sp, #12
 8007058:	f021 0101 	bic.w	r1, r1, #1
 800705c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 8007060:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	2101      	movs	r1, #1
 8007068:	6031      	str	r1, [r6, #0]
 800706a:	6831      	ldr	r1, [r6, #0]
 800706c:	2900      	cmp	r1, #0
 800706e:	d1fc      	bne.n	800706a <ai_platform_network_create+0x1e>
 8007070:	492a      	ldr	r1, [pc, #168]	; (800711c <ai_platform_network_create+0xd0>)
 8007072:	4d2b      	ldr	r5, [pc, #172]	; (8007120 <ai_platform_network_create+0xd4>)
 8007074:	600d      	str	r5, [r1, #0]
 8007076:	680d      	ldr	r5, [r1, #0]
 8007078:	492a      	ldr	r1, [pc, #168]	; (8007124 <ai_platform_network_create+0xd8>)
 800707a:	428d      	cmp	r5, r1
 800707c:	d000      	beq.n	8007080 <ai_platform_network_create+0x34>
 800707e:	e7fe      	b.n	800707e <ai_platform_network_create+0x32>
 8007080:	b1e0      	cbz	r0, 80070bc <ai_platform_network_create+0x70>
 8007082:	4680      	mov	r8, r0
 8007084:	461d      	mov	r5, r3
 8007086:	4b28      	ldr	r3, [pc, #160]	; (8007128 <ai_platform_network_create+0xdc>)
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	f8c8 2000 	str.w	r2, [r8]
 800708e:	4617      	mov	r7, r2
 8007090:	f000 fb48 	bl	8007724 <core_init>
 8007094:	b1b8      	cbz	r0, 80070c6 <ai_platform_network_create+0x7a>
 8007096:	4a1f      	ldr	r2, [pc, #124]	; (8007114 <ai_platform_network_create+0xc8>)
 8007098:	491f      	ldr	r1, [pc, #124]	; (8007118 <ai_platform_network_create+0xcc>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	f023 0301 	bic.w	r3, r3, #1
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	2301      	movs	r3, #1
 80070a4:	6033      	str	r3, [r6, #0]
 80070a6:	680e      	ldr	r6, [r1, #0]
 80070a8:	2e00      	cmp	r6, #0
 80070aa:	d1fc      	bne.n	80070a6 <ai_platform_network_create+0x5a>
 80070ac:	4b1b      	ldr	r3, [pc, #108]	; (800711c <ai_platform_network_create+0xd0>)
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <ai_platform_network_create+0xd4>)
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <ai_platform_network_create+0xd8>)
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d016      	beq.n	80070e8 <ai_platform_network_create+0x9c>
 80070ba:	e7fe      	b.n	80070ba <ai_platform_network_create+0x6e>
 80070bc:	f241 0010 	movw	r0, #4112	; 0x1010
 80070c0:	b003      	add	sp, #12
 80070c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070c6:	062d      	lsls	r5, r5, #24
 80070c8:	0424      	lsls	r4, r4, #16
 80070ca:	2130      	movs	r1, #48	; 0x30
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c8 3000 	str.w	r3, [r8]
 80070d2:	2210      	movs	r2, #16
 80070d4:	ea44 2309 	orr.w	r3, r4, r9, lsl #8
 80070d8:	2000      	movs	r0, #0
 80070da:	432b      	orrs	r3, r5
 80070dc:	f361 0007 	bfi	r0, r1, #0, #8
 80070e0:	663b      	str	r3, [r7, #96]	; 0x60
 80070e2:	f362 201f 	bfi	r0, r2, #8, #24
 80070e6:	e7eb      	b.n	80070c0 <ai_platform_network_create+0x74>
 80070e8:	062d      	lsls	r5, r5, #24
 80070ea:	0424      	lsls	r4, r4, #16
 80070ec:	ea45 0304 	orr.w	r3, r5, r4
 80070f0:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80070f4:	d001      	beq.n	80070fa <ai_platform_network_create+0xae>
 80070f6:	2101      	movs	r1, #1
 80070f8:	e7e8      	b.n	80070cc <ai_platform_network_create+0x80>
 80070fa:	a802      	add	r0, sp, #8
 80070fc:	4b0b      	ldr	r3, [pc, #44]	; (800712c <ai_platform_network_create+0xe0>)
 80070fe:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007102:	f003 fa8b 	bl	800a61c <ai_check_custom_types>
 8007106:	b110      	cbz	r0, 800710e <ai_platform_network_create+0xc2>
 8007108:	4632      	mov	r2, r6
 800710a:	4631      	mov	r1, r6
 800710c:	e7e2      	b.n	80070d4 <ai_platform_network_create+0x88>
 800710e:	2102      	movs	r1, #2
 8007110:	e7dc      	b.n	80070cc <ai_platform_network_create+0x80>
 8007112:	bf00      	nop
 8007114:	e0002000 	.word	0xe0002000
 8007118:	40023008 	.word	0x40023008
 800711c:	40023000 	.word	0x40023000
 8007120:	f407a5c2 	.word	0xf407a5c2
 8007124:	b5e8b5cd 	.word	0xb5e8b5cd
 8007128:	a1c00100 	.word	0xa1c00100
 800712c:	84048403 	.word	0x84048403

08007130 <ai_platform_network_destroy>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	b1d8      	cbz	r0, 800716c <ai_platform_network_destroy+0x3c>
 8007134:	4a11      	ldr	r2, [pc, #68]	; (800717c <ai_platform_network_destroy+0x4c>)
 8007136:	6803      	ldr	r3, [r0, #0]
 8007138:	4293      	cmp	r3, r2
 800713a:	bf0c      	ite	eq
 800713c:	4603      	moveq	r3, r0
 800713e:	2300      	movne	r3, #0
 8007140:	4c0f      	ldr	r4, [pc, #60]	; (8007180 <ai_platform_network_destroy+0x50>)
 8007142:	4910      	ldr	r1, [pc, #64]	; (8007184 <ai_platform_network_destroy+0x54>)
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	2501      	movs	r5, #1
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	460a      	mov	r2, r1
 8007150:	600d      	str	r5, [r1, #0]
 8007152:	6814      	ldr	r4, [r2, #0]
 8007154:	2c00      	cmp	r4, #0
 8007156:	d1fc      	bne.n	8007152 <ai_platform_network_destroy+0x22>
 8007158:	4a0b      	ldr	r2, [pc, #44]	; (8007188 <ai_platform_network_destroy+0x58>)
 800715a:	490c      	ldr	r1, [pc, #48]	; (800718c <ai_platform_network_destroy+0x5c>)
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	6811      	ldr	r1, [r2, #0]
 8007160:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <ai_platform_network_destroy+0x60>)
 8007162:	4291      	cmp	r1, r2
 8007164:	d000      	beq.n	8007168 <ai_platform_network_destroy+0x38>
 8007166:	e7fe      	b.n	8007166 <ai_platform_network_destroy+0x36>
 8007168:	b913      	cbnz	r3, 8007170 <ai_platform_network_destroy+0x40>
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	4603      	mov	r3, r0
 800716e:	e7e7      	b.n	8007140 <ai_platform_network_destroy+0x10>
 8007170:	4618      	mov	r0, r3
 8007172:	f003 faf7 	bl	800a764 <ai_layers_destroy_all>
 8007176:	4620      	mov	r0, r4
 8007178:	bd38      	pop	{r3, r4, r5, pc}
 800717a:	bf00      	nop
 800717c:	a1c00100 	.word	0xa1c00100
 8007180:	e0002000 	.word	0xe0002000
 8007184:	40023008 	.word	0x40023008
 8007188:	40023000 	.word	0x40023000
 800718c:	f407a5c2 	.word	0xf407a5c2
 8007190:	b5e8b5cd 	.word	0xb5e8b5cd

08007194 <ai_platform_network_init>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	460c      	mov	r4, r1
 8007198:	4605      	mov	r5, r0
 800719a:	b120      	cbz	r0, 80071a6 <ai_platform_network_init+0x12>
 800719c:	4b30      	ldr	r3, [pc, #192]	; (8007260 <ai_platform_network_init+0xcc>)
 800719e:	6802      	ldr	r2, [r0, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	bf18      	it	ne
 80071a4:	2500      	movne	r5, #0
 80071a6:	492f      	ldr	r1, [pc, #188]	; (8007264 <ai_platform_network_init+0xd0>)
 80071a8:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <ai_platform_network_init+0xd4>)
 80071aa:	680b      	ldr	r3, [r1, #0]
 80071ac:	2001      	movs	r0, #1
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	600b      	str	r3, [r1, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	6010      	str	r0, [r2, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d1fc      	bne.n	80071b8 <ai_platform_network_init+0x24>
 80071be:	4b2b      	ldr	r3, [pc, #172]	; (800726c <ai_platform_network_init+0xd8>)
 80071c0:	4a2b      	ldr	r2, [pc, #172]	; (8007270 <ai_platform_network_init+0xdc>)
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b2b      	ldr	r3, [pc, #172]	; (8007274 <ai_platform_network_init+0xe0>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d000      	beq.n	80071ce <ai_platform_network_init+0x3a>
 80071cc:	e7fe      	b.n	80071cc <ai_platform_network_init+0x38>
 80071ce:	b1dd      	cbz	r5, 8007208 <ai_platform_network_init+0x74>
 80071d0:	b1e4      	cbz	r4, 800720c <ai_platform_network_init+0x78>
 80071d2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80071d4:	6926      	ldr	r6, [r4, #16]
 80071d6:	b30f      	cbz	r7, 800721c <ai_platform_network_init+0x88>
 80071d8:	b38e      	cbz	r6, 800723e <ai_platform_network_init+0xaa>
 80071da:	4627      	mov	r7, r4
 80071dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80071de:	f105 0618 	add.w	r6, r5, #24
 80071e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80071e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80071e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80071ec:	3418      	adds	r4, #24
 80071ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071f0:	f105 0630 	add.w	r6, r5, #48	; 0x30
 80071f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80071f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071fa:	2303      	movs	r3, #3
 80071fc:	e886 0003 	stmia.w	r6, {r0, r1}
 8007200:	60eb      	str	r3, [r5, #12]
 8007202:	4628      	mov	r0, r5
 8007204:	f003 fa34 	bl	800a670 <ai_layers_init_all>
 8007208:	4628      	mov	r0, r5
 800720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800720c:	f105 0010 	add.w	r0, r5, #16
 8007210:	2211      	movs	r2, #17
 8007212:	2110      	movs	r1, #16
 8007214:	4625      	mov	r5, r4
 8007216:	f000 fa8d 	bl	8007734 <core_set_error>
 800721a:	e7f5      	b.n	8007208 <ai_platform_network_init+0x74>
 800721c:	8c21      	ldrh	r1, [r4, #32]
 800721e:	8be2      	ldrh	r2, [r4, #30]
 8007220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007222:	fb02 f201 	mul.w	r2, r2, r1
 8007226:	fb03 f302 	mul.w	r3, r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0d4      	beq.n	80071d8 <ai_platform_network_init+0x44>
 800722e:	f105 0010 	add.w	r0, r5, #16
 8007232:	2213      	movs	r2, #19
 8007234:	2110      	movs	r1, #16
 8007236:	463d      	mov	r5, r7
 8007238:	f000 fa7c 	bl	8007734 <core_set_error>
 800723c:	e7e4      	b.n	8007208 <ai_platform_network_init+0x74>
 800723e:	8921      	ldrh	r1, [r4, #8]
 8007240:	88e2      	ldrh	r2, [r4, #6]
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	fb02 f201 	mul.w	r2, r2, r1
 8007248:	fb03 f302 	mul.w	r3, r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0c4      	beq.n	80071da <ai_platform_network_init+0x46>
 8007250:	f105 0010 	add.w	r0, r5, #16
 8007254:	2212      	movs	r2, #18
 8007256:	2110      	movs	r1, #16
 8007258:	4635      	mov	r5, r6
 800725a:	f000 fa6b 	bl	8007734 <core_set_error>
 800725e:	e7d3      	b.n	8007208 <ai_platform_network_init+0x74>
 8007260:	a1c00100 	.word	0xa1c00100
 8007264:	e0002000 	.word	0xe0002000
 8007268:	40023008 	.word	0x40023008
 800726c:	40023000 	.word	0x40023000
 8007270:	f407a5c2 	.word	0xf407a5c2
 8007274:	b5e8b5cd 	.word	0xb5e8b5cd

08007278 <ai_platform_network_post_init>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4604      	mov	r4, r0
 800727c:	b120      	cbz	r0, 8007288 <ai_platform_network_post_init+0x10>
 800727e:	4b1e      	ldr	r3, [pc, #120]	; (80072f8 <ai_platform_network_post_init+0x80>)
 8007280:	6802      	ldr	r2, [r0, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	bf18      	it	ne
 8007286:	2400      	movne	r4, #0
 8007288:	491c      	ldr	r1, [pc, #112]	; (80072fc <ai_platform_network_post_init+0x84>)
 800728a:	4a1d      	ldr	r2, [pc, #116]	; (8007300 <ai_platform_network_post_init+0x88>)
 800728c:	680b      	ldr	r3, [r1, #0]
 800728e:	2001      	movs	r0, #1
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	600b      	str	r3, [r1, #0]
 8007296:	4613      	mov	r3, r2
 8007298:	6010      	str	r0, [r2, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	2a00      	cmp	r2, #0
 800729e:	d1fc      	bne.n	800729a <ai_platform_network_post_init+0x22>
 80072a0:	4b18      	ldr	r3, [pc, #96]	; (8007304 <ai_platform_network_post_init+0x8c>)
 80072a2:	4a19      	ldr	r2, [pc, #100]	; (8007308 <ai_platform_network_post_init+0x90>)
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b18      	ldr	r3, [pc, #96]	; (800730c <ai_platform_network_post_init+0x94>)
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d000      	beq.n	80072b0 <ai_platform_network_post_init+0x38>
 80072ae:	e7fe      	b.n	80072ae <ai_platform_network_post_init+0x36>
 80072b0:	b1bc      	cbz	r4, 80072e2 <ai_platform_network_post_init+0x6a>
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	f013 0502 	ands.w	r5, r3, #2
 80072b8:	d015      	beq.n	80072e6 <ai_platform_network_post_init+0x6e>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f003 f9ec 	bl	800a698 <ai_layers_post_init_all>
 80072c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072c2:	b163      	cbz	r3, 80072de <ai_platform_network_post_init+0x66>
 80072c4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80072c6:	b91d      	cbnz	r5, 80072d0 <ai_platform_network_post_init+0x58>
 80072c8:	e009      	b.n	80072de <ai_platform_network_post_init+0x66>
 80072ca:	461d      	mov	r5, r3
 80072cc:	b13b      	cbz	r3, 80072de <ai_platform_network_post_init+0x66>
 80072ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80072d2:	4629      	mov	r1, r5
 80072d4:	2000      	movs	r0, #0
 80072d6:	4798      	blx	r3
 80072d8:	692b      	ldr	r3, [r5, #16]
 80072da:	42ab      	cmp	r3, r5
 80072dc:	d1f5      	bne.n	80072ca <ai_platform_network_post_init+0x52>
 80072de:	2001      	movs	r0, #1
 80072e0:	bd38      	pop	{r3, r4, r5, pc}
 80072e2:	4620      	mov	r0, r4
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	f104 0010 	add.w	r0, r4, #16
 80072ea:	2210      	movs	r2, #16
 80072ec:	2111      	movs	r1, #17
 80072ee:	f000 fa21 	bl	8007734 <core_set_error>
 80072f2:	4628      	mov	r0, r5
 80072f4:	bd38      	pop	{r3, r4, r5, pc}
 80072f6:	bf00      	nop
 80072f8:	a1c00100 	.word	0xa1c00100
 80072fc:	e0002000 	.word	0xe0002000
 8007300:	40023008 	.word	0x40023008
 8007304:	40023000 	.word	0x40023000
 8007308:	f407a5c2 	.word	0xf407a5c2
 800730c:	b5e8b5cd 	.word	0xb5e8b5cd

08007310 <ai_platform_network_process>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	b083      	sub	sp, #12
 8007316:	4604      	mov	r4, r0
 8007318:	9201      	str	r2, [sp, #4]
 800731a:	b120      	cbz	r0, 8007326 <ai_platform_network_process+0x16>
 800731c:	4ba5      	ldr	r3, [pc, #660]	; (80075b4 <ai_platform_network_process+0x2a4>)
 800731e:	6802      	ldr	r2, [r0, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	bf18      	it	ne
 8007324:	2400      	movne	r4, #0
 8007326:	48a4      	ldr	r0, [pc, #656]	; (80075b8 <ai_platform_network_process+0x2a8>)
 8007328:	4ba4      	ldr	r3, [pc, #656]	; (80075bc <ai_platform_network_process+0x2ac>)
 800732a:	6802      	ldr	r2, [r0, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	6002      	str	r2, [r0, #0]
 8007332:	2201      	movs	r2, #1
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	2a00      	cmp	r2, #0
 800733a:	d1fc      	bne.n	8007336 <ai_platform_network_process+0x26>
 800733c:	4ba0      	ldr	r3, [pc, #640]	; (80075c0 <ai_platform_network_process+0x2b0>)
 800733e:	4aa1      	ldr	r2, [pc, #644]	; (80075c4 <ai_platform_network_process+0x2b4>)
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4ba0      	ldr	r3, [pc, #640]	; (80075c8 <ai_platform_network_process+0x2b8>)
 8007346:	429a      	cmp	r2, r3
 8007348:	d000      	beq.n	800734c <ai_platform_network_process+0x3c>
 800734a:	e7fe      	b.n	800734a <ai_platform_network_process+0x3a>
 800734c:	2c00      	cmp	r4, #0
 800734e:	d066      	beq.n	800741e <ai_platform_network_process+0x10e>
 8007350:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8007354:	b107      	cbz	r7, 8007358 <ai_platform_network_process+0x48>
 8007356:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8007358:	68e3      	ldr	r3, [r4, #12]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2600      	movs	r6, #0
 8007360:	2b03      	cmp	r3, #3
 8007362:	6166      	str	r6, [r4, #20]
 8007364:	f040 80fe 	bne.w	8007564 <ai_platform_network_process+0x254>
 8007368:	2900      	cmp	r1, #0
 800736a:	d07f      	beq.n	800746c <ai_platform_network_process+0x15c>
 800736c:	2f00      	cmp	r7, #0
 800736e:	d07d      	beq.n	800746c <ai_platform_network_process+0x15c>
 8007370:	883b      	ldrh	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d07a      	beq.n	800746c <ai_platform_network_process+0x15c>
 8007376:	460d      	mov	r5, r1
 8007378:	46a0      	mov	r8, r4
 800737a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800737e:	429e      	cmp	r6, r3
 8007380:	d27d      	bcs.n	800747e <ai_platform_network_process+0x16e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d07a      	beq.n	800747e <ai_platform_network_process+0x16e>
 8007388:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800738c:	2c00      	cmp	r4, #0
 800738e:	d076      	beq.n	800747e <ai_platform_network_process+0x16e>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8007398:	d067      	beq.n	800746a <ai_platform_network_process+0x15a>
 800739a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800739e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80073a2:	69a0      	ldr	r0, [r4, #24]
 80073a4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80073a8:	6841      	ldr	r1, [r0, #4]
 80073aa:	fb0b f30e 	mul.w	r3, fp, lr
 80073ae:	fb0c f303 	mul.w	r3, ip, r3
 80073b2:	4299      	cmp	r1, r3
 80073b4:	d350      	bcc.n	8007458 <ai_platform_network_process+0x148>
 80073b6:	68e3      	ldr	r3, [r4, #12]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	455a      	cmp	r2, fp
 80073bc:	d14c      	bne.n	8007458 <ai_platform_network_process+0x148>
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	4572      	cmp	r2, lr
 80073c2:	d149      	bne.n	8007458 <ai_platform_network_process+0x148>
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	459c      	cmp	ip, r3
 80073c8:	d146      	bne.n	8007458 <ai_platform_network_process+0x148>
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	f003 fa2e 	bl	800a82c <ai_array_get_byte_size>
 80073d0:	68e2      	ldr	r2, [r4, #12]
 80073d2:	6963      	ldr	r3, [r4, #20]
 80073d4:	68d2      	ldr	r2, [r2, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	fb03 f302 	mul.w	r3, r3, r2
 80073dc:	4298      	cmp	r0, r3
 80073de:	d33b      	bcc.n	8007458 <ai_platform_network_process+0x148>
 80073e0:	69a3      	ldr	r3, [r4, #24]
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	f003 f9d6 	bl	800a794 <ai_array_to_buffer_fmt>
 80073e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80073ec:	4043      	eors	r3, r0
 80073ee:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80073f2:	d128      	bne.n	8007446 <ai_platform_network_process+0x136>
 80073f4:	68eb      	ldr	r3, [r5, #12]
 80073f6:	b1f3      	cbz	r3, 8007436 <ai_platform_network_process+0x126>
 80073f8:	f8b5 b000 	ldrh.w	fp, [r5]
 80073fc:	f1bb 0f00 	cmp.w	fp, #0
 8007400:	d012      	beq.n	8007428 <ai_platform_network_process+0x118>
 8007402:	4623      	mov	r3, r4
 8007404:	f105 020c 	add.w	r2, r5, #12
 8007408:	4629      	mov	r1, r5
 800740a:	4650      	mov	r0, sl
 800740c:	f7ff fc00 	bl	8006c10 <_platform_network_state_setup.isra.1>
 8007410:	45d9      	cmp	r9, fp
 8007412:	883b      	ldrh	r3, [r7, #0]
 8007414:	bf38      	it	cc
 8007416:	46d9      	movcc	r9, fp
 8007418:	3601      	adds	r6, #1
 800741a:	3518      	adds	r5, #24
 800741c:	e7af      	b.n	800737e <ai_platform_network_process+0x6e>
 800741e:	46a3      	mov	fp, r4
 8007420:	4658      	mov	r0, fp
 8007422:	b003      	add	sp, #12
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	f108 0010 	add.w	r0, r8, #16
 800742c:	2221      	movs	r2, #33	; 0x21
 800742e:	2112      	movs	r1, #18
 8007430:	f000 f980 	bl	8007734 <core_set_error>
 8007434:	e7f4      	b.n	8007420 <ai_platform_network_process+0x110>
 8007436:	f108 0010 	add.w	r0, r8, #16
 800743a:	2217      	movs	r2, #23
 800743c:	2112      	movs	r1, #18
 800743e:	469b      	mov	fp, r3
 8007440:	f000 f978 	bl	8007734 <core_set_error>
 8007444:	e7ec      	b.n	8007420 <ai_platform_network_process+0x110>
 8007446:	f108 0010 	add.w	r0, r8, #16
 800744a:	2219      	movs	r2, #25
 800744c:	2112      	movs	r1, #18
 800744e:	f000 f971 	bl	8007734 <core_set_error>
 8007452:	f04f 0b00 	mov.w	fp, #0
 8007456:	e7e3      	b.n	8007420 <ai_platform_network_process+0x110>
 8007458:	f108 0010 	add.w	r0, r8, #16
 800745c:	2218      	movs	r2, #24
 800745e:	2112      	movs	r1, #18
 8007460:	f000 f968 	bl	8007734 <core_set_error>
 8007464:	f04f 0b00 	mov.w	fp, #0
 8007468:	e7da      	b.n	8007420 <ai_platform_network_process+0x110>
 800746a:	4644      	mov	r4, r8
 800746c:	f104 0010 	add.w	r0, r4, #16
 8007470:	2217      	movs	r2, #23
 8007472:	2112      	movs	r1, #18
 8007474:	f000 f95e 	bl	8007734 <core_set_error>
 8007478:	f04f 0b00 	mov.w	fp, #0
 800747c:	e7d0      	b.n	8007420 <ai_platform_network_process+0x110>
 800747e:	9a01      	ldr	r2, [sp, #4]
 8007480:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8007484:	4644      	mov	r4, r8
 8007486:	2a00      	cmp	r2, #0
 8007488:	f000 80a2 	beq.w	80075d0 <ai_platform_network_process+0x2c0>
 800748c:	2b01      	cmp	r3, #1
 800748e:	f240 8140 	bls.w	8007712 <ai_platform_network_process+0x402>
 8007492:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8007496:	f118 0f0c 	cmn.w	r8, #12
 800749a:	f000 813a 	beq.w	8007712 <ai_platform_network_process+0x402>
 800749e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8135 	beq.w	8007712 <ai_platform_network_process+0x402>
 80074a8:	9d01      	ldr	r5, [sp, #4]
 80074aa:	2700      	movs	r7, #0
 80074ac:	3504      	adds	r5, #4
 80074ae:	429f      	cmp	r7, r3
 80074b0:	f080 808c 	bcs.w	80075cc <ai_platform_network_process+0x2bc>
 80074b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8087 	beq.w	80075cc <ai_platform_network_process+0x2bc>
 80074be:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	f000 8082 	beq.w	80075cc <ai_platform_network_process+0x2bc>
 80074c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80074d2:	d067      	beq.n	80075a4 <ai_platform_network_process+0x294>
 80074d4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80074d8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80074dc:	69b0      	ldr	r0, [r6, #24]
 80074de:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80074e2:	6841      	ldr	r1, [r0, #4]
 80074e4:	fb0b f30e 	mul.w	r3, fp, lr
 80074e8:	fb0c f303 	mul.w	r3, ip, r3
 80074ec:	4299      	cmp	r1, r3
 80074ee:	f0c0 8110 	bcc.w	8007712 <ai_platform_network_process+0x402>
 80074f2:	68f3      	ldr	r3, [r6, #12]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	455a      	cmp	r2, fp
 80074f8:	f040 810b 	bne.w	8007712 <ai_platform_network_process+0x402>
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	4572      	cmp	r2, lr
 8007500:	f040 8107 	bne.w	8007712 <ai_platform_network_process+0x402>
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	459c      	cmp	ip, r3
 8007508:	f040 8103 	bne.w	8007712 <ai_platform_network_process+0x402>
 800750c:	6800      	ldr	r0, [r0, #0]
 800750e:	f003 f98d 	bl	800a82c <ai_array_get_byte_size>
 8007512:	68f2      	ldr	r2, [r6, #12]
 8007514:	6973      	ldr	r3, [r6, #20]
 8007516:	68d2      	ldr	r2, [r2, #12]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	fb03 f302 	mul.w	r3, r3, r2
 800751e:	4298      	cmp	r0, r3
 8007520:	f0c0 80f7 	bcc.w	8007712 <ai_platform_network_process+0x402>
 8007524:	69b3      	ldr	r3, [r6, #24]
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	f003 f934 	bl	800a794 <ai_array_to_buffer_fmt>
 800752c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007530:	4043      	eors	r3, r0
 8007532:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8007536:	d12c      	bne.n	8007592 <ai_platform_network_process+0x282>
 8007538:	68eb      	ldr	r3, [r5, #12]
 800753a:	b313      	cbz	r3, 8007582 <ai_platform_network_process+0x272>
 800753c:	f8b5 b000 	ldrh.w	fp, [r5]
 8007540:	f1bb 0f00 	cmp.w	fp, #0
 8007544:	d016      	beq.n	8007574 <ai_platform_network_process+0x264>
 8007546:	4633      	mov	r3, r6
 8007548:	f105 020c 	add.w	r2, r5, #12
 800754c:	4629      	mov	r1, r5
 800754e:	4650      	mov	r0, sl
 8007550:	f7ff fb5e 	bl	8006c10 <_platform_network_state_setup.isra.1>
 8007554:	45d9      	cmp	r9, fp
 8007556:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800755a:	bf38      	it	cc
 800755c:	46d9      	movcc	r9, fp
 800755e:	3701      	adds	r7, #1
 8007560:	3518      	adds	r5, #24
 8007562:	e7a4      	b.n	80074ae <ai_platform_network_process+0x19e>
 8007564:	f104 0010 	add.w	r0, r4, #16
 8007568:	2230      	movs	r2, #48	; 0x30
 800756a:	2111      	movs	r1, #17
 800756c:	f000 f8e2 	bl	8007734 <core_set_error>
 8007570:	46b3      	mov	fp, r6
 8007572:	e755      	b.n	8007420 <ai_platform_network_process+0x110>
 8007574:	f104 0010 	add.w	r0, r4, #16
 8007578:	2221      	movs	r2, #33	; 0x21
 800757a:	2113      	movs	r1, #19
 800757c:	f000 f8da 	bl	8007734 <core_set_error>
 8007580:	e74e      	b.n	8007420 <ai_platform_network_process+0x110>
 8007582:	f104 0010 	add.w	r0, r4, #16
 8007586:	2217      	movs	r2, #23
 8007588:	2113      	movs	r1, #19
 800758a:	469b      	mov	fp, r3
 800758c:	f000 f8d2 	bl	8007734 <core_set_error>
 8007590:	e746      	b.n	8007420 <ai_platform_network_process+0x110>
 8007592:	f104 0010 	add.w	r0, r4, #16
 8007596:	2219      	movs	r2, #25
 8007598:	2113      	movs	r1, #19
 800759a:	f000 f8cb 	bl	8007734 <core_set_error>
 800759e:	f04f 0b00 	mov.w	fp, #0
 80075a2:	e73d      	b.n	8007420 <ai_platform_network_process+0x110>
 80075a4:	f104 0010 	add.w	r0, r4, #16
 80075a8:	2217      	movs	r2, #23
 80075aa:	2113      	movs	r1, #19
 80075ac:	f000 f8c2 	bl	8007734 <core_set_error>
 80075b0:	46d3      	mov	fp, sl
 80075b2:	e735      	b.n	8007420 <ai_platform_network_process+0x110>
 80075b4:	a1c00100 	.word	0xa1c00100
 80075b8:	e0002000 	.word	0xe0002000
 80075bc:	40023008 	.word	0x40023008
 80075c0:	40023000 	.word	0x40023000
 80075c4:	f407a5c2 	.word	0xf407a5c2
 80075c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80075cc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80075d0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8099 	beq.w	800770c <ai_platform_network_process+0x3fc>
 80075da:	2b01      	cmp	r3, #1
 80075dc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80075de:	f240 8093 	bls.w	8007708 <ai_platform_network_process+0x3f8>
 80075e2:	f105 070c 	add.w	r7, r5, #12
 80075e6:	8ae0      	ldrh	r0, [r4, #22]
 80075e8:	8aa3      	ldrh	r3, [r4, #20]
 80075ea:	4283      	cmp	r3, r0
 80075ec:	d977      	bls.n	80076de <ai_platform_network_process+0x3ce>
 80075ee:	46a3      	mov	fp, r4
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	d032      	beq.n	800765a <ai_platform_network_process+0x34a>
 80075f4:	882b      	ldrh	r3, [r5, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d02f      	beq.n	800765a <ai_platform_network_process+0x34a>
 80075fa:	686b      	ldr	r3, [r5, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d02c      	beq.n	800765a <ai_platform_network_process+0x34a>
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f04f 0800 	mov.w	r8, #0
 8007606:	b343      	cbz	r3, 800765a <ai_platform_network_process+0x34a>
 8007608:	68a9      	ldr	r1, [r5, #8]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	f8d1 a000 	ldr.w	sl, [r1]
 8007610:	6814      	ldr	r4, [r2, #0]
 8007612:	6890      	ldr	r0, [r2, #8]
 8007614:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007618:	eb0a 0609 	add.w	r6, sl, r9
 800761c:	00a4      	lsls	r4, r4, #2
 800761e:	6871      	ldr	r1, [r6, #4]
 8007620:	d45f      	bmi.n	80076e2 <ai_platform_network_process+0x3d2>
 8007622:	68d4      	ldr	r4, [r2, #12]
 8007624:	1b00      	subs	r0, r0, r4
 8007626:	4401      	add	r1, r0
 8007628:	6091      	str	r1, [r2, #8]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	6872      	ldr	r2, [r6, #4]
 800762e:	60da      	str	r2, [r3, #12]
 8007630:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8007634:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007638:	440b      	add	r3, r1
 800763a:	4293      	cmp	r3, r2
 800763c:	bf24      	itt	cs
 800763e:	68f3      	ldrcs	r3, [r6, #12]
 8007640:	1ad3      	subcs	r3, r2, r3
 8007642:	6073      	str	r3, [r6, #4]
 8007644:	882b      	ldrh	r3, [r5, #0]
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	4598      	cmp	r8, r3
 800764c:	d205      	bcs.n	800765a <ai_platform_network_process+0x34a>
 800764e:	686b      	ldr	r3, [r5, #4]
 8007650:	b11b      	cbz	r3, 800765a <ai_platform_network_process+0x34a>
 8007652:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1d6      	bne.n	8007608 <ai_platform_network_process+0x2f8>
 800765a:	4658      	mov	r0, fp
 800765c:	f003 f834 	bl	800a6c8 <ai_layers_forward_all>
 8007660:	2f00      	cmp	r7, #0
 8007662:	d032      	beq.n	80076ca <ai_platform_network_process+0x3ba>
 8007664:	883b      	ldrh	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02f      	beq.n	80076ca <ai_platform_network_process+0x3ba>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	b36b      	cbz	r3, 80076ca <ai_platform_network_process+0x3ba>
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	b358      	cbz	r0, 80076ca <ai_platform_network_process+0x3ba>
 8007672:	f04f 0800 	mov.w	r8, #0
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6981      	ldr	r1, [r0, #24]
 800767a:	f8d3 a000 	ldr.w	sl, [r3]
 800767e:	680c      	ldr	r4, [r1, #0]
 8007680:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007684:	eb0a 0609 	add.w	r6, sl, r9
 8007688:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800768c:	00a4      	lsls	r4, r4, #2
 800768e:	eb0c 0302 	add.w	r3, ip, r2
 8007692:	d42a      	bmi.n	80076ea <ai_platform_network_process+0x3da>
 8007694:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007698:	4293      	cmp	r3, r2
 800769a:	bf24      	itt	cs
 800769c:	68f3      	ldrcs	r3, [r6, #12]
 800769e:	1ad3      	subcs	r3, r2, r3
 80076a0:	6073      	str	r3, [r6, #4]
 80076a2:	6981      	ldr	r1, [r0, #24]
 80076a4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80076a8:	1b12      	subs	r2, r2, r4
 80076aa:	4413      	add	r3, r2
 80076ac:	608b      	str	r3, [r1, #8]
 80076ae:	6983      	ldr	r3, [r0, #24]
 80076b0:	6872      	ldr	r2, [r6, #4]
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	883b      	ldrh	r3, [r7, #0]
 80076b6:	f108 0801 	add.w	r8, r8, #1
 80076ba:	4598      	cmp	r8, r3
 80076bc:	d205      	bcs.n	80076ca <ai_platform_network_process+0x3ba>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	b11b      	cbz	r3, 80076ca <ai_platform_network_process+0x3ba>
 80076c2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d1d5      	bne.n	8007676 <ai_platform_network_process+0x366>
 80076ca:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80076ce:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80076d2:	3001      	adds	r0, #1
 80076d4:	b280      	uxth	r0, r0
 80076d6:	4283      	cmp	r3, r0
 80076d8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80076dc:	d888      	bhi.n	80075f0 <ai_platform_network_process+0x2e0>
 80076de:	4683      	mov	fp, r0
 80076e0:	e69e      	b.n	8007420 <ai_platform_network_process+0x110>
 80076e2:	68b2      	ldr	r2, [r6, #8]
 80076e4:	f003 f8f6 	bl	800a8d4 <memcpy>
 80076e8:	e7a2      	b.n	8007630 <ai_platform_network_process+0x320>
 80076ea:	6889      	ldr	r1, [r1, #8]
 80076ec:	4660      	mov	r0, ip
 80076ee:	f003 f8f1 	bl	800a8d4 <memcpy>
 80076f2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80076f6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80076fa:	440b      	add	r3, r1
 80076fc:	4293      	cmp	r3, r2
 80076fe:	bf24      	itt	cs
 8007700:	68f3      	ldrcs	r3, [r6, #12]
 8007702:	1ad3      	subcs	r3, r2, r3
 8007704:	6073      	str	r3, [r6, #4]
 8007706:	e7d5      	b.n	80076b4 <ai_platform_network_process+0x3a4>
 8007708:	2700      	movs	r7, #0
 800770a:	e76c      	b.n	80075e6 <ai_platform_network_process+0x2d6>
 800770c:	461d      	mov	r5, r3
 800770e:	461f      	mov	r7, r3
 8007710:	e769      	b.n	80075e6 <ai_platform_network_process+0x2d6>
 8007712:	f104 0010 	add.w	r0, r4, #16
 8007716:	2218      	movs	r2, #24
 8007718:	2113      	movs	r1, #19
 800771a:	f000 f80b 	bl	8007734 <core_set_error>
 800771e:	f04f 0b00 	mov.w	fp, #0
 8007722:	e67d      	b.n	8007420 <ai_platform_network_process+0x110>

08007724 <core_init>:
 8007724:	2001      	movs	r0, #1
 8007726:	4770      	bx	lr

08007728 <core_get_error>:
 8007728:	4603      	mov	r3, r0
 800772a:	2200      	movs	r2, #0
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop

08007734 <core_set_error>:
 8007734:	7803      	ldrb	r3, [r0, #0]
 8007736:	b933      	cbnz	r3, 8007746 <core_set_error+0x12>
 8007738:	7001      	strb	r1, [r0, #0]
 800773a:	6803      	ldr	r3, [r0, #0]
 800773c:	f362 231f 	bfi	r3, r2, #8, #24
 8007740:	6003      	str	r3, [r0, #0]
 8007742:	2001      	movs	r0, #1
 8007744:	4770      	bx	lr
 8007746:	2000      	movs	r0, #0
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <func_dummy>:
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <ai_dict8_dot_array_f32>:
 8007750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007758:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800775c:	f000 80c0 	beq.w	80078e0 <ai_dict8_dot_array_f32+0x190>
 8007760:	f101 0408 	add.w	r4, r1, #8
 8007764:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8007768:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80078e8 <ai_dict8_dot_array_f32+0x198>
 800776c:	eb04 0e09 	add.w	lr, r4, r9
 8007770:	f103 0520 	add.w	r5, r3, #32
 8007774:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8007778:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800777c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8007780:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8007784:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8007788:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800778c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8007790:	ed55 3a04 	vldr	s7, [r5, #-16]
 8007794:	ed55 4a03 	vldr	s9, [r5, #-12]
 8007798:	ed55 5a02 	vldr	s11, [r5, #-8]
 800779c:	ed55 6a01 	vldr	s13, [r5, #-4]
 80077a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077a4:	edd6 7a00 	vldr	s15, [r6]
 80077a8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80077ac:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80077b0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80077b4:	ed9a 3a00 	vldr	s6, [sl]
 80077b8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80077bc:	eee3 7a05 	vfma.f32	s15, s6, s10
 80077c0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80077c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077c8:	ed97 3a00 	vldr	s6, [r7]
 80077cc:	ed96 5a00 	vldr	s10, [r6]
 80077d0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80077d4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80077d8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80077dc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80077e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077e4:	ed9a 3a00 	vldr	s6, [sl]
 80077e8:	ed96 4a00 	vldr	s8, [r6]
 80077ec:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80077f0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80077f4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80077f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077fc:	ed97 5a00 	vldr	s10, [r7]
 8007800:	ed96 6a00 	vldr	s12, [r6]
 8007804:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007808:	3408      	adds	r4, #8
 800780a:	45a6      	cmp	lr, r4
 800780c:	f105 0520 	add.w	r5, r5, #32
 8007810:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007814:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007818:	eee6 7a26 	vfma.f32	s15, s12, s13
 800781c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007820:	d1a8      	bne.n	8007774 <ai_dict8_dot_array_f32+0x24>
 8007822:	4449      	add	r1, r9
 8007824:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8007828:	f01c 0c07 	ands.w	ip, ip, #7
 800782c:	d050      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 800782e:	780c      	ldrb	r4, [r1, #0]
 8007830:	edd3 6a00 	vldr	s13, [r3]
 8007834:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007838:	edd4 7a00 	vldr	s15, [r4]
 800783c:	f1bc 0f01 	cmp.w	ip, #1
 8007840:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007844:	d044      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 8007846:	784c      	ldrb	r4, [r1, #1]
 8007848:	edd3 6a01 	vldr	s13, [r3, #4]
 800784c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007850:	edd4 7a00 	vldr	s15, [r4]
 8007854:	f1bc 0f02 	cmp.w	ip, #2
 8007858:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800785c:	d038      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 800785e:	788c      	ldrb	r4, [r1, #2]
 8007860:	edd3 6a02 	vldr	s13, [r3, #8]
 8007864:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007868:	edd4 7a00 	vldr	s15, [r4]
 800786c:	f1bc 0f03 	cmp.w	ip, #3
 8007870:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007874:	d02c      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 8007876:	78cc      	ldrb	r4, [r1, #3]
 8007878:	edd3 6a03 	vldr	s13, [r3, #12]
 800787c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007880:	edd4 7a00 	vldr	s15, [r4]
 8007884:	f1bc 0f04 	cmp.w	ip, #4
 8007888:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800788c:	d020      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 800788e:	790c      	ldrb	r4, [r1, #4]
 8007890:	edd3 6a04 	vldr	s13, [r3, #16]
 8007894:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007898:	edd4 7a00 	vldr	s15, [r4]
 800789c:	f1bc 0f05 	cmp.w	ip, #5
 80078a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078a4:	d014      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 80078a6:	794c      	ldrb	r4, [r1, #5]
 80078a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80078ac:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80078b0:	edd4 7a00 	vldr	s15, [r4]
 80078b4:	f1bc 0f06 	cmp.w	ip, #6
 80078b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078bc:	d008      	beq.n	80078d0 <ai_dict8_dot_array_f32+0x180>
 80078be:	7989      	ldrb	r1, [r1, #6]
 80078c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80078c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80078c8:	edd2 6a00 	vldr	s13, [r2]
 80078cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078d0:	edd0 7a00 	vldr	s15, [r0]
 80078d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078d8:	ed80 7a00 	vstr	s14, [r0]
 80078dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80078e8 <ai_dict8_dot_array_f32+0x198>
 80078e4:	e7a0      	b.n	8007828 <ai_dict8_dot_array_f32+0xd8>
 80078e6:	bf00      	nop
 80078e8:	00000000 	.word	0x00000000

080078ec <ai_dict4_dot_array_f32>:
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078f2:	f027 0c01 	bic.w	ip, r7, #1
 80078f6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80078fa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80078fe:	f000 80ae 	beq.w	8007a5e <ai_dict4_dot_array_f32+0x172>
 8007902:	1d0d      	adds	r5, r1, #4
 8007904:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8007908:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007a64 <ai_dict4_dot_array_f32+0x178>
 800790c:	eb05 0e09 	add.w	lr, r5, r9
 8007910:	f103 0420 	add.w	r4, r3, #32
 8007914:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8007918:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800791c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8007920:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8007924:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8007928:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800792c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8007930:	ed54 5a03 	vldr	s11, [r4, #-12]
 8007934:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007938:	ed54 6a01 	vldr	s13, [r4, #-4]
 800793c:	f006 0a0f 	and.w	sl, r6, #15
 8007940:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8007944:	edda 7a00 	vldr	s15, [sl]
 8007948:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800794c:	0936      	lsrs	r6, r6, #4
 800794e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007952:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007956:	ed96 3a00 	vldr	s6, [r6]
 800795a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800795e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007966:	f00b 0b0f 	and.w	fp, fp, #15
 800796a:	edd6 3a00 	vldr	s7, [r6]
 800796e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8007972:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007976:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800797a:	3504      	adds	r5, #4
 800797c:	ed9b 4a00 	vldr	s8, [fp]
 8007980:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8007984:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007988:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800798c:	f00a 0a0f 	and.w	sl, sl, #15
 8007990:	eddb 4a00 	vldr	s9, [fp]
 8007994:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007998:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800799c:	45ae      	cmp	lr, r5
 800799e:	ed9a 5a00 	vldr	s10, [sl]
 80079a2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80079a6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80079aa:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80079ae:	f006 060f 	and.w	r6, r6, #15
 80079b2:	edda 5a00 	vldr	s11, [sl]
 80079b6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80079ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079be:	f104 0420 	add.w	r4, r4, #32
 80079c2:	ed96 6a00 	vldr	s12, [r6]
 80079c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079ce:	d1a1      	bne.n	8007914 <ai_dict4_dot_array_f32+0x28>
 80079d0:	4449      	add	r1, r9
 80079d2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80079d6:	459c      	cmp	ip, r3
 80079d8:	d92d      	bls.n	8007a36 <ai_dict4_dot_array_f32+0x14a>
 80079da:	f10c 0c07 	add.w	ip, ip, #7
 80079de:	f103 0508 	add.w	r5, r3, #8
 80079e2:	ebac 0c05 	sub.w	ip, ip, r5
 80079e6:	f02c 0407 	bic.w	r4, ip, #7
 80079ea:	f103 0810 	add.w	r8, r3, #16
 80079ee:	44a0      	add	r8, r4
 80079f0:	f101 3eff 	add.w	lr, r1, #4294967295
 80079f4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80079f8:	ed15 6a01 	vldr	s12, [r5, #-4]
 80079fc:	ed55 6a02 	vldr	s13, [r5, #-8]
 8007a00:	f004 060f 	and.w	r6, r4, #15
 8007a04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a08:	0924      	lsrs	r4, r4, #4
 8007a0a:	edd6 7a00 	vldr	s15, [r6]
 8007a0e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007a12:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007a16:	ed94 6a00 	vldr	s12, [r4]
 8007a1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a1e:	3508      	adds	r5, #8
 8007a20:	45a8      	cmp	r8, r5
 8007a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a26:	d1e5      	bne.n	80079f4 <ai_dict4_dot_array_f32+0x108>
 8007a28:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8007a2c:	f10c 0c01 	add.w	ip, ip, #1
 8007a30:	4461      	add	r1, ip
 8007a32:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8007a36:	07fc      	lsls	r4, r7, #31
 8007a38:	d509      	bpl.n	8007a4e <ai_dict4_dot_array_f32+0x162>
 8007a3a:	7809      	ldrb	r1, [r1, #0]
 8007a3c:	edd3 7a00 	vldr	s15, [r3]
 8007a40:	090b      	lsrs	r3, r1, #4
 8007a42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007a46:	edd2 6a00 	vldr	s13, [r2]
 8007a4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a4e:	edd0 7a00 	vldr	s15, [r0]
 8007a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a56:	ed80 7a00 	vstr	s14, [r0]
 8007a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8007a64 <ai_dict4_dot_array_f32+0x178>
 8007a62:	e7b8      	b.n	80079d6 <ai_dict4_dot_array_f32+0xea>
 8007a64:	00000000 	.word	0x00000000

08007a68 <ai_dict_decompress_f32>:
 8007a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	9f08      	ldr	r7, [sp, #32]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007a74:	d00e      	beq.n	8007a94 <ai_dict_decompress_f32+0x2c>
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d10a      	bne.n	8007a90 <ai_dict_decompress_f32+0x28>
 8007a7a:	42b8      	cmp	r0, r7
 8007a7c:	d208      	bcs.n	8007a90 <ai_dict_decompress_f32+0x28>
 8007a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f840 3b04 	str.w	r3, [r0], #4
 8007a8c:	4287      	cmp	r7, r0
 8007a8e:	d8f6      	bhi.n	8007a7e <ai_dict_decompress_f32+0x16>
 8007a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a94:	9b07      	ldr	r3, [sp, #28]
 8007a96:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8007a9a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8007a9e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8007aa2:	f003 0e01 	and.w	lr, r3, #1
 8007aa6:	42b8      	cmp	r0, r7
 8007aa8:	d2f2      	bcs.n	8007a90 <ai_dict_decompress_f32+0x28>
 8007aaa:	f1bc 0f00 	cmp.w	ip, #0
 8007aae:	d01a      	beq.n	8007ae6 <ai_dict_decompress_f32+0x7e>
 8007ab0:	f100 0508 	add.w	r5, r0, #8
 8007ab4:	1e4c      	subs	r4, r1, #1
 8007ab6:	eb01 0608 	add.w	r6, r1, r8
 8007aba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007abe:	091b      	lsrs	r3, r3, #4
 8007ac0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ac4:	42a6      	cmp	r6, r4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f845 3c08 	str.w	r3, [r5, #-8]
 8007acc:	7823      	ldrb	r3, [r4, #0]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ad6:	f105 0508 	add.w	r5, r5, #8
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f845 3c0c 	str.w	r3, [r5, #-12]
 8007ae0:	d1eb      	bne.n	8007aba <ai_dict_decompress_f32+0x52>
 8007ae2:	4461      	add	r1, ip
 8007ae4:	4448      	add	r0, r9
 8007ae6:	f1be 0f00 	cmp.w	lr, #0
 8007aea:	d103      	bne.n	8007af4 <ai_dict_decompress_f32+0x8c>
 8007aec:	4287      	cmp	r7, r0
 8007aee:	d8dc      	bhi.n	8007aaa <ai_dict_decompress_f32+0x42>
 8007af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007af4:	780b      	ldrb	r3, [r1, #0]
 8007af6:	091b      	lsrs	r3, r3, #4
 8007af8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007afc:	3101      	adds	r1, #1
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	3004      	adds	r0, #4
 8007b04:	e7cf      	b.n	8007aa6 <ai_dict_decompress_f32+0x3e>
 8007b06:	bf00      	nop

08007b08 <forward_conv2d>:
 8007b08:	6983      	ldr	r3, [r0, #24]
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	2a00      	cmp	r2, #0
 8007b0e:	f000 87c7 	beq.w	8008aa0 <forward_conv2d+0xf98>
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	b101      	cbz	r1, 8007b1a <forward_conv2d+0x12>
 8007b18:	6809      	ldr	r1, [r1, #0]
 8007b1a:	2a01      	cmp	r2, #1
 8007b1c:	f240 87bd 	bls.w	8008a9a <forward_conv2d+0xf92>
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ed2d 8b10 	vpush	{d8-d15}
 8007b28:	b0cb      	sub	sp, #300	; 0x12c
 8007b2a:	691c      	ldr	r4, [r3, #16]
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	f000 87af 	beq.w	8008a92 <forward_conv2d+0xf8a>
 8007b34:	6824      	ldr	r4, [r4, #0]
 8007b36:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8007b3a:	2a02      	cmp	r2, #2
 8007b3c:	f000 87a4 	beq.w	8008a88 <forward_conv2d+0xf80>
 8007b40:	69dd      	ldr	r5, [r3, #28]
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	f000 8799 	beq.w	8008a7a <forward_conv2d+0xf72>
 8007b48:	f113 0218 	adds.w	r2, r3, #24
 8007b4c:	682c      	ldr	r4, [r5, #0]
 8007b4e:	d004      	beq.n	8007b5a <forward_conv2d+0x52>
 8007b50:	8b1b      	ldrh	r3, [r3, #24]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	f240 87a6 	bls.w	8008aa4 <forward_conv2d+0xf9c>
 8007b58:	686a      	ldr	r2, [r5, #4]
 8007b5a:	68ab      	ldr	r3, [r5, #8]
 8007b5c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007b60:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8007b64:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007b68:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007b6c:	68ce      	ldr	r6, [r1, #12]
 8007b6e:	69a1      	ldr	r1, [r4, #24]
 8007b70:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007b74:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007b78:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8007b7c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007b80:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007b84:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007b88:	6479      	str	r1, [r7, #68]	; 0x44
 8007b8a:	f8de 1008 	ldr.w	r1, [lr, #8]
 8007b8e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8007b92:	6871      	ldr	r1, [r6, #4]
 8007b94:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8007b98:	68f1      	ldr	r1, [r6, #12]
 8007b9a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8007b9e:	68b1      	ldr	r1, [r6, #8]
 8007ba0:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8007ba4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007ba8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8007bac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007bb0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8007bb4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007bb8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8007bba:	6889      	ldr	r1, [r1, #8]
 8007bbc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8007bc0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007bc2:	e9d5 ba00 	ldrd	fp, sl, [r5]
 8007bc6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8007bca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007bcc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8007bd0:	69c1      	ldr	r1, [r0, #28]
 8007bd2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8007bd6:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	f000 8749 	beq.w	8008a72 <forward_conv2d+0xf6a>
 8007be0:	6992      	ldr	r2, [r2, #24]
 8007be2:	6892      	ldr	r2, [r2, #8]
 8007be4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007be8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bec:	6992      	ldr	r2, [r2, #24]
 8007bee:	6892      	ldr	r2, [r2, #8]
 8007bf0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	6a00      	ldr	r0, [r0, #32]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 872c 	beq.w	8008a56 <forward_conv2d+0xf4e>
 8007bfe:	699a      	ldr	r2, [r3, #24]
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	f000 8594 	beq.w	800872e <forward_conv2d+0xc26>
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c0e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007c12:	6893      	ldr	r3, [r2, #8]
 8007c14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c18:	f002 fe08 	bl	800a82c <ai_array_get_byte_size>
 8007c1c:	69a3      	ldr	r3, [r4, #24]
 8007c1e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8007c22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8007c2c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c32:	f3c3 5441 	ubfx	r4, r3, #21, #2
 8007c36:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 8007c3a:	fa1f f088 	uxth.w	r0, r8
 8007c3e:	4125      	asrs	r5, r4
 8007c40:	3801      	subs	r0, #1
 8007c42:	1e4c      	subs	r4, r1, #1
 8007c44:	fb04 1100 	mla	r1, r4, r0, r1
 8007c48:	6439      	str	r1, [r7, #64]	; 0x40
 8007c4a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8007c4e:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 8007ff0 <forward_conv2d+0x4e8>
 8007c52:	fa1f f289 	uxth.w	r2, r9
 8007c56:	3a01      	subs	r2, #1
 8007c58:	1e48      	subs	r0, r1, #1
 8007c5a:	fb00 1102 	mla	r1, r0, r2, r1
 8007c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c62:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007c66:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	bf08      	it	eq
 8007c70:	4660      	moveq	r0, ip
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	b2ad      	uxth	r5, r5
 8007c76:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8007c7a:	f000 8533 	beq.w	80086e4 <forward_conv2d+0xbdc>
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	f000 8530 	beq.w	80086e4 <forward_conv2d+0xbdc>
 8007c84:	fa1f f38b 	uxth.w	r3, fp
 8007c88:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c90:	425b      	negs	r3, r3
 8007c92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c96:	2900      	cmp	r1, #0
 8007c98:	f000 8242 	beq.w	8008120 <forward_conv2d+0x618>
 8007c9c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007ca0:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 8007ca4:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 8007fec <forward_conv2d+0x4e4>
 8007ca8:	fb00 f305 	mul.w	r3, r0, r5
 8007cac:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 8007cb0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8007cb4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007cb8:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8007cbc:	663d      	str	r5, [r7, #96]	; 0x60
 8007cbe:	fa0f f288 	sxth.w	r2, r8
 8007cc2:	fb03 f400 	mul.w	r4, r3, r0
 8007cc6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8007cca:	fa1f f18a 	uxth.w	r1, sl
 8007cce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007cd2:	67bc      	str	r4, [r7, #120]	; 0x78
 8007cd4:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8007cd8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8007cdc:	4249      	negs	r1, r1
 8007cde:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	0081      	lsls	r1, r0, #2
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8007cec:	fb04 f200 	mul.w	r2, r4, r0
 8007cf0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8007cf4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8007cf8:	fb01 fc00 	mul.w	ip, r1, r0
 8007cfc:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 8007d00:	fb01 fc03 	mul.w	ip, r1, r3
 8007d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d06:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d14:	fa0f f689 	sxth.w	r6, r9
 8007d18:	469c      	mov	ip, r3
 8007d1a:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8007d1e:	4633      	mov	r3, r6
 8007d20:	fb0c f606 	mul.w	r6, ip, r6
 8007d24:	677e      	str	r6, [r7, #116]	; 0x74
 8007d26:	4666      	mov	r6, ip
 8007d28:	fb04 f606 	mul.w	r6, r4, r6
 8007d2c:	4686      	mov	lr, r0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8007d34:	62be      	str	r6, [r7, #40]	; 0x28
 8007d36:	fb01 f404 	mul.w	r4, r1, r4
 8007d3a:	fb03 f605 	mul.w	r6, r3, r5
 8007d3e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8007d40:	66bc      	str	r4, [r7, #104]	; 0x68
 8007d42:	460b      	mov	r3, r1
 8007d44:	4604      	mov	r4, r0
 8007d46:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8007d4a:	627e      	str	r6, [r7, #36]	; 0x24
 8007d4c:	fb05 f404 	mul.w	r4, r5, r4
 8007d50:	617c      	str	r4, [r7, #20]
 8007d52:	460c      	mov	r4, r1
 8007d54:	fb04 f403 	mul.w	r4, r4, r3
 8007d58:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007d5c:	65bc      	str	r4, [r7, #88]	; 0x58
 8007d5e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8007d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d66:	fb01 f104 	mul.w	r1, r1, r4
 8007d6a:	61b9      	str	r1, [r7, #24]
 8007d6c:	0091      	lsls	r1, r2, #2
 8007d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d74:	fb00 f202 	mul.w	r2, r0, r2
 8007d78:	0081      	lsls	r1, r0, #2
 8007d7a:	61f9      	str	r1, [r7, #28]
 8007d7c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8007d80:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8007d84:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8007d88:	011a      	lsls	r2, r3, #4
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d98:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007da0:	607a      	str	r2, [r7, #4]
 8007da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007da4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007db0:	2900      	cmp	r1, #0
 8007db2:	441a      	add	r2, r3
 8007db4:	bfb4      	ite	lt
 8007db6:	2100      	movlt	r1, #0
 8007db8:	2300      	movge	r3, #0
 8007dba:	4282      	cmp	r2, r0
 8007dbc:	bf28      	it	cs
 8007dbe:	4602      	movcs	r2, r0
 8007dc0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007dc4:	2801      	cmp	r0, #1
 8007dc6:	f000 8320 	beq.w	800840a <forward_conv2d+0x902>
 8007dca:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007dce:	4281      	cmp	r1, r0
 8007dd0:	f000 81c3 	beq.w	800815a <forward_conv2d+0x652>
 8007dd4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007dd8:	2900      	cmp	r1, #0
 8007dda:	f000 8182 	beq.w	80080e2 <forward_conv2d+0x5da>
 8007dde:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8007de2:	fb93 f1f0 	sdiv	r1, r3, r0
 8007de6:	fb00 3111 	mls	r1, r0, r1, r3
 8007dea:	1a41      	subs	r1, r0, r1
 8007dec:	1ad2      	subs	r2, r2, r3
 8007dee:	fb91 f5f0 	sdiv	r5, r1, r0
 8007df2:	fb00 1515 	mls	r5, r0, r5, r1
 8007df6:	1b52      	subs	r2, r2, r5
 8007df8:	4601      	mov	r1, r0
 8007dfa:	4402      	add	r2, r0
 8007dfc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8007e00:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 8007e04:	f8c7 b020 	str.w	fp, [r7, #32]
 8007e08:	4604      	mov	r4, r0
 8007e0a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007e0e:	fbb4 f4f0 	udiv	r4, r4, r0
 8007e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e14:	3a01      	subs	r2, #1
 8007e16:	fb92 f8f1 	sdiv	r8, r2, r1
 8007e1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007e1e:	eba0 0c04 	sub.w	ip, r0, r4
 8007e22:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007e26:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007e30:	fbb4 f2f2 	udiv	r2, r4, r2
 8007e34:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8007e38:	657a      	str	r2, [r7, #84]	; 0x54
 8007e3a:	441d      	add	r5, r3
 8007e3c:	fb0e f000 	mul.w	r0, lr, r0
 8007e40:	440b      	add	r3, r1
 8007e42:	eba6 0608 	sub.w	r6, r6, r8
 8007e46:	fb04 f505 	mul.w	r5, r4, r5
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8007e50:	fb93 f3f4 	sdiv	r3, r3, r4
 8007e54:	fb00 f406 	mul.w	r4, r0, r6
 8007e58:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8007e5c:	66fd      	str	r5, [r7, #108]	; 0x6c
 8007e5e:	0091      	lsls	r1, r2, #2
 8007e60:	fb00 f003 	mul.w	r0, r0, r3
 8007e64:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8007e68:	6538      	str	r0, [r7, #80]	; 0x50
 8007e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e6e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8007e72:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8007e76:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8007e7a:	1ac3      	subs	r3, r0, r3
 8007e7c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8007e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e84:	008b      	lsls	r3, r1, #2
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
 8007e88:	00d3      	lsls	r3, r2, #3
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8007ea2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ea4:	46c2      	mov	sl, r8
 8007ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eaa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007eae:	eb03 0c02 	add.w	ip, r3, r2
 8007eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f2c0 813b 	blt.w	8008132 <forward_conv2d+0x62a>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8007ec0:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007eda:	440a      	add	r2, r1
 8007edc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf94      	ite	ls
 8007ee4:	ebc6 0303 	rsbls	r3, r6, r3
 8007ee8:	ebc6 0301 	rsbhi	r3, r6, r1
 8007eec:	4415      	add	r5, r2
 8007eee:	1a1b      	subs	r3, r3, r0
 8007ef0:	00a4      	lsls	r4, r4, #2
 8007ef2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8007ef6:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 8007efa:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8007efe:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8007f00:	4602      	mov	r2, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	bf08      	it	eq
 8007f06:	4662      	moveq	r2, ip
 8007f08:	f108 31ff 	add.w	r1, r8, #4294967295
 8007f0c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007f10:	fb91 f1f0 	sdiv	r1, r1, r0
 8007f14:	4429      	add	r1, r5
 8007f16:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8007f1a:	fb0e 5501 	mla	r5, lr, r1, r5
 8007f1e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007f22:	4403      	add	r3, r0
 8007f24:	fb01 6104 	mla	r1, r1, r4, r6
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	fb93 f6f0 	sdiv	r6, r3, r0
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8007f34:	fb06 3110 	mls	r1, r6, r0, r3
 8007f38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f3c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007f40:	4562      	cmp	r2, ip
 8007f42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007f46:	bf08      	it	eq
 8007f48:	eeb0 6a48 	vmoveq.f32	s12, s16
 8007f4c:	1b9b      	subs	r3, r3, r6
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d076      	beq.n	8008040 <forward_conv2d+0x538>
 8007f52:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8007f56:	fb0e f803 	mul.w	r8, lr, r3
 8007f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f5c:	fb00 fb01 	mul.w	fp, r0, r1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d06d      	beq.n	8008040 <forward_conv2d+0x538>
 8007f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f68:	18d3      	adds	r3, r2, r3
 8007f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	633b      	str	r3, [r7, #48]	; 0x30
 8007f76:	2300      	movs	r3, #0
 8007f78:	667b      	str	r3, [r7, #100]	; 0x64
 8007f7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f80:	4413      	add	r3, r2
 8007f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f94:	ecf3 7a01 	vldmia	r3!, {s15}
 8007f98:	f1ba 0f00 	cmp.w	sl, #0
 8007f9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007fa0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007fa4:	f340 80c3 	ble.w	800812e <forward_conv2d+0x626>
 8007fa8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8007fac:	f04f 0c00 	mov.w	ip, #0
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	dd1f      	ble.n	8007ff4 <forward_conv2d+0x4ec>
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	eb00 040e 	add.w	r4, r0, lr
 8007fba:	4284      	cmp	r4, r0
 8007fbc:	d910      	bls.n	8007fe0 <forward_conv2d+0x4d8>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	ecb3 7a01 	vldmia	r3!, {s14}
 8007fc6:	ecf2 6a01 	vldmia	r2!, {s13}
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fd0:	d8f7      	bhi.n	8007fc2 <forward_conv2d+0x4ba>
 8007fd2:	43c3      	mvns	r3, r0
 8007fd4:	441c      	add	r4, r3
 8007fd6:	f024 0403 	bic.w	r4, r4, #3
 8007fda:	3404      	adds	r4, #4
 8007fdc:	4425      	add	r5, r4
 8007fde:	4420      	add	r0, r4
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	428e      	cmp	r6, r1
 8007fe4:	4448      	add	r0, r9
 8007fe6:	d1e6      	bne.n	8007fb6 <forward_conv2d+0x4ae>
 8007fe8:	e004      	b.n	8007ff4 <forward_conv2d+0x4ec>
 8007fea:	bf00      	nop
 8007fec:	00000000 	.word	0x00000000
 8007ff0:	0800774d 	.word	0x0800774d
 8007ff4:	f10c 0c01 	add.w	ip, ip, #1
 8007ff8:	45e2      	cmp	sl, ip
 8007ffa:	4458      	add	r0, fp
 8007ffc:	4445      	add	r5, r8
 8007ffe:	d1d7      	bne.n	8007fb0 <forward_conv2d+0x4a8>
 8008000:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008004:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008008:	441d      	add	r5, r3
 800800a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800800e:	ece3 7a01 	vstmia	r3!, {s15}
 8008012:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	4293      	cmp	r3, r2
 800801c:	d1b8      	bne.n	8007f90 <forward_conv2d+0x488>
 800801e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008026:	4472      	add	r2, lr
 8008028:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800802c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800802e:	1a52      	subs	r2, r2, r1
 8008030:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008034:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008038:	3301      	adds	r3, #1
 800803a:	429a      	cmp	r2, r3
 800803c:	667b      	str	r3, [r7, #100]	; 0x64
 800803e:	d19c      	bne.n	8007f7a <forward_conv2d+0x472>
 8008040:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8008044:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804a:	4608      	mov	r0, r1
 800804c:	4410      	add	r0, r2
 800804e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008052:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8008056:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800805a:	4401      	add	r1, r0
 800805c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8008060:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008064:	1a8a      	subs	r2, r1, r2
 8008066:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800806a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800806e:	3301      	adds	r3, #1
 8008070:	429a      	cmp	r2, r3
 8008072:	673b      	str	r3, [r7, #112]	; 0x70
 8008074:	f47f af17 	bne.w	8007ea6 <forward_conv2d+0x39e>
 8008078:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800807c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008080:	b37b      	cbz	r3, 80080e2 <forward_conv2d+0x5da>
 8008082:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8008086:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800808a:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800808e:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8008092:	2500      	movs	r5, #0
 8008094:	46a2      	mov	sl, r4
 8008096:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800809a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800809e:	f8c2 a008 	str.w	sl, [r2, #8]
 80080a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80080a6:	4633      	mov	r3, r6
 80080a8:	4641      	mov	r1, r8
 80080aa:	4416      	add	r6, r2
 80080ac:	4640      	mov	r0, r8
 80080ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80080b2:	47a0      	blx	r4
 80080b4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80080b8:	4492      	add	sl, r2
 80080ba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80080be:	eba6 0309 	sub.w	r3, r6, r9
 80080c2:	4293      	cmp	r3, r2
 80080c4:	bfa8      	it	ge
 80080c6:	464e      	movge	r6, r9
 80080c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80080cc:	3501      	adds	r5, #1
 80080ce:	42ab      	cmp	r3, r5
 80080d0:	d1e1      	bne.n	8008096 <forward_conv2d+0x58e>
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 80080dc:	4413      	add	r3, r2
 80080de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	609a      	str	r2, [r3, #8]
 80080ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f4:	4610      	mov	r0, r2
 80080f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080fa:	4418      	add	r0, r3
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008108:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800810c:	4413      	add	r3, r2
 800810e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008116:	3101      	adds	r1, #1
 8008118:	428b      	cmp	r3, r1
 800811a:	67f9      	str	r1, [r7, #124]	; 0x7c
 800811c:	f47f ae42 	bne.w	8007da4 <forward_conv2d+0x29c>
 8008120:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008124:	46bd      	mov	sp, r7
 8008126:	ecbd 8b10 	vpop	{d8-d15}
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812e:	461a      	mov	r2, r3
 8008130:	e768      	b.n	8008004 <forward_conv2d+0x4fc>
 8008132:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008136:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800813a:	fb90 f3f2 	sdiv	r3, r0, r2
 800813e:	fb02 0313 	mls	r3, r2, r3, r0
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	4605      	mov	r5, r0
 8008146:	fb93 f0f2 	sdiv	r0, r3, r2
 800814a:	fb02 3010 	mls	r0, r2, r0, r3
 800814e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008150:	462e      	mov	r6, r5
 8008152:	18c4      	adds	r4, r0, r3
 8008154:	eb02 0805 	add.w	r8, r2, r5
 8008158:	e6b6      	b.n	8007ec8 <forward_conv2d+0x3c0>
 800815a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800815c:	2901      	cmp	r1, #1
 800815e:	f47f ae39 	bne.w	8007dd4 <forward_conv2d+0x2cc>
 8008162:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008166:	2900      	cmp	r1, #0
 8008168:	d0bb      	beq.n	80080e2 <forward_conv2d+0x5da>
 800816a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800816e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008172:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 8008176:	fbb1 f5f0 	udiv	r5, r1, r0
 800817a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800817e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008182:	633d      	str	r5, [r7, #48]	; 0x30
 8008184:	1ad2      	subs	r2, r2, r3
 8008186:	1a8c      	subs	r4, r1, r2
 8008188:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800818c:	00b2      	lsls	r2, r6, #2
 800818e:	fb02 f204 	mul.w	r2, r2, r4
 8008192:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 8008196:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800819a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800819c:	0082      	lsls	r2, r0, #2
 800819e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80081a0:	00ca      	lsls	r2, r1, #3
 80081a2:	603a      	str	r2, [r7, #0]
 80081a4:	00aa      	lsls	r2, r5, #2
 80081a6:	60ba      	str	r2, [r7, #8]
 80081a8:	fb03 f206 	mul.w	r2, r3, r6
 80081ac:	673a      	str	r2, [r7, #112]	; 0x70
 80081ae:	69fa      	ldr	r2, [r7, #28]
 80081b0:	fb02 f303 	mul.w	r3, r2, r3
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
 80081b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80081c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80081ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081ce:	2300      	movs	r3, #0
 80081d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f2c0 8110 	blt.w	80083fe <forward_conv2d+0x8f6>
 80081de:	2100      	movs	r1, #0
 80081e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081e2:	460a      	mov	r2, r1
 80081e4:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 80081e8:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80081ec:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 80081f0:	4420      	add	r0, r4
 80081f2:	4408      	add	r0, r1
 80081f4:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80081f8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80081fc:	190c      	adds	r4, r1, r4
 80081fe:	42ac      	cmp	r4, r5
 8008200:	bf28      	it	cs
 8008202:	462c      	movcs	r4, r5
 8008204:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 8008208:	0080      	lsls	r0, r0, #2
 800820a:	1aa4      	subs	r4, r4, r2
 800820c:	2d00      	cmp	r5, #0
 800820e:	f000 80e7 	beq.w	80083e0 <forward_conv2d+0x8d8>
 8008212:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008216:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800821a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800821e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008222:	42b5      	cmp	r5, r6
 8008224:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008228:	eba3 0204 	sub.w	r2, r3, r4
 800822c:	eba1 0104 	sub.w	r1, r1, r4
 8008230:	bf08      	it	eq
 8008232:	eef0 3a48 	vmoveq.f32	s7, s16
 8008236:	462b      	mov	r3, r5
 8008238:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800823a:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800823e:	4428      	add	r0, r5
 8008240:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 8008244:	fb05 6e00 	mla	lr, r5, r0, r6
 8008248:	eb0e 000b 	add.w	r0, lr, fp
 800824c:	4586      	cmp	lr, r0
 800824e:	6238      	str	r0, [r7, #32]
 8008250:	f080 80a5 	bcs.w	800839e <forward_conv2d+0x896>
 8008254:	0092      	lsls	r2, r2, #2
 8008256:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800825a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825c:	fb0b f101 	mul.w	r1, fp, r1
 8008260:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008264:	f024 0803 	bic.w	r8, r4, #3
 8008268:	2a00      	cmp	r2, #0
 800826a:	f000 8098 	beq.w	800839e <forward_conv2d+0x896>
 800826e:	f108 32ff 	add.w	r2, r8, #4294967295
 8008272:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008274:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008278:	0892      	lsrs	r2, r2, #2
 800827a:	3201      	adds	r2, #1
 800827c:	4401      	add	r1, r0
 800827e:	fb02 f00a 	mul.w	r0, r2, sl
 8008282:	6578      	str	r0, [r7, #84]	; 0x54
 8008284:	0110      	lsls	r0, r2, #4
 8008286:	0092      	lsls	r2, r2, #2
 8008288:	653a      	str	r2, [r7, #80]	; 0x50
 800828a:	1aca      	subs	r2, r1, r3
 800828c:	613a      	str	r2, [r7, #16]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	6678      	str	r0, [r7, #100]	; 0x64
 8008292:	4413      	add	r3, r2
 8008294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008298:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800829c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829e:	4413      	add	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4413      	add	r3, r2
 80082aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b0:	ecf3 6a01 	vldmia	r3!, {s13}
 80082b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082bc:	2b00      	cmp	r3, #0
 80082be:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80082c2:	dd57      	ble.n	8008374 <forward_conv2d+0x86c>
 80082c4:	4676      	mov	r6, lr
 80082c6:	f04f 0c00 	mov.w	ip, #0
 80082ca:	f1b8 0f00 	cmp.w	r8, #0
 80082ce:	f340 8085 	ble.w	80083dc <forward_conv2d+0x8d4>
 80082d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80082d6:	f109 0310 	add.w	r3, r9, #16
 80082da:	18b1      	adds	r1, r6, r2
 80082dc:	2000      	movs	r0, #0
 80082de:	4632      	mov	r2, r6
 80082e0:	eb02 050b 	add.w	r5, r2, fp
 80082e4:	ed95 7a00 	vldr	s14, [r5]
 80082e8:	ed53 7a03 	vldr	s15, [r3, #-12]
 80082ec:	ed92 4a00 	vldr	s8, [r2]
 80082f0:	ed53 4a04 	vldr	s9, [r3, #-16]
 80082f4:	ed91 5a00 	vldr	s10, [r1]
 80082f8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80082fc:	ed13 6a01 	vldr	s12, [r3, #-4]
 8008300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008304:	eb01 050b 	add.w	r5, r1, fp
 8008308:	eee4 7a24 	vfma.f32	s15, s8, s9
 800830c:	3004      	adds	r0, #4
 800830e:	4540      	cmp	r0, r8
 8008310:	ed95 7a00 	vldr	s14, [r5]
 8008314:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008318:	4452      	add	r2, sl
 800831a:	4451      	add	r1, sl
 800831c:	f103 0310 	add.w	r3, r3, #16
 8008320:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008324:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008328:	dbda      	blt.n	80082e0 <forward_conv2d+0x7d8>
 800832a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800832c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800832e:	441e      	add	r6, r3
 8008330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008332:	4499      	add	r9, r3
 8008334:	42a0      	cmp	r0, r4
 8008336:	da11      	bge.n	800835c <forward_conv2d+0x854>
 8008338:	4602      	mov	r2, r0
 800833a:	4633      	mov	r3, r6
 800833c:	4649      	mov	r1, r9
 800833e:	edd3 7a00 	vldr	s15, [r3]
 8008342:	ecb1 7a01 	vldmia	r1!, {s14}
 8008346:	3201      	adds	r2, #1
 8008348:	42a2      	cmp	r2, r4
 800834a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800834e:	445b      	add	r3, fp
 8008350:	d1f5      	bne.n	800833e <forward_conv2d+0x836>
 8008352:	1a20      	subs	r0, r4, r0
 8008354:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8008358:	fb00 660b 	mla	r6, r0, fp, r6
 800835c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008360:	441e      	add	r6, r3
 8008362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008366:	4499      	add	r9, r3
 8008368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800836c:	f10c 0c01 	add.w	ip, ip, #1
 8008370:	4563      	cmp	r3, ip
 8008372:	d1aa      	bne.n	80082ca <forward_conv2d+0x7c2>
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	4499      	add	r9, r3
 8008378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837a:	ece3 6a01 	vstmia	r3!, {s13}
 800837e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008380:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8008384:	4293      	cmp	r3, r2
 8008386:	d191      	bne.n	80082ac <forward_conv2d+0x7a4>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	1a9b      	subs	r3, r3, r2
 800838e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f10e 0e04 	add.w	lr, lr, #4
 8008398:	459e      	cmp	lr, r3
 800839a:	f4ff af7d 	bcc.w	8008298 <forward_conv2d+0x790>
 800839e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80083a2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80083a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083aa:	440a      	add	r2, r1
 80083ac:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80083b0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80083b4:	4608      	mov	r0, r1
 80083b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80083ba:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80083be:	4410      	add	r0, r2
 80083c0:	1a8a      	subs	r2, r1, r2
 80083c2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80083c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80083ca:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80083ce:	3301      	adds	r3, #1
 80083d0:	429a      	cmp	r2, r3
 80083d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80083d6:	f47f aefd 	bne.w	80081d4 <forward_conv2d+0x6cc>
 80083da:	e64f      	b.n	800807c <forward_conv2d+0x574>
 80083dc:	2000      	movs	r0, #0
 80083de:	e7a9      	b.n	8008334 <forward_conv2d+0x82c>
 80083e0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80083e4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80083e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ec:	1b19      	subs	r1, r3, r4
 80083ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80083f2:	eef0 3a48 	vmov.f32	s7, s16
 80083f6:	1b1a      	subs	r2, r3, r4
 80083f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80083fc:	e71c      	b.n	8008238 <forward_conv2d+0x730>
 80083fe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8008402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008404:	460a      	mov	r2, r1
 8008406:	440b      	add	r3, r1
 8008408:	e6ec      	b.n	80081e4 <forward_conv2d+0x6dc>
 800840a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800840c:	2801      	cmp	r0, #1
 800840e:	f47f ace1 	bne.w	8007dd4 <forward_conv2d+0x2cc>
 8008412:	1ad2      	subs	r2, r2, r3
 8008414:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008416:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800841a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800841e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008420:	fb00 4101 	mla	r1, r0, r1, r4
 8008424:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008428:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800842c:	f080 8191 	bcs.w	8008752 <forward_conv2d+0xc4a>
 8008430:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008434:	2a00      	cmp	r2, #0
 8008436:	f43f ae21 	beq.w	800807c <forward_conv2d+0x574>
 800843a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800843c:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8008440:	fb02 f303 	mul.w	r3, r2, r3
 8008444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008446:	667b      	str	r3, [r7, #100]	; 0x64
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800844c:	188b      	adds	r3, r1, r2
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008468:	2300      	movs	r3, #0
 800846a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800846e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8133 	beq.w	80086de <forward_conv2d+0xbd6>
 8008478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800847c:	ed93 6a00 	vldr	s12, [r3]
 8008480:	3304      	adds	r3, #4
 8008482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008486:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 8101 	beq.w	8008692 <forward_conv2d+0xb8a>
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008494:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008498:	eb03 0802 	add.w	r8, r3, r2
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ac:	673b      	str	r3, [r7, #112]	; 0x70
 80084ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084b6:	f04f 0b00 	mov.w	fp, #0
 80084ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f2c0 8104 	blt.w	80086cc <forward_conv2d+0xbc4>
 80084c4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80084c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084ca:	2300      	movs	r3, #0
 80084cc:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 80084d0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80084d4:	eb02 0c04 	add.w	ip, r2, r4
 80084d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80084dc:	4540      	cmp	r0, r8
 80084de:	bf94      	ite	ls
 80084e0:	ebc3 0300 	rsbls	r3, r3, r0
 80084e4:	ebc3 0308 	rsbhi	r3, r3, r8
 80084e8:	eba2 0903 	sub.w	r9, r2, r3
 80084ec:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80084f0:	1ac4      	subs	r4, r0, r3
 80084f2:	fb03 f302 	mul.w	r3, r3, r2
 80084f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	f340 80e3 	ble.w	80086c6 <forward_conv2d+0xbbe>
 8008500:	f023 050f 	bic.w	r5, r3, #15
 8008504:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8008508:	1e68      	subs	r0, r5, #1
 800850a:	0900      	lsrs	r0, r0, #4
 800850c:	3001      	adds	r0, #1
 800850e:	fb06 f204 	mul.w	r2, r6, r4
 8008512:	657a      	str	r2, [r7, #84]	; 0x54
 8008514:	0102      	lsls	r2, r0, #4
 8008516:	653a      	str	r2, [r7, #80]	; 0x50
 8008518:	fb06 f909 	mul.w	r9, r6, r9
 800851c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8008520:	eef0 6a46 	vmov.f32	s13, s12
 8008524:	f04f 0e00 	mov.w	lr, #0
 8008528:	4662      	mov	r2, ip
 800852a:	2d00      	cmp	r5, #0
 800852c:	f340 80c9 	ble.w	80086c2 <forward_conv2d+0xbba>
 8008530:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008534:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008538:	2600      	movs	r6, #0
 800853a:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800853e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008542:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008546:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800854a:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800854e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8008552:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8008556:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800855a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800855e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8008562:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8008566:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800856a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800856e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8008572:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8008576:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800857a:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800857e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8008582:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8008586:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800858a:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800858e:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008592:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8008596:	ed50 3a04 	vldr	s7, [r0, #-16]
 800859a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800859e:	ed50 4a03 	vldr	s9, [r0, #-12]
 80085a2:	ed14 5a03 	vldr	s10, [r4, #-12]
 80085a6:	ed50 5a02 	vldr	s11, [r0, #-8]
 80085aa:	ed14 7a02 	vldr	s14, [r4, #-8]
 80085ae:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80085b2:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 80085b6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80085ba:	3610      	adds	r6, #16
 80085bc:	42ae      	cmp	r6, r5
 80085be:	ed14 fa01 	vldr	s30, [r4, #-4]
 80085c2:	ed50 ea01 	vldr	s29, [r0, #-4]
 80085c6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80085ca:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80085ce:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80085d2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80085d6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80085da:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80085de:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80085e2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80085e6:	eee8 7a80 	vfma.f32	s15, s17, s0
 80085ea:	eee0 7a81 	vfma.f32	s15, s1, s2
 80085ee:	eee1 7a82 	vfma.f32	s15, s3, s4
 80085f2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80085f6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80085fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80085fe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008602:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008606:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800860a:	db96      	blt.n	800853a <forward_conv2d+0xa32>
 800860c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800860e:	4451      	add	r1, sl
 8008610:	4452      	add	r2, sl
 8008612:	4283      	cmp	r3, r0
 8008614:	dd0f      	ble.n	8008636 <forward_conv2d+0xb2e>
 8008616:	4604      	mov	r4, r0
 8008618:	468c      	mov	ip, r1
 800861a:	4616      	mov	r6, r2
 800861c:	ecb6 7a01 	vldmia	r6!, {s14}
 8008620:	ecfc 7a01 	vldmia	ip!, {s15}
 8008624:	3401      	adds	r4, #1
 8008626:	42a3      	cmp	r3, r4
 8008628:	eee7 6a27 	vfma.f32	s13, s14, s15
 800862c:	d1f6      	bne.n	800861c <forward_conv2d+0xb14>
 800862e:	1a18      	subs	r0, r3, r0
 8008630:	0080      	lsls	r0, r0, #2
 8008632:	4402      	add	r2, r0
 8008634:	4401      	add	r1, r0
 8008636:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008638:	4402      	add	r2, r0
 800863a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800863e:	f10e 0e01 	add.w	lr, lr, #1
 8008642:	4570      	cmp	r0, lr
 8008644:	4449      	add	r1, r9
 8008646:	f47f af70 	bne.w	800852a <forward_conv2d+0xa22>
 800864a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800864e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008650:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008654:	edc3 6a00 	vstr	s13, [r3]
 8008658:	4608      	mov	r0, r1
 800865a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800865e:	440b      	add	r3, r1
 8008660:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008664:	673b      	str	r3, [r7, #112]	; 0x70
 8008666:	4410      	add	r0, r2
 8008668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800866a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800866e:	4608      	mov	r0, r1
 8008670:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008674:	4418      	add	r0, r3
 8008676:	1acb      	subs	r3, r1, r3
 8008678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800867c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008680:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8008684:	f10b 0b01 	add.w	fp, fp, #1
 8008688:	455b      	cmp	r3, fp
 800868a:	eba8 0802 	sub.w	r8, r8, r2
 800868e:	f47f af14 	bne.w	80084ba <forward_conv2d+0x9b2>
 8008692:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800869c:	440a      	add	r2, r1
 800869e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80086a6:	3204      	adds	r2, #4
 80086a8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80086ac:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80086b0:	3301      	adds	r3, #1
 80086b2:	429a      	cmp	r2, r3
 80086b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086b8:	f47f aed9 	bne.w	800846e <forward_conv2d+0x966>
 80086bc:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 80086c0:	e4dc      	b.n	800807c <forward_conv2d+0x574>
 80086c2:	2000      	movs	r0, #0
 80086c4:	e7a5      	b.n	8008612 <forward_conv2d+0xb0a>
 80086c6:	eef0 6a46 	vmov.f32	s13, s12
 80086ca:	e7be      	b.n	800864a <forward_conv2d+0xb42>
 80086cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80086d4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80086d8:	eba8 0303 	sub.w	r3, r8, r3
 80086dc:	e6f6      	b.n	80084cc <forward_conv2d+0x9c4>
 80086de:	eeb0 6a48 	vmov.f32	s12, s16
 80086e2:	e6d0      	b.n	8008486 <forward_conv2d+0x97e>
 80086e4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80086e8:	68ca      	ldr	r2, [r1, #12]
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	f43f aaca 	beq.w	8007c84 <forward_conv2d+0x17c>
 80086f0:	69b3      	ldr	r3, [r6, #24]
 80086f2:	8818      	ldrh	r0, [r3, #0]
 80086f4:	2803      	cmp	r0, #3
 80086f6:	f240 819f 	bls.w	8008a38 <forward_conv2d+0xf30>
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	b32b      	cbz	r3, 800874c <forward_conv2d+0xc44>
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	b31b      	cbz	r3, 800874c <forward_conv2d+0xc44>
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	6889      	ldr	r1, [r1, #8]
 8008708:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8008712:	9000      	str	r0, [sp, #0]
 8008714:	462b      	mov	r3, r5
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff f9a6 	bl	8007a68 <ai_dict_decompress_f32>
 800871c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008720:	2c00      	cmp	r4, #0
 8008722:	bf18      	it	ne
 8008724:	4623      	movne	r3, r4
 8008726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800872a:	f7ff baab 	b.w	8007c84 <forward_conv2d+0x17c>
 800872e:	2800      	cmp	r0, #0
 8008730:	f000 8185 	beq.w	8008a3e <forward_conv2d+0xf36>
 8008734:	6883      	ldr	r3, [r0, #8]
 8008736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800873a:	2301      	movs	r3, #1
 800873c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008740:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008748:	f7ff ba6d 	b.w	8007c26 <forward_conv2d+0x11e>
 800874c:	2300      	movs	r3, #0
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	deff      	udf	#255	; 0xff
 8008752:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008756:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800875a:	320a      	adds	r2, #10
 800875c:	f022 0207 	bic.w	r2, r2, #7
 8008760:	ebad 0d02 	sub.w	sp, sp, r2
 8008764:	aa02      	add	r2, sp, #8
 8008766:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800876a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800876e:	2a00      	cmp	r2, #0
 8008770:	f000 814d 	beq.w	8008a0e <forward_conv2d+0xf06>
 8008774:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008776:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008780:	657b      	str	r3, [r7, #84]	; 0x54
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008786:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800878a:	4413      	add	r3, r2
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800879a:	673b      	str	r3, [r7, #112]	; 0x70
 800879c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087ac:	b13b      	cbz	r3, 80087be <forward_conv2d+0xcb6>
 80087ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80087b2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80087b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80087ba:	f002 f88b 	bl	800a8d4 <memcpy>
 80087be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 8135 	beq.w	8008a32 <forward_conv2d+0xf2a>
 80087c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ca:	ed93 6a00 	vldr	s12, [r3]
 80087ce:	3304      	adds	r3, #4
 80087d0:	673b      	str	r3, [r7, #112]	; 0x70
 80087d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8101 	beq.w	80089de <forward_conv2d+0xed6>
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087e4:	eb03 0802 	add.w	r8, r3, r2
 80087e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80087fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008802:	f04f 0b00 	mov.w	fp, #0
 8008806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800880a:	2b00      	cmp	r3, #0
 800880c:	f2c0 8108 	blt.w	8008a20 <forward_conv2d+0xf18>
 8008810:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8008814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008816:	2300      	movs	r3, #0
 8008818:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800881c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8008820:	eb02 0c04 	add.w	ip, r2, r4
 8008824:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008828:	4540      	cmp	r0, r8
 800882a:	bf94      	ite	ls
 800882c:	ebc3 0300 	rsbls	r3, r3, r0
 8008830:	ebc3 0308 	rsbhi	r3, r3, r8
 8008834:	eba2 0903 	sub.w	r9, r2, r3
 8008838:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800883c:	1ac4      	subs	r4, r0, r3
 800883e:	fb03 f302 	mul.w	r3, r3, r2
 8008842:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008846:	2a00      	cmp	r2, #0
 8008848:	f340 80e7 	ble.w	8008a1a <forward_conv2d+0xf12>
 800884c:	f023 050f 	bic.w	r5, r3, #15
 8008850:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8008854:	1e68      	subs	r0, r5, #1
 8008856:	0900      	lsrs	r0, r0, #4
 8008858:	3001      	adds	r0, #1
 800885a:	fb06 f204 	mul.w	r2, r6, r4
 800885e:	653a      	str	r2, [r7, #80]	; 0x50
 8008860:	0102      	lsls	r2, r0, #4
 8008862:	633a      	str	r2, [r7, #48]	; 0x30
 8008864:	fb06 f909 	mul.w	r9, r6, r9
 8008868:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800886c:	eef0 6a46 	vmov.f32	s13, s12
 8008870:	f04f 0e00 	mov.w	lr, #0
 8008874:	4662      	mov	r2, ip
 8008876:	2d00      	cmp	r5, #0
 8008878:	f340 80cd 	ble.w	8008a16 <forward_conv2d+0xf0e>
 800887c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8008880:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008884:	2600      	movs	r6, #0
 8008886:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800888a:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800888e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8008892:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8008896:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800889a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800889e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80088a2:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 80088a6:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 80088aa:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 80088ae:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 80088b2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 80088b6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80088ba:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80088be:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80088c2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80088c6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80088ca:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80088ce:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80088d2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80088d6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80088da:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80088de:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80088e2:	ed54 3a04 	vldr	s7, [r4, #-16]
 80088e6:	ed10 4a04 	vldr	s8, [r0, #-16]
 80088ea:	ed50 4a03 	vldr	s9, [r0, #-12]
 80088ee:	ed14 5a03 	vldr	s10, [r4, #-12]
 80088f2:	ed54 5a02 	vldr	s11, [r4, #-8]
 80088f6:	ed10 7a02 	vldr	s14, [r0, #-8]
 80088fa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80088fe:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8008902:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008906:	3610      	adds	r6, #16
 8008908:	42b5      	cmp	r5, r6
 800890a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800890e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8008912:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8008916:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800891a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800891e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008922:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008926:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800892a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800892e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008932:	eee8 7a80 	vfma.f32	s15, s17, s0
 8008936:	eee0 7a81 	vfma.f32	s15, s1, s2
 800893a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800893e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008942:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008946:	eee4 7a85 	vfma.f32	s15, s9, s10
 800894a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800894e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8008952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008956:	dc96      	bgt.n	8008886 <forward_conv2d+0xd7e>
 8008958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895a:	4451      	add	r1, sl
 800895c:	4452      	add	r2, sl
 800895e:	4283      	cmp	r3, r0
 8008960:	dd0f      	ble.n	8008982 <forward_conv2d+0xe7a>
 8008962:	4604      	mov	r4, r0
 8008964:	468c      	mov	ip, r1
 8008966:	4616      	mov	r6, r2
 8008968:	ecb6 7a01 	vldmia	r6!, {s14}
 800896c:	ecfc 7a01 	vldmia	ip!, {s15}
 8008970:	3401      	adds	r4, #1
 8008972:	42a3      	cmp	r3, r4
 8008974:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008978:	d1f6      	bne.n	8008968 <forward_conv2d+0xe60>
 800897a:	1a18      	subs	r0, r3, r0
 800897c:	0080      	lsls	r0, r0, #2
 800897e:	4402      	add	r2, r0
 8008980:	4401      	add	r1, r0
 8008982:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008984:	4402      	add	r2, r0
 8008986:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800898a:	f10e 0e01 	add.w	lr, lr, #1
 800898e:	4570      	cmp	r0, lr
 8008990:	4449      	add	r1, r9
 8008992:	f47f af70 	bne.w	8008876 <forward_conv2d+0xd6e>
 8008996:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800899a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80089a0:	edc3 6a00 	vstr	s13, [r3]
 80089a4:	4608      	mov	r0, r1
 80089a6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80089aa:	440b      	add	r3, r1
 80089ac:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80089b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089b2:	4410      	add	r0, r2
 80089b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80089ba:	4608      	mov	r0, r1
 80089bc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80089c0:	4418      	add	r0, r3
 80089c2:	1acb      	subs	r3, r1, r3
 80089c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80089c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80089cc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80089d0:	f10b 0b01 	add.w	fp, fp, #1
 80089d4:	455b      	cmp	r3, fp
 80089d6:	eba8 0802 	sub.w	r8, r8, r2
 80089da:	f47f af14 	bne.w	8008806 <forward_conv2d+0xcfe>
 80089de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80089e2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80089e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ea:	440a      	add	r2, r1
 80089ec:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80089f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80089f4:	3204      	adds	r2, #4
 80089f6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80089fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80089fe:	3301      	adds	r3, #1
 8008a00:	429a      	cmp	r2, r3
 8008a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a06:	f47f aed0 	bne.w	80087aa <forward_conv2d+0xca2>
 8008a0a:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 8008a0e:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 8008a12:	f7ff bb33 	b.w	800807c <forward_conv2d+0x574>
 8008a16:	2000      	movs	r0, #0
 8008a18:	e7a1      	b.n	800895e <forward_conv2d+0xe56>
 8008a1a:	eef0 6a46 	vmov.f32	s13, s12
 8008a1e:	e7ba      	b.n	8008996 <forward_conv2d+0xe8e>
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a28:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8008a2c:	eba8 0303 	sub.w	r3, r8, r3
 8008a30:	e6f2      	b.n	8008818 <forward_conv2d+0xd10>
 8008a32:	eeb0 6a48 	vmov.f32	s12, s16
 8008a36:	e6cc      	b.n	80087d2 <forward_conv2d+0xcca>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	deff      	udf	#255	; 0xff
 8008a3e:	4603      	mov	r3, r0
 8008a40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a52:	f7ff b8e8 	b.w	8007c26 <forward_conv2d+0x11e>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0f2      	beq.n	8008a40 <forward_conv2d+0xf38>
 8008a5a:	6882      	ldr	r2, [r0, #8]
 8008a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a60:	2301      	movs	r3, #1
 8008a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a66:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008a6e:	f7ff b8da 	b.w	8007c26 <forward_conv2d+0x11e>
 8008a72:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008a76:	f7ff b8b7 	b.w	8007be8 <forward_conv2d+0xe0>
 8008a7a:	3318      	adds	r3, #24
 8008a7c:	d007      	beq.n	8008a8e <forward_conv2d+0xf86>
 8008a7e:	462a      	mov	r2, r5
 8008a80:	462c      	mov	r4, r5
 8008a82:	462b      	mov	r3, r5
 8008a84:	f7ff b86a 	b.w	8007b5c <forward_conv2d+0x54>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	deff      	udf	#255	; 0xff
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	deff      	udf	#255	; 0xff
 8008a92:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8008a96:	f7ff b850 	b.w	8007b3a <forward_conv2d+0x32>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	deff      	udf	#255	; 0xff
 8008aa0:	6853      	ldr	r3, [r2, #4]
 8008aa2:	deff      	udf	#255	; 0xff
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f7ff b858 	b.w	8007b5a <forward_conv2d+0x52>
 8008aaa:	bf00      	nop

08008aac <forward_conv2d_nl_pool>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	ed2d 8b10 	vpush	{d8-d15}
 8008ab4:	b0e1      	sub	sp, #388	; 0x184
 8008ab6:	6983      	ldr	r3, [r0, #24]
 8008ab8:	881e      	ldrh	r6, [r3, #0]
 8008aba:	af0a      	add	r7, sp, #40	; 0x28
 8008abc:	2e00      	cmp	r6, #0
 8008abe:	f000 859b 	beq.w	80095f8 <forward_conv2d_nl_pool+0xb4c>
 8008ac2:	6859      	ldr	r1, [r3, #4]
 8008ac4:	684a      	ldr	r2, [r1, #4]
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	f000 8593 	beq.w	80095f2 <forward_conv2d_nl_pool+0xb46>
 8008acc:	f8d2 c000 	ldr.w	ip, [r2]
 8008ad0:	2e01      	cmp	r6, #1
 8008ad2:	f240 858b 	bls.w	80095ec <forward_conv2d_nl_pool+0xb40>
 8008ad6:	690a      	ldr	r2, [r1, #16]
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	f000 8582 	beq.w	80095e2 <forward_conv2d_nl_pool+0xb36>
 8008ade:	f8d2 9000 	ldr.w	r9, [r2]
 8008ae2:	2e02      	cmp	r6, #2
 8008ae4:	f000 8582 	beq.w	80095ec <forward_conv2d_nl_pool+0xb40>
 8008ae8:	69cd      	ldr	r5, [r1, #28]
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	f000 8571 	beq.w	80095d2 <forward_conv2d_nl_pool+0xb26>
 8008af0:	682a      	ldr	r2, [r5, #0]
 8008af2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008af6:	f111 0218 	adds.w	r2, r1, #24
 8008afa:	d004      	beq.n	8008b06 <forward_conv2d_nl_pool+0x5a>
 8008afc:	8b0a      	ldrh	r2, [r1, #24]
 8008afe:	2a01      	cmp	r2, #1
 8008b00:	f240 857c 	bls.w	80095fc <forward_conv2d_nl_pool+0xb50>
 8008b04:	686a      	ldr	r2, [r5, #4]
 8008b06:	68a9      	ldr	r1, [r5, #8]
 8008b08:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008b0a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8008b0e:	f8dc b018 	ldr.w	fp, [ip, #24]
 8008b12:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8008b16:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8008b1a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008b1e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8008b22:	f8db 4008 	ldr.w	r4, [fp, #8]
 8008b26:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8008b2a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008b2e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8008b32:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8008b36:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8008b3a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008b3e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b42:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8008b46:	f8de 4004 	ldr.w	r4, [lr, #4]
 8008b4a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8008b4e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8008b52:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8008b56:	f8de 4008 	ldr.w	r4, [lr, #8]
 8008b5a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8008b5e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008b62:	6824      	ldr	r4, [r4, #0]
 8008b64:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8008b68:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008b6c:	6864      	ldr	r4, [r4, #4]
 8008b6e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8008b72:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008b76:	68a5      	ldr	r5, [r4, #8]
 8008b78:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008b7c:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8008b80:	f8da 4008 	ldr.w	r4, [sl, #8]
 8008b84:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8008b88:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8008b8a:	6824      	ldr	r4, [r4, #0]
 8008b8c:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8008b90:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8008b92:	6864      	ldr	r4, [r4, #4]
 8008b94:	643c      	str	r4, [r7, #64]	; 0x40
 8008b96:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8008b9a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8008b9e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008ba0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8008ba4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008ba6:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8008baa:	69c4      	ldr	r4, [r0, #28]
 8008bac:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8008bb0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008bb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8008bb4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008bb6:	647c      	str	r4, [r7, #68]	; 0x44
 8008bb8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8008bba:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8008bbe:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8008bc2:	2a00      	cmp	r2, #0
 8008bc4:	f000 84f8 	beq.w	80095b8 <forward_conv2d_nl_pool+0xb0c>
 8008bc8:	6992      	ldr	r2, [r2, #24]
 8008bca:	6892      	ldr	r2, [r2, #8]
 8008bcc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	6a00      	ldr	r0, [r0, #32]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	f000 84e4 	beq.w	80095a2 <forward_conv2d_nl_pool+0xaf6>
 8008bda:	698a      	ldr	r2, [r1, #24]
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	f000 8533 	beq.w	8009648 <forward_conv2d_nl_pool+0xb9c>
 8008be2:	694b      	ldr	r3, [r1, #20]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bea:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008bee:	6893      	ldr	r3, [r2, #8]
 8008bf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bf4:	f001 fe1a 	bl	800a82c <ai_array_get_byte_size>
 8008bf8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008bfc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008c00:	881e      	ldrh	r6, [r3, #0]
 8008c02:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8008c06:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8008c0a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8008c0e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008c10:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8008c14:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008c18:	fa11 f585 	uxtah	r5, r1, r5
 8008c1c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008c20:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008c24:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8008c28:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008c2c:	3901      	subs	r1, #1
 8008c2e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8008c32:	eb05 0e00 	add.w	lr, r5, r0
 8008c36:	fa1f f28a 	uxth.w	r2, sl
 8008c3a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8008c3e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8008c42:	f8dc 4000 	ldr.w	r4, [ip]
 8008c46:	f8dc 1000 	ldr.w	r1, [ip]
 8008c4a:	3a01      	subs	r2, #1
 8008c4c:	fb00 5002 	mla	r0, r0, r2, r5
 8008c50:	fa1f f28b 	uxth.w	r2, fp
 8008c54:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8008c58:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8008c5c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8008c60:	1e50      	subs	r0, r2, #1
 8008c62:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8008c66:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8008c6a:	fa44 f101 	asr.w	r1, r4, r1
 8008c6e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008c72:	f8dc 4000 	ldr.w	r4, [ip]
 8008c76:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008c7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008c7e:	f3c4 4543 	ubfx	r5, r4, #17, #4
 8008c82:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8008c86:	ebae 0202 	sub.w	r2, lr, r2
 8008c8a:	fa1f fe81 	uxth.w	lr, r1
 8008c8e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8008c92:	fbb2 f2f1 	udiv	r2, r2, r1
 8008c96:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8008c9a:	3c01      	subs	r4, #1
 8008c9c:	fb04 1100 	mla	r1, r4, r0, r1
 8008ca0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008ca4:	1c51      	adds	r1, r2, #1
 8008ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008caa:	487c      	ldr	r0, [pc, #496]	; (8008e9c <forward_conv2d_nl_pool+0x3f0>)
 8008cac:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	bf08      	it	eq
 8008cb6:	4601      	moveq	r1, r0
 8008cb8:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8008cbc:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008cc0:	2d04      	cmp	r5, #4
 8008cc2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8008cc6:	f000 849e 	beq.w	8009606 <forward_conv2d_nl_pool+0xb5a>
 8008cca:	2d08      	cmp	r5, #8
 8008ccc:	f000 849b 	beq.w	8009606 <forward_conv2d_nl_pool+0xb5a>
 8008cd0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8008cd4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008cd8:	2e03      	cmp	r6, #3
 8008cda:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8008cde:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8008ce2:	f240 8483 	bls.w	80095ec <forward_conv2d_nl_pool+0xb40>
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8489 	beq.w	8009602 <forward_conv2d_nl_pool+0xb56>
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008cf6:	68da      	ldr	r2, [r3, #12]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8008cfe:	6899      	ldr	r1, [r3, #8]
 8008d00:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8008d04:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008d08:	6896      	ldr	r6, [r2, #8]
 8008d0a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8008d0e:	4249      	negs	r1, r1
 8008d10:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f000 82dd 	beq.w	80092d4 <forward_conv2d_nl_pool+0x828>
 8008d1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d1e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008d22:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008d26:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8008d2a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8008ea0 <forward_conv2d_nl_pool+0x3f4>
 8008d2e:	fb03 f200 	mul.w	r2, r3, r0
 8008d32:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008d36:	008c      	lsls	r4, r1, #2
 8008d38:	fb04 f000 	mul.w	r0, r4, r0
 8008d3c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8008d40:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8008d44:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8008d48:	fb01 fc02 	mul.w	ip, r1, r2
 8008d4c:	00a2      	lsls	r2, r4, #2
 8008d4e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8008d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d56:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8008d5a:	00ab      	lsls	r3, r5, #2
 8008d5c:	4694      	mov	ip, r2
 8008d5e:	fb0c f204 	mul.w	r2, ip, r4
 8008d62:	fb04 f303 	mul.w	r3, r4, r3
 8008d66:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8008d6a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8008d6e:	00a4      	lsls	r4, r4, #2
 8008d70:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008d74:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8008d78:	f04f 0c00 	mov.w	ip, #0
 8008d7c:	fa0f f58b 	sxth.w	r5, fp
 8008d80:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8008d84:	46a4      	mov	ip, r4
 8008d86:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8008d8a:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8008d8e:	fa0f f58a 	sxth.w	r5, sl
 8008d92:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8008d96:	fb0c fc04 	mul.w	ip, ip, r4
 8008d9a:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8008d9e:	fb06 fc03 	mul.w	ip, r6, r3
 8008da2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008da6:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8008daa:	4240      	negs	r0, r0
 8008dac:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008db0:	469c      	mov	ip, r3
 8008db2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8008db6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dba:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8008dbe:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8008dc2:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8008dc6:	fb00 f303 	mul.w	r3, r0, r3
 8008dca:	460d      	mov	r5, r1
 8008dcc:	fb0c fc04 	mul.w	ip, ip, r4
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd2:	fb04 f305 	mul.w	r3, r4, r5
 8008dd6:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8008dda:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8008dde:	623b      	str	r3, [r7, #32]
 8008de0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008de4:	46a6      	mov	lr, r4
 8008de6:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8008dea:	fb05 f503 	mul.w	r5, r5, r3
 8008dee:	667d      	str	r5, [r7, #100]	; 0x64
 8008df0:	4625      	mov	r5, r4
 8008df2:	fb05 f503 	mul.w	r5, r5, r3
 8008df6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008dfa:	66bd      	str	r5, [r7, #104]	; 0x68
 8008dfc:	fb00 f101 	mul.w	r1, r0, r1
 8008e00:	fb03 f306 	mul.w	r3, r3, r6
 8008e04:	657b      	str	r3, [r7, #84]	; 0x54
 8008e06:	008b      	lsls	r3, r1, #2
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30
 8008e0a:	0093      	lsls	r3, r2, #2
 8008e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e0e:	0083      	lsls	r3, r0, #2
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e16:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008e1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008e1e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008e22:	2400      	movs	r4, #0
 8008e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e26:	4603      	mov	r3, r0
 8008e28:	fb03 f301 	mul.w	r3, r3, r1
 8008e2c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8008e30:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008e34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e38:	00d1      	lsls	r1, r2, #3
 8008e3a:	0113      	lsls	r3, r2, #4
 8008e3c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8008e40:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008e44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008e48:	fb00 f004 	mul.w	r0, r0, r4
 8008e4c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8008e50:	66f8      	str	r0, [r7, #108]	; 0x6c
 8008e52:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008e56:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8008e5a:	469a      	mov	sl, r3
 8008e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f340 81d0 	ble.w	8009206 <forward_conv2d_nl_pool+0x75a>
 8008e66:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8008e6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008e6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008e72:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008e76:	2900      	cmp	r1, #0
 8008e78:	441a      	add	r2, r3
 8008e7a:	bfb4      	ite	lt
 8008e7c:	2100      	movlt	r1, #0
 8008e7e:	2300      	movge	r3, #0
 8008e80:	4282      	cmp	r2, r0
 8008e82:	bf28      	it	cs
 8008e84:	4602      	movcs	r2, r0
 8008e86:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008e8a:	2801      	cmp	r0, #1
 8008e8c:	f000 83f6 	beq.w	800967c <forward_conv2d_nl_pool+0xbd0>
 8008e90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008e94:	4281      	cmp	r1, r0
 8008e96:	f000 822a 	beq.w	80092ee <forward_conv2d_nl_pool+0x842>
 8008e9a:	e003      	b.n	8008ea4 <forward_conv2d_nl_pool+0x3f8>
 8008e9c:	0800774d 	.word	0x0800774d
 8008ea0:	00000000 	.word	0x00000000
 8008ea4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	f000 819f 	beq.w	80091ec <forward_conv2d_nl_pool+0x740>
 8008eae:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8008eb2:	fb93 f1f0 	sdiv	r1, r3, r0
 8008eb6:	fb00 3111 	mls	r1, r0, r1, r3
 8008eba:	1a41      	subs	r1, r0, r1
 8008ebc:	1ad2      	subs	r2, r2, r3
 8008ebe:	fb91 f5f0 	sdiv	r5, r1, r0
 8008ec2:	fb00 1515 	mls	r5, r0, r5, r1
 8008ec6:	1b52      	subs	r2, r2, r5
 8008ec8:	4601      	mov	r1, r0
 8008eca:	4402      	add	r2, r0
 8008ecc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8008ed0:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8008eda:	fbb4 f4f0 	udiv	r4, r4, r0
 8008ede:	6a38      	ldr	r0, [r7, #32]
 8008ee0:	3a01      	subs	r2, #1
 8008ee2:	fb92 f8f1 	sdiv	r8, r2, r1
 8008ee6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008eea:	eba0 0c04 	sub.w	ip, r0, r4
 8008eee:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008ef2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008ef6:	4614      	mov	r4, r2
 8008ef8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008efc:	fbb4 f2f2 	udiv	r2, r4, r2
 8008f00:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8008f04:	663a      	str	r2, [r7, #96]	; 0x60
 8008f06:	441d      	add	r5, r3
 8008f08:	fb0e f000 	mul.w	r0, lr, r0
 8008f0c:	440b      	add	r3, r1
 8008f0e:	eba6 0608 	sub.w	r6, r6, r8
 8008f12:	fb04 f505 	mul.w	r5, r4, r5
 8008f16:	3b01      	subs	r3, #1
 8008f18:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8008f1c:	fb93 f3f4 	sdiv	r3, r3, r4
 8008f20:	fb00 f406 	mul.w	r4, r0, r6
 8008f24:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8008f28:	677d      	str	r5, [r7, #116]	; 0x74
 8008f2a:	0091      	lsls	r1, r2, #2
 8008f2c:	fb00 f003 	mul.w	r0, r0, r3
 8008f30:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8008f34:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f3a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8008f3e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8008f42:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8008f46:	1ac3      	subs	r3, r0, r3
 8008f48:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8008f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f50:	008b      	lsls	r3, r1, #2
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f54:	00d3      	lsls	r3, r2, #3
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8008f6e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8008f72:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f74:	46c2      	mov	sl, r8
 8008f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f7a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008f7e:	eb03 0c02 	add.w	ip, r3, r2
 8008f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f2c0 811c 	blt.w	80091c4 <forward_conv2d_nl_pool+0x718>
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8008f90:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8008f94:	4605      	mov	r5, r0
 8008f96:	4606      	mov	r6, r0
 8008f98:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008fa0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008faa:	440a      	add	r2, r1
 8008fac:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008fb0:	428b      	cmp	r3, r1
 8008fb2:	bf94      	ite	ls
 8008fb4:	ebc6 0303 	rsbls	r3, r6, r3
 8008fb8:	ebc6 0301 	rsbhi	r3, r6, r1
 8008fbc:	4415      	add	r5, r2
 8008fbe:	1a1b      	subs	r3, r3, r0
 8008fc0:	00a4      	lsls	r4, r4, #2
 8008fc2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8008fc6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8008fca:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8008fce:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	bf08      	it	eq
 8008fd6:	4662      	moveq	r2, ip
 8008fd8:	f108 31ff 	add.w	r1, r8, #4294967295
 8008fdc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8008fe0:	fb91 f1f0 	sdiv	r1, r1, r0
 8008fe4:	4429      	add	r1, r5
 8008fe6:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8008fea:	fb0e 5501 	mla	r5, lr, r1, r5
 8008fee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008ff2:	4403      	add	r3, r0
 8008ff4:	fb01 6104 	mla	r1, r1, r4, r6
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	fb93 f6f0 	sdiv	r6, r3, r0
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009004:	fb06 3110 	mls	r1, r6, r0, r3
 8009008:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800900c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009010:	4562      	cmp	r2, ip
 8009012:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009016:	bf08      	it	eq
 8009018:	eeb0 6a48 	vmoveq.f32	s12, s16
 800901c:	1b9b      	subs	r3, r3, r6
 800901e:	2800      	cmp	r0, #0
 8009020:	d070      	beq.n	8009104 <forward_conv2d_nl_pool+0x658>
 8009022:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8009026:	fb0e f803 	mul.w	r8, lr, r3
 800902a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800902c:	fb00 fb01 	mul.w	fp, r0, r1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d067      	beq.n	8009104 <forward_conv2d_nl_pool+0x658>
 8009034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009038:	18d3      	adds	r3, r2, r3
 800903a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800903e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28
 8009046:	2300      	movs	r3, #0
 8009048:	673b      	str	r3, [r7, #112]	; 0x70
 800904a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	4413      	add	r3, r2
 8009052:	65bb      	str	r3, [r7, #88]	; 0x58
 8009054:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	4413      	add	r3, r2
 800905c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009060:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009064:	ecf3 7a01 	vldmia	r3!, {s15}
 8009068:	f1ba 0f00 	cmp.w	sl, #0
 800906c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009070:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009074:	f340 80a4 	ble.w	80091c0 <forward_conv2d_nl_pool+0x714>
 8009078:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800907c:	f04f 0c00 	mov.w	ip, #0
 8009080:	2e00      	cmp	r6, #0
 8009082:	dd19      	ble.n	80090b8 <forward_conv2d_nl_pool+0x60c>
 8009084:	2100      	movs	r1, #0
 8009086:	eb00 040e 	add.w	r4, r0, lr
 800908a:	4284      	cmp	r4, r0
 800908c:	d910      	bls.n	80090b0 <forward_conv2d_nl_pool+0x604>
 800908e:	4603      	mov	r3, r0
 8009090:	462a      	mov	r2, r5
 8009092:	ecb3 7a01 	vldmia	r3!, {s14}
 8009096:	ecf2 6a01 	vldmia	r2!, {s13}
 800909a:	429c      	cmp	r4, r3
 800909c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80090a0:	d8f7      	bhi.n	8009092 <forward_conv2d_nl_pool+0x5e6>
 80090a2:	43c3      	mvns	r3, r0
 80090a4:	441c      	add	r4, r3
 80090a6:	f024 0403 	bic.w	r4, r4, #3
 80090aa:	3404      	adds	r4, #4
 80090ac:	4425      	add	r5, r4
 80090ae:	4420      	add	r0, r4
 80090b0:	3101      	adds	r1, #1
 80090b2:	428e      	cmp	r6, r1
 80090b4:	4448      	add	r0, r9
 80090b6:	d1e6      	bne.n	8009086 <forward_conv2d_nl_pool+0x5da>
 80090b8:	f10c 0c01 	add.w	ip, ip, #1
 80090bc:	45e2      	cmp	sl, ip
 80090be:	4458      	add	r0, fp
 80090c0:	4445      	add	r5, r8
 80090c2:	d1dd      	bne.n	8009080 <forward_conv2d_nl_pool+0x5d4>
 80090c4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80090c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090cc:	441d      	add	r5, r3
 80090ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090d2:	ece3 7a01 	vstmia	r3!, {s15}
 80090d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80090da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090de:	4293      	cmp	r3, r2
 80090e0:	d1be      	bne.n	8009060 <forward_conv2d_nl_pool+0x5b4>
 80090e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80090e6:	69f9      	ldr	r1, [r7, #28]
 80090e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ea:	4472      	add	r2, lr
 80090ec:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80090f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090f2:	1a52      	subs	r2, r2, r1
 80090f4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80090f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80090fc:	3301      	adds	r3, #1
 80090fe:	429a      	cmp	r2, r3
 8009100:	673b      	str	r3, [r7, #112]	; 0x70
 8009102:	d1a2      	bne.n	800904a <forward_conv2d_nl_pool+0x59e>
 8009104:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009108:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800910c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800910e:	4608      	mov	r0, r1
 8009110:	4410      	add	r0, r2
 8009112:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8009116:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800911a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800911e:	4401      	add	r1, r0
 8009120:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8009124:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009128:	1a8a      	subs	r2, r1, r2
 800912a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800912e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009132:	3301      	adds	r3, #1
 8009134:	429a      	cmp	r2, r3
 8009136:	67bb      	str	r3, [r7, #120]	; 0x78
 8009138:	f47f af1d 	bne.w	8008f76 <forward_conv2d_nl_pool+0x4ca>
 800913c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009140:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009144:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	2a00      	cmp	r2, #0
 800914c:	f000 8210 	beq.w	8009570 <forward_conv2d_nl_pool+0xac4>
 8009150:	2400      	movs	r4, #0
 8009152:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8009156:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800915a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800915e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8009162:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8009166:	609e      	str	r6, [r3, #8]
 8009168:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800916c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8009170:	462b      	mov	r3, r5
 8009172:	4641      	mov	r1, r8
 8009174:	4640      	mov	r0, r8
 8009176:	47a0      	blx	r4
 8009178:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800917c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8009180:	6859      	ldr	r1, [r3, #4]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8009188:	4405      	add	r5, r0
 800918a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800918e:	0089      	lsls	r1, r1, #2
 8009190:	4406      	add	r6, r0
 8009192:	eba5 0c09 	sub.w	ip, r5, r9
 8009196:	1850      	adds	r0, r2, r1
 8009198:	45a4      	cmp	ip, r4
 800919a:	bfa8      	it	ge
 800919c:	464d      	movge	r5, r9
 800919e:	4286      	cmp	r6, r0
 80091a0:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80091a4:	bf28      	it	cs
 80091a6:	1a76      	subcs	r6, r6, r1
 80091a8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80091ac:	3001      	adds	r0, #1
 80091ae:	4281      	cmp	r1, r0
 80091b0:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80091b4:	d1d7      	bne.n	8009166 <forward_conv2d_nl_pool+0x6ba>
 80091b6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80091ba:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80091be:	e019      	b.n	80091f4 <forward_conv2d_nl_pool+0x748>
 80091c0:	461a      	mov	r2, r3
 80091c2:	e781      	b.n	80090c8 <forward_conv2d_nl_pool+0x61c>
 80091c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80091c8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80091cc:	fb90 f3f2 	sdiv	r3, r0, r2
 80091d0:	fb02 0313 	mls	r3, r2, r3, r0
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	4605      	mov	r5, r0
 80091d8:	fb93 f0f2 	sdiv	r0, r3, r2
 80091dc:	fb02 3010 	mls	r0, r2, r0, r3
 80091e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e2:	462e      	mov	r6, r5
 80091e4:	18c4      	adds	r4, r0, r3
 80091e6:	eb02 0805 	add.w	r8, r2, r5
 80091ea:	e6d5      	b.n	8008f98 <forward_conv2d_nl_pool+0x4ec>
 80091ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	609a      	str	r2, [r3, #8]
 80091f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80091fa:	3301      	adds	r3, #1
 80091fc:	b21b      	sxth	r3, r3
 80091fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009206:	3b01      	subs	r3, #1
 8009208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800920c:	f100 83bf 	bmi.w	800998e <forward_conv2d_nl_pool+0xee2>
 8009210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009214:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8009218:	42a3      	cmp	r3, r4
 800921a:	f200 839d 	bhi.w	8009958 <forward_conv2d_nl_pool+0xeac>
 800921e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8009222:	b29b      	uxth	r3, r3
 8009224:	6990      	ldr	r0, [r2, #24]
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800922c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8009230:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	fa1f f188 	uxth.w	r1, r8
 800923a:	b29a      	uxth	r2, r3
 800923c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009240:	9308      	str	r3, [sp, #32]
 8009242:	9105      	str	r1, [sp, #20]
 8009244:	2601      	movs	r6, #1
 8009246:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800924a:	9607      	str	r6, [sp, #28]
 800924c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8009250:	9506      	str	r5, [sp, #24]
 8009252:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	1a64      	subs	r4, r4, r1
 800925a:	b2b1      	uxth	r1, r6
 800925c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8009266:	b224      	sxth	r4, r4
 8009268:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800926c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8009270:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8009274:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8009276:	47a0      	blx	r4
 8009278:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800927c:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8009280:	688a      	ldr	r2, [r1, #8]
 8009282:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8009284:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8009288:	fa0f f388 	sxth.w	r3, r8
 800928c:	1af3      	subs	r3, r6, r3
 800928e:	4422      	add	r2, r4
 8009290:	462e      	mov	r6, r5
 8009292:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8009296:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800929a:	608a      	str	r2, [r1, #8]
 800929c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092a0:	4426      	add	r6, r4
 80092a2:	b21b      	sxth	r3, r3
 80092a4:	1b2c      	subs	r4, r5, r4
 80092a6:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80092aa:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80092ac:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80092b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092b8:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80092bc:	3001      	adds	r0, #1
 80092be:	442c      	add	r4, r5
 80092c0:	4283      	cmp	r3, r0
 80092c2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80092c6:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80092ca:	f63f adc7 	bhi.w	8008e5c <forward_conv2d_nl_pool+0x3b0>
 80092ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	609a      	str	r2, [r3, #8]
 80092d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80092dc:	68d3      	ldr	r3, [r2, #12]
 80092de:	6093      	str	r3, [r2, #8]
 80092e0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80092e4:	46bd      	mov	sp, r7
 80092e6:	ecbd 8b10 	vpop	{d8-d15}
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092f0:	2901      	cmp	r1, #1
 80092f2:	f47f add7 	bne.w	8008ea4 <forward_conv2d_nl_pool+0x3f8>
 80092f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80092fa:	2900      	cmp	r1, #0
 80092fc:	f43f af76 	beq.w	80091ec <forward_conv2d_nl_pool+0x740>
 8009300:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8009304:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8009308:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800930c:	1ad2      	subs	r2, r2, r3
 800930e:	1a8c      	subs	r4, r1, r2
 8009310:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8009314:	00b2      	lsls	r2, r6, #2
 8009316:	fb02 f204 	mul.w	r2, r2, r4
 800931a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800931e:	fbb1 f1f0 	udiv	r1, r1, r0
 8009322:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8009326:	460d      	mov	r5, r1
 8009328:	62f9      	str	r1, [r7, #44]	; 0x2c
 800932a:	62ba      	str	r2, [r7, #40]	; 0x28
 800932c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8009330:	0082      	lsls	r2, r0, #2
 8009332:	65ba      	str	r2, [r7, #88]	; 0x58
 8009334:	00ca      	lsls	r2, r1, #3
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	00aa      	lsls	r2, r5, #2
 800933a:	60ba      	str	r2, [r7, #8]
 800933c:	fb03 f206 	mul.w	r2, r3, r6
 8009340:	67ba      	str	r2, [r7, #120]	; 0x78
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	fb02 f303 	mul.w	r3, r2, r3
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800934e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009352:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009356:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800935a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800935e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009362:	2300      	movs	r3, #0
 8009364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f2c0 8112 	blt.w	8009596 <forward_conv2d_nl_pool+0xaea>
 8009372:	2100      	movs	r1, #0
 8009374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009376:	460a      	mov	r2, r1
 8009378:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800937c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009380:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8009384:	4420      	add	r0, r4
 8009386:	4408      	add	r0, r1
 8009388:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800938c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8009390:	190c      	adds	r4, r1, r4
 8009392:	42ac      	cmp	r4, r5
 8009394:	bf28      	it	cs
 8009396:	462c      	movcs	r4, r5
 8009398:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800939c:	0080      	lsls	r0, r0, #2
 800939e:	1aa4      	subs	r4, r4, r2
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	f000 80e9 	beq.w	8009578 <forward_conv2d_nl_pool+0xacc>
 80093a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093aa:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80093ae:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80093b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80093b6:	42b5      	cmp	r5, r6
 80093b8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80093bc:	eba3 0204 	sub.w	r2, r3, r4
 80093c0:	eba1 0104 	sub.w	r1, r1, r4
 80093c4:	bf08      	it	eq
 80093c6:	eef0 3a48 	vmoveq.f32	s7, s16
 80093ca:	462b      	mov	r3, r5
 80093cc:	697d      	ldr	r5, [r7, #20]
 80093ce:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80093d2:	4428      	add	r0, r5
 80093d4:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 80093d8:	fb05 6e00 	mla	lr, r5, r0, r6
 80093dc:	eb0e 000b 	add.w	r0, lr, fp
 80093e0:	4586      	cmp	lr, r0
 80093e2:	61f8      	str	r0, [r7, #28]
 80093e4:	f080 80a5 	bcs.w	8009532 <forward_conv2d_nl_pool+0xa86>
 80093e8:	0092      	lsls	r2, r2, #2
 80093ea:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80093ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f0:	fb01 f10b 	mul.w	r1, r1, fp
 80093f4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80093f8:	f024 0803 	bic.w	r8, r4, #3
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	f000 8098 	beq.w	8009532 <forward_conv2d_nl_pool+0xa86>
 8009402:	f108 32ff 	add.w	r2, r8, #4294967295
 8009406:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009408:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800940c:	0892      	lsrs	r2, r2, #2
 800940e:	3201      	adds	r2, #1
 8009410:	4401      	add	r1, r0
 8009412:	fb02 f00a 	mul.w	r0, r2, sl
 8009416:	6638      	str	r0, [r7, #96]	; 0x60
 8009418:	0110      	lsls	r0, r2, #4
 800941a:	0092      	lsls	r2, r2, #2
 800941c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800941e:	1aca      	subs	r2, r1, r3
 8009420:	613a      	str	r2, [r7, #16]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	6738      	str	r0, [r7, #112]	; 0x70
 8009426:	4413      	add	r3, r2
 8009428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800942c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009432:	4413      	add	r3, r2
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	4413      	add	r3, r2
 800943e:	677b      	str	r3, [r7, #116]	; 0x74
 8009440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009444:	ecf3 6a01 	vldmia	r3!, {s13}
 8009448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800944c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009450:	2b00      	cmp	r3, #0
 8009452:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009456:	dd57      	ble.n	8009508 <forward_conv2d_nl_pool+0xa5c>
 8009458:	4676      	mov	r6, lr
 800945a:	f04f 0c00 	mov.w	ip, #0
 800945e:	f1b8 0f00 	cmp.w	r8, #0
 8009462:	f340 8087 	ble.w	8009574 <forward_conv2d_nl_pool+0xac8>
 8009466:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800946a:	f109 0310 	add.w	r3, r9, #16
 800946e:	18b1      	adds	r1, r6, r2
 8009470:	2000      	movs	r0, #0
 8009472:	4632      	mov	r2, r6
 8009474:	eb02 050b 	add.w	r5, r2, fp
 8009478:	ed95 7a00 	vldr	s14, [r5]
 800947c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8009480:	ed92 4a00 	vldr	s8, [r2]
 8009484:	ed53 4a04 	vldr	s9, [r3, #-16]
 8009488:	ed91 5a00 	vldr	s10, [r1]
 800948c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009490:	ed13 6a01 	vldr	s12, [r3, #-4]
 8009494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009498:	eb01 050b 	add.w	r5, r1, fp
 800949c:	eee4 7a24 	vfma.f32	s15, s8, s9
 80094a0:	3004      	adds	r0, #4
 80094a2:	4540      	cmp	r0, r8
 80094a4:	ed95 7a00 	vldr	s14, [r5]
 80094a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80094ac:	4452      	add	r2, sl
 80094ae:	4451      	add	r1, sl
 80094b0:	f103 0310 	add.w	r3, r3, #16
 80094b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80094b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80094bc:	dbda      	blt.n	8009474 <forward_conv2d_nl_pool+0x9c8>
 80094be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80094c2:	441e      	add	r6, r3
 80094c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094c6:	4499      	add	r9, r3
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	da11      	bge.n	80094f0 <forward_conv2d_nl_pool+0xa44>
 80094cc:	4602      	mov	r2, r0
 80094ce:	4633      	mov	r3, r6
 80094d0:	4649      	mov	r1, r9
 80094d2:	edd3 7a00 	vldr	s15, [r3]
 80094d6:	ecb1 7a01 	vldmia	r1!, {s14}
 80094da:	3201      	adds	r2, #1
 80094dc:	42a2      	cmp	r2, r4
 80094de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80094e2:	445b      	add	r3, fp
 80094e4:	d1f5      	bne.n	80094d2 <forward_conv2d_nl_pool+0xa26>
 80094e6:	1a20      	subs	r0, r4, r0
 80094e8:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80094ec:	fb00 660b 	mla	r6, r0, fp, r6
 80094f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f4:	441e      	add	r6, r3
 80094f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094fa:	4499      	add	r9, r3
 80094fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009500:	f10c 0c01 	add.w	ip, ip, #1
 8009504:	4563      	cmp	r3, ip
 8009506:	d1aa      	bne.n	800945e <forward_conv2d_nl_pool+0x9b2>
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	4499      	add	r9, r3
 800950c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800950e:	ece3 6a01 	vstmia	r3!, {s13}
 8009512:	677b      	str	r3, [r7, #116]	; 0x74
 8009514:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8009518:	4293      	cmp	r3, r2
 800951a:	d191      	bne.n	8009440 <forward_conv2d_nl_pool+0x994>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	1a9b      	subs	r3, r3, r2
 8009522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	f10e 0e04 	add.w	lr, lr, #4
 800952c:	459e      	cmp	lr, r3
 800952e:	f4ff af7d 	bcc.w	800942c <forward_conv2d_nl_pool+0x980>
 8009532:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009536:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800953a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800953e:	440a      	add	r2, r1
 8009540:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009544:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8009548:	4608      	mov	r0, r1
 800954a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800954e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8009552:	4410      	add	r0, r2
 8009554:	1a8a      	subs	r2, r1, r2
 8009556:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800955a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800955e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8009562:	3301      	adds	r3, #1
 8009564:	429a      	cmp	r2, r3
 8009566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800956a:	f47f aefd 	bne.w	8009368 <forward_conv2d_nl_pool+0x8bc>
 800956e:	e5e7      	b.n	8009140 <forward_conv2d_nl_pool+0x694>
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	e63f      	b.n	80091f4 <forward_conv2d_nl_pool+0x748>
 8009574:	2000      	movs	r0, #0
 8009576:	e7a7      	b.n	80094c8 <forward_conv2d_nl_pool+0xa1c>
 8009578:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800957c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8009580:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009584:	1b19      	subs	r1, r3, r4
 8009586:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800958a:	eef0 3a48 	vmov.f32	s7, s16
 800958e:	1b1a      	subs	r2, r3, r4
 8009590:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009594:	e71a      	b.n	80093cc <forward_conv2d_nl_pool+0x920>
 8009596:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800959a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959c:	460a      	mov	r2, r1
 800959e:	440b      	add	r3, r1
 80095a0:	e6ea      	b.n	8009378 <forward_conv2d_nl_pool+0x8cc>
 80095a2:	b168      	cbz	r0, 80095c0 <forward_conv2d_nl_pool+0xb14>
 80095a4:	6882      	ldr	r2, [r0, #8]
 80095a6:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80095aa:	2201      	movs	r2, #1
 80095ac:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80095b0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80095b4:	f7ff bb29 	b.w	8008c0a <forward_conv2d_nl_pool+0x15e>
 80095b8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80095bc:	f7ff bb08 	b.w	8008bd0 <forward_conv2d_nl_pool+0x124>
 80095c0:	2201      	movs	r2, #1
 80095c2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80095c6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80095ca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80095ce:	f7ff bb1c 	b.w	8008c0a <forward_conv2d_nl_pool+0x15e>
 80095d2:	3118      	adds	r1, #24
 80095d4:	d008      	beq.n	80095e8 <forward_conv2d_nl_pool+0xb3c>
 80095d6:	462a      	mov	r2, r5
 80095d8:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 80095dc:	4629      	mov	r1, r5
 80095de:	f7ff ba93 	b.w	8008b08 <forward_conv2d_nl_pool+0x5c>
 80095e2:	4691      	mov	r9, r2
 80095e4:	f7ff ba7d 	b.w	8008ae2 <forward_conv2d_nl_pool+0x36>
 80095e8:	68cb      	ldr	r3, [r1, #12]
 80095ea:	deff      	udf	#255	; 0xff
 80095ec:	2300      	movs	r3, #0
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	deff      	udf	#255	; 0xff
 80095f2:	4694      	mov	ip, r2
 80095f4:	f7ff ba6c 	b.w	8008ad0 <forward_conv2d_nl_pool+0x24>
 80095f8:	6873      	ldr	r3, [r6, #4]
 80095fa:	deff      	udf	#255	; 0xff
 80095fc:	2200      	movs	r2, #0
 80095fe:	f7ff ba82 	b.w	8008b06 <forward_conv2d_nl_pool+0x5a>
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	deff      	udf	#255	; 0xff
 8009606:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800960a:	2a00      	cmp	r2, #0
 800960c:	f43f ab60 	beq.w	8008cd0 <forward_conv2d_nl_pool+0x224>
 8009610:	2e03      	cmp	r6, #3
 8009612:	d9eb      	bls.n	80095ec <forward_conv2d_nl_pool+0xb40>
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	b323      	cbz	r3, 8009664 <forward_conv2d_nl_pool+0xbb8>
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b313      	cbz	r3, 8009664 <forward_conv2d_nl_pool+0xbb8>
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009624:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800962e:	9000      	str	r0, [sp, #0]
 8009630:	4673      	mov	r3, lr
 8009632:	4620      	mov	r0, r4
 8009634:	f7fe fa18 	bl	8007a68 <ai_dict_decompress_f32>
 8009638:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800963c:	b17c      	cbz	r4, 800965e <forward_conv2d_nl_pool+0xbb2>
 800963e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8009642:	881e      	ldrh	r6, [r3, #0]
 8009644:	f7ff bb44 	b.w	8008cd0 <forward_conv2d_nl_pool+0x224>
 8009648:	b178      	cbz	r0, 800966a <forward_conv2d_nl_pool+0xbbe>
 800964a:	6881      	ldr	r1, [r0, #8]
 800964c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009650:	2201      	movs	r2, #1
 8009652:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8009656:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800965a:	f7ff bad6 	b.w	8008c0a <forward_conv2d_nl_pool+0x15e>
 800965e:	881e      	ldrh	r6, [r3, #0]
 8009660:	f7ff bb36 	b.w	8008cd0 <forward_conv2d_nl_pool+0x224>
 8009664:	2300      	movs	r3, #0
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	deff      	udf	#255	; 0xff
 800966a:	2201      	movs	r2, #1
 800966c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8009670:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8009674:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009678:	f7ff bac7 	b.w	8008c0a <forward_conv2d_nl_pool+0x15e>
 800967c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800967e:	2801      	cmp	r0, #1
 8009680:	f47f ac10 	bne.w	8008ea4 <forward_conv2d_nl_pool+0x3f8>
 8009684:	1ad2      	subs	r2, r2, r3
 8009686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009688:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800968c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8009690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009692:	fb00 4101 	mla	r1, r0, r1, r4
 8009696:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800969a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800969e:	f080 81c4 	bcs.w	8009a2a <forward_conv2d_nl_pool+0xf7e>
 80096a2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	f43f ad4a 	beq.w	8009140 <forward_conv2d_nl_pool+0x694>
 80096ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80096b0:	fb02 f303 	mul.w	r3, r2, r3
 80096b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b6:	677b      	str	r3, [r7, #116]	; 0x74
 80096b8:	1a9b      	subs	r3, r3, r2
 80096ba:	663b      	str	r3, [r7, #96]	; 0x60
 80096bc:	188b      	adds	r3, r1, r2
 80096be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80096c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80096d0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 80096d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096dc:	2300      	movs	r3, #0
 80096de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8133 	beq.w	8009952 <forward_conv2d_nl_pool+0xea6>
 80096ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096f0:	ed93 6a00 	vldr	s12, [r3]
 80096f4:	3304      	adds	r3, #4
 80096f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8101 	beq.w	8009906 <forward_conv2d_nl_pool+0xe5a>
 8009704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009708:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800970c:	eb03 0802 	add.w	r8, r3, r2
 8009710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009720:	67bb      	str	r3, [r7, #120]	; 0x78
 8009722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800972a:	f04f 0b00 	mov.w	fp, #0
 800972e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009732:	2b00      	cmp	r3, #0
 8009734:	f2c0 8104 	blt.w	8009940 <forward_conv2d_nl_pool+0xe94>
 8009738:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800973c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800973e:	2300      	movs	r3, #0
 8009740:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8009744:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009748:	eb02 0c04 	add.w	ip, r2, r4
 800974c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009750:	4540      	cmp	r0, r8
 8009752:	bf94      	ite	ls
 8009754:	ebc3 0300 	rsbls	r3, r3, r0
 8009758:	ebc3 0308 	rsbhi	r3, r3, r8
 800975c:	eba2 0903 	sub.w	r9, r2, r3
 8009760:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009764:	1ac4      	subs	r4, r0, r3
 8009766:	fb03 f302 	mul.w	r3, r3, r2
 800976a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800976e:	2a00      	cmp	r2, #0
 8009770:	f340 80e3 	ble.w	800993a <forward_conv2d_nl_pool+0xe8e>
 8009774:	f023 050f 	bic.w	r5, r3, #15
 8009778:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800977c:	1e68      	subs	r0, r5, #1
 800977e:	0900      	lsrs	r0, r0, #4
 8009780:	3001      	adds	r0, #1
 8009782:	fb06 f204 	mul.w	r2, r6, r4
 8009786:	673a      	str	r2, [r7, #112]	; 0x70
 8009788:	0102      	lsls	r2, r0, #4
 800978a:	65ba      	str	r2, [r7, #88]	; 0x58
 800978c:	fb06 f909 	mul.w	r9, r6, r9
 8009790:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009794:	eef0 6a46 	vmov.f32	s13, s12
 8009798:	f04f 0e00 	mov.w	lr, #0
 800979c:	4662      	mov	r2, ip
 800979e:	2d00      	cmp	r5, #0
 80097a0:	f340 80c9 	ble.w	8009936 <forward_conv2d_nl_pool+0xe8a>
 80097a4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80097a8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80097ac:	2600      	movs	r6, #0
 80097ae:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80097b2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80097b6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80097ba:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80097be:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80097c2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80097c6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80097ca:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80097ce:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80097d2:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80097d6:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 80097da:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 80097de:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 80097e2:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 80097e6:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 80097ea:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 80097ee:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 80097f2:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 80097f6:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80097fa:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80097fe:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009802:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8009806:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800980a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800980e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8009812:	ed50 4a03 	vldr	s9, [r0, #-12]
 8009816:	ed14 5a03 	vldr	s10, [r4, #-12]
 800981a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800981e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009822:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009826:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800982a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800982e:	3610      	adds	r6, #16
 8009830:	42ae      	cmp	r6, r5
 8009832:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009836:	ed50 ea01 	vldr	s29, [r0, #-4]
 800983a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800983e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009842:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009846:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800984a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800984e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009852:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009856:	eee9 7a89 	vfma.f32	s15, s19, s18
 800985a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800985e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009862:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009866:	eee2 7a83 	vfma.f32	s15, s5, s6
 800986a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800986e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009872:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009876:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800987a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800987e:	db96      	blt.n	80097ae <forward_conv2d_nl_pool+0xd02>
 8009880:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009882:	4451      	add	r1, sl
 8009884:	4452      	add	r2, sl
 8009886:	4283      	cmp	r3, r0
 8009888:	dd0f      	ble.n	80098aa <forward_conv2d_nl_pool+0xdfe>
 800988a:	4604      	mov	r4, r0
 800988c:	468c      	mov	ip, r1
 800988e:	4616      	mov	r6, r2
 8009890:	ecb6 7a01 	vldmia	r6!, {s14}
 8009894:	ecfc 7a01 	vldmia	ip!, {s15}
 8009898:	3401      	adds	r4, #1
 800989a:	42a3      	cmp	r3, r4
 800989c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80098a0:	d1f6      	bne.n	8009890 <forward_conv2d_nl_pool+0xde4>
 80098a2:	1a18      	subs	r0, r3, r0
 80098a4:	0080      	lsls	r0, r0, #2
 80098a6:	4402      	add	r2, r0
 80098a8:	4401      	add	r1, r0
 80098aa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80098ac:	4402      	add	r2, r0
 80098ae:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80098b2:	f10e 0e01 	add.w	lr, lr, #1
 80098b6:	4570      	cmp	r0, lr
 80098b8:	4449      	add	r1, r9
 80098ba:	f47f af70 	bne.w	800979e <forward_conv2d_nl_pool+0xcf2>
 80098be:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80098c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80098c8:	edc3 6a00 	vstr	s13, [r3]
 80098cc:	4608      	mov	r0, r1
 80098ce:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80098d2:	440b      	add	r3, r1
 80098d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80098d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098da:	4410      	add	r0, r2
 80098dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098de:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80098e2:	4608      	mov	r0, r1
 80098e4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80098e8:	4418      	add	r0, r3
 80098ea:	1acb      	subs	r3, r1, r3
 80098ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80098f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80098f8:	f10b 0b01 	add.w	fp, fp, #1
 80098fc:	455b      	cmp	r3, fp
 80098fe:	eba8 0802 	sub.w	r8, r8, r2
 8009902:	f47f af14 	bne.w	800972e <forward_conv2d_nl_pool+0xc82>
 8009906:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800990a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800990c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009910:	440a      	add	r2, r1
 8009912:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009916:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800991a:	3204      	adds	r2, #4
 800991c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009920:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009924:	3301      	adds	r3, #1
 8009926:	429a      	cmp	r2, r3
 8009928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800992c:	f47f aed9 	bne.w	80096e2 <forward_conv2d_nl_pool+0xc36>
 8009930:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009934:	e404      	b.n	8009140 <forward_conv2d_nl_pool+0x694>
 8009936:	2000      	movs	r0, #0
 8009938:	e7a5      	b.n	8009886 <forward_conv2d_nl_pool+0xdda>
 800993a:	eef0 6a46 	vmov.f32	s13, s12
 800993e:	e7be      	b.n	80098be <forward_conv2d_nl_pool+0xe12>
 8009940:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009944:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009948:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800994c:	eba8 0303 	sub.w	r3, r8, r3
 8009950:	e6f6      	b.n	8009740 <forward_conv2d_nl_pool+0xc94>
 8009952:	eeb0 6a48 	vmov.f32	s12, s16
 8009956:	e6d0      	b.n	80096fa <forward_conv2d_nl_pool+0xc4e>
 8009958:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800995c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009960:	4611      	mov	r1, r2
 8009962:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009966:	4419      	add	r1, r3
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800996e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009974:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8009978:	4413      	add	r3, r2
 800997a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800997e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009986:	4293      	cmp	r3, r2
 8009988:	f63f aa68 	bhi.w	8008e5c <forward_conv2d_nl_pool+0x3b0>
 800998c:	e49f      	b.n	80092ce <forward_conv2d_nl_pool+0x822>
 800998e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009992:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800999c:	68d1      	ldr	r1, [r2, #12]
 800999e:	6853      	ldr	r3, [r2, #4]
 80099a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099a2:	fb00 4012 	mls	r0, r0, r2, r4
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4281      	cmp	r1, r0
 80099aa:	bf88      	it	hi
 80099ac:	18c0      	addhi	r0, r0, r3
 80099ae:	4281      	cmp	r1, r0
 80099b0:	eb01 0203 	add.w	r2, r1, r3
 80099b4:	d216      	bcs.n	80099e4 <forward_conv2d_nl_pool+0xf38>
 80099b6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80099ba:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80099be:	42a1      	cmp	r1, r4
 80099c0:	d010      	beq.n	80099e4 <forward_conv2d_nl_pool+0xf38>
 80099c2:	4290      	cmp	r0, r2
 80099c4:	d20e      	bcs.n	80099e4 <forward_conv2d_nl_pool+0xf38>
 80099c6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80099ca:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80099ce:	f850 3b04 	ldr.w	r3, [r0], #4
 80099d2:	f841 3b04 	str.w	r3, [r1], #4
 80099d6:	69a2      	ldr	r2, [r4, #24]
 80099d8:	6853      	ldr	r3, [r2, #4]
 80099da:	68d2      	ldr	r2, [r2, #12]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	441a      	add	r2, r3
 80099e0:	4282      	cmp	r2, r0
 80099e2:	d8f4      	bhi.n	80099ce <forward_conv2d_nl_pool+0xf22>
 80099e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80099e8:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80099ec:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80099f0:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80099f2:	4420      	add	r0, r4
 80099f4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80099f8:	1a40      	subs	r0, r0, r1
 80099fa:	4421      	add	r1, r4
 80099fc:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8009a00:	442c      	add	r4, r5
 8009a02:	b209      	sxth	r1, r1
 8009a04:	b200      	sxth	r0, r0
 8009a06:	4294      	cmp	r4, r2
 8009a08:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8009a0c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8009a10:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8009a14:	4621      	mov	r1, r4
 8009a16:	f4ff abfb 	bcc.w	8009210 <forward_conv2d_nl_pool+0x764>
 8009a1a:	425b      	negs	r3, r3
 8009a1c:	4419      	add	r1, r3
 8009a1e:	4291      	cmp	r1, r2
 8009a20:	d2fc      	bcs.n	8009a1c <forward_conv2d_nl_pool+0xf70>
 8009a22:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8009a26:	f7ff bbf3 	b.w	8009210 <forward_conv2d_nl_pool+0x764>
 8009a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a2e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8009a32:	320a      	adds	r2, #10
 8009a34:	f022 0207 	bic.w	r2, r2, #7
 8009a38:	ebad 0d02 	sub.w	sp, sp, r2
 8009a3c:	aa0a      	add	r2, sp, #40	; 0x28
 8009a3e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009a42:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	f000 8153 	beq.w	8009cf2 <forward_conv2d_nl_pool+0x1246>
 8009a4c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009a50:	f8c7 b01c 	str.w	fp, [r7, #28]
 8009a54:	fb02 f303 	mul.w	r3, r2, r3
 8009a58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8009a5c:	1a9b      	subs	r3, r3, r2
 8009a5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a64:	f8c7 a014 	str.w	sl, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a82:	2300      	movs	r3, #0
 8009a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a8c:	b13b      	cbz	r3, 8009a9e <forward_conv2d_nl_pool+0xff2>
 8009a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a92:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009a96:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8009a9a:	f000 ff1b 	bl	800a8d4 <memcpy>
 8009a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 8137 	beq.w	8009d16 <forward_conv2d_nl_pool+0x126a>
 8009aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aaa:	ed93 6a00 	vldr	s12, [r3]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ab2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 8101 	beq.w	8009cbe <forward_conv2d_nl_pool+0x1212>
 8009abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ac0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009ac4:	eb03 0802 	add.w	r8, r3, r2
 8009ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad8:	677b      	str	r3, [r7, #116]	; 0x74
 8009ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ae2:	f04f 0b00 	mov.w	fp, #0
 8009ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f2c0 810a 	blt.w	8009d04 <forward_conv2d_nl_pool+0x1258>
 8009af0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009af6:	2300      	movs	r3, #0
 8009af8:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8009afc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8009b00:	eb02 0c04 	add.w	ip, r2, r4
 8009b04:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009b08:	4540      	cmp	r0, r8
 8009b0a:	bf94      	ite	ls
 8009b0c:	ebc3 0300 	rsbls	r3, r3, r0
 8009b10:	ebc3 0308 	rsbhi	r3, r3, r8
 8009b14:	eba2 0903 	sub.w	r9, r2, r3
 8009b18:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8009b1c:	1ac4      	subs	r4, r0, r3
 8009b1e:	fb03 f302 	mul.w	r3, r3, r2
 8009b22:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	f340 80e9 	ble.w	8009cfe <forward_conv2d_nl_pool+0x1252>
 8009b2c:	f023 050f 	bic.w	r5, r3, #15
 8009b30:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8009b34:	1e68      	subs	r0, r5, #1
 8009b36:	0900      	lsrs	r0, r0, #4
 8009b38:	3001      	adds	r0, #1
 8009b3a:	fb06 f204 	mul.w	r2, r6, r4
 8009b3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009b40:	0102      	lsls	r2, r0, #4
 8009b42:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b44:	fb06 f909 	mul.w	r9, r6, r9
 8009b48:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009b4c:	eef0 6a46 	vmov.f32	s13, s12
 8009b50:	f04f 0e00 	mov.w	lr, #0
 8009b54:	4662      	mov	r2, ip
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f340 80cf 	ble.w	8009cfa <forward_conv2d_nl_pool+0x124e>
 8009b5c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009b60:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009b64:	2600      	movs	r6, #0
 8009b66:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8009b6a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8009b6e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8009b72:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8009b76:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8009b7a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8009b7e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009b82:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8009b86:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8009b8a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8009b8e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8009b92:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8009b96:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8009b9a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8009b9e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8009ba2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8009ba6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009baa:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009bae:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009bb2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8009bb6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009bba:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8009bbe:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009bc2:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009bc6:	ed14 4a04 	vldr	s8, [r4, #-16]
 8009bca:	ed54 4a03 	vldr	s9, [r4, #-12]
 8009bce:	ed10 5a03 	vldr	s10, [r0, #-12]
 8009bd2:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009bd6:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009bda:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009bde:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8009be2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009be6:	3610      	adds	r6, #16
 8009be8:	42ae      	cmp	r6, r5
 8009bea:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009bee:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009bf2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009bf6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009bfa:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009bfe:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009c02:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009c06:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009c0a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009c0e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009c12:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009c16:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009c1a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009c1e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009c22:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009c26:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009c2a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009c2e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009c32:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009c36:	db96      	blt.n	8009b66 <forward_conv2d_nl_pool+0x10ba>
 8009c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c3a:	4451      	add	r1, sl
 8009c3c:	4452      	add	r2, sl
 8009c3e:	4283      	cmp	r3, r0
 8009c40:	dd0f      	ble.n	8009c62 <forward_conv2d_nl_pool+0x11b6>
 8009c42:	4604      	mov	r4, r0
 8009c44:	468c      	mov	ip, r1
 8009c46:	4616      	mov	r6, r2
 8009c48:	ecb6 7a01 	vldmia	r6!, {s14}
 8009c4c:	ecfc 7a01 	vldmia	ip!, {s15}
 8009c50:	3401      	adds	r4, #1
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009c58:	d1f6      	bne.n	8009c48 <forward_conv2d_nl_pool+0x119c>
 8009c5a:	1a18      	subs	r0, r3, r0
 8009c5c:	0080      	lsls	r0, r0, #2
 8009c5e:	4402      	add	r2, r0
 8009c60:	4401      	add	r1, r0
 8009c62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009c64:	4402      	add	r2, r0
 8009c66:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8009c6a:	f10e 0e01 	add.w	lr, lr, #1
 8009c6e:	4570      	cmp	r0, lr
 8009c70:	4449      	add	r1, r9
 8009c72:	f47f af70 	bne.w	8009b56 <forward_conv2d_nl_pool+0x10aa>
 8009c76:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c7c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009c80:	edc3 6a00 	vstr	s13, [r3]
 8009c84:	4608      	mov	r0, r1
 8009c86:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009c8a:	440b      	add	r3, r1
 8009c8c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009c90:	677b      	str	r3, [r7, #116]	; 0x74
 8009c92:	4410      	add	r0, r2
 8009c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c96:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8009c9a:	4608      	mov	r0, r1
 8009c9c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009ca0:	4418      	add	r0, r3
 8009ca2:	1acb      	subs	r3, r1, r3
 8009ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ca8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009cac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8009cb0:	f10b 0b01 	add.w	fp, fp, #1
 8009cb4:	455b      	cmp	r3, fp
 8009cb6:	eba8 0802 	sub.w	r8, r8, r2
 8009cba:	f47f af14 	bne.w	8009ae6 <forward_conv2d_nl_pool+0x103a>
 8009cbe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009cc2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cca:	440a      	add	r2, r1
 8009ccc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8009cd0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009cd4:	3204      	adds	r2, #4
 8009cd6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8009cda:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8009cde:	3301      	adds	r3, #1
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ce6:	f47f aecf 	bne.w	8009a88 <forward_conv2d_nl_pool+0xfdc>
 8009cea:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8009cee:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8009cf2:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8009cf6:	f7ff ba23 	b.w	8009140 <forward_conv2d_nl_pool+0x694>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e79f      	b.n	8009c3e <forward_conv2d_nl_pool+0x1192>
 8009cfe:	eef0 6a46 	vmov.f32	s13, s12
 8009d02:	e7b8      	b.n	8009c76 <forward_conv2d_nl_pool+0x11ca>
 8009d04:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d08:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009d0c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8009d10:	eba8 0303 	sub.w	r3, r8, r3
 8009d14:	e6f0      	b.n	8009af8 <forward_conv2d_nl_pool+0x104c>
 8009d16:	eeb0 6a48 	vmov.f32	s12, s16
 8009d1a:	e6ca      	b.n	8009ab2 <forward_conv2d_nl_pool+0x1006>

08009d1c <forward_dense>:
 8009d1c:	6982      	ldr	r2, [r0, #24]
 8009d1e:	8813      	ldrh	r3, [r2, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 81ca 	beq.w	800a0ba <forward_dense+0x39e>
 8009d26:	6852      	ldr	r2, [r2, #4]
 8009d28:	6850      	ldr	r0, [r2, #4]
 8009d2a:	b100      	cbz	r0, 8009d2e <forward_dense+0x12>
 8009d2c:	6800      	ldr	r0, [r0, #0]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	f240 81c0 	bls.w	800a0b4 <forward_dense+0x398>
 8009d34:	6911      	ldr	r1, [r2, #16]
 8009d36:	b101      	cbz	r1, 8009d3a <forward_dense+0x1e>
 8009d38:	6809      	ldr	r1, [r1, #0]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	f000 81bf 	beq.w	800a0be <forward_dense+0x3a2>
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	ed2d 8b10 	vpush	{d8-d15}
 8009d48:	69d3      	ldr	r3, [r2, #28]
 8009d4a:	b091      	sub	sp, #68	; 0x44
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 820b 	beq.w	800a168 <forward_dense+0x44c>
 8009d52:	681c      	ldr	r4, [r3, #0]
 8009d54:	9408      	str	r4, [sp, #32]
 8009d56:	f112 0418 	adds.w	r4, r2, #24
 8009d5a:	f000 81df 	beq.w	800a11c <forward_dense+0x400>
 8009d5e:	8b12      	ldrh	r2, [r2, #24]
 8009d60:	2a01      	cmp	r2, #1
 8009d62:	f240 81fe 	bls.w	800a162 <forward_dense+0x446>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 81da 	beq.w	800a120 <forward_dense+0x404>
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	9306      	str	r3, [sp, #24]
 8009d70:	9b08      	ldr	r3, [sp, #32]
 8009d72:	68cc      	ldr	r4, [r1, #12]
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	68c5      	ldr	r5, [r0, #12]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009d7e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009d82:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8009d86:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8009d8a:	fa4c f505 	asr.w	r5, ip, r5
 8009d8e:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8009d92:	950b      	str	r5, [sp, #44]	; 0x2c
 8009d94:	2a04      	cmp	r2, #4
 8009d96:	fb07 f506 	mul.w	r5, r7, r6
 8009d9a:	6864      	ldr	r4, [r4, #4]
 8009d9c:	9507      	str	r5, [sp, #28]
 8009d9e:	f000 81dd 	beq.w	800a15c <forward_dense+0x440>
 8009da2:	2a08      	cmp	r2, #8
 8009da4:	f000 81da 	beq.w	800a15c <forward_dense+0x440>
 8009da8:	f04f 0a00 	mov.w	sl, #0
 8009dac:	698a      	ldr	r2, [r1, #24]
 8009dae:	6981      	ldr	r1, [r0, #24]
 8009db0:	6890      	ldr	r0, [r2, #8]
 8009db2:	9a08      	ldr	r2, [sp, #32]
 8009db4:	9004      	str	r0, [sp, #16]
 8009db6:	6952      	ldr	r2, [r2, #20]
 8009db8:	688f      	ldr	r7, [r1, #8]
 8009dba:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009dbe:	00a2      	lsls	r2, r4, #2
 8009dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc2:	1886      	adds	r6, r0, r2
 8009dc4:	9a07      	ldr	r2, [sp, #28]
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	f000 81c3 	beq.w	800a152 <forward_dense+0x436>
 8009dcc:	f1a8 0210 	sub.w	r2, r8, #16
 8009dd0:	0912      	lsrs	r2, r2, #4
 8009dd2:	3201      	adds	r2, #1
 8009dd4:	0192      	lsls	r2, r2, #6
 8009dd6:	920c      	str	r2, [sp, #48]	; 0x30
 8009dd8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8009ddc:	920a      	str	r2, [sp, #40]	; 0x28
 8009dde:	689d      	ldr	r5, [r3, #8]
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	eddf aad0 	vldr	s21, [pc, #832]	; 800a124 <forward_dense+0x408>
 8009de6:	2200      	movs	r2, #0
 8009de8:	9205      	str	r2, [sp, #20]
 8009dea:	f008 020f 	and.w	r2, r8, #15
 8009dee:	920d      	str	r2, [sp, #52]	; 0x34
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d043      	beq.n	8009e7c <forward_dense+0x160>
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	689c      	ldr	r4, [r3, #8]
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	f1ba 0f00 	cmp.w	sl, #0
 8009dfe:	d042      	beq.n	8009e86 <forward_dense+0x16a>
 8009e00:	42b3      	cmp	r3, r6
 8009e02:	d22a      	bcs.n	8009e5a <forward_dense+0x13e>
 8009e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e06:	469b      	mov	fp, r3
 8009e08:	ab0f      	add	r3, sp, #60	; 0x3c
 8009e0a:	9303      	str	r3, [sp, #12]
 8009e0c:	2a04      	cmp	r2, #4
 8009e0e:	4633      	mov	r3, r6
 8009e10:	4646      	mov	r6, r8
 8009e12:	4698      	mov	r8, r3
 8009e14:	f000 8156 	beq.w	800a0c4 <forward_dense+0x3a8>
 8009e18:	2c00      	cmp	r4, #0
 8009e1a:	f000 8185 	beq.w	800a128 <forward_dense+0x40c>
 8009e1e:	f8d4 c000 	ldr.w	ip, [r4]
 8009e22:	9803      	ldr	r0, [sp, #12]
 8009e24:	9600      	str	r6, [sp, #0]
 8009e26:	463b      	mov	r3, r7
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4652      	mov	r2, sl
 8009e2c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8009e30:	f7fd fc8e 	bl	8007750 <ai_dict8_dot_array_f32>
 8009e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e36:	f84b 3b04 	str.w	r3, [fp], #4
 8009e3a:	45c3      	cmp	fp, r8
 8009e3c:	f104 0404 	add.w	r4, r4, #4
 8009e40:	444d      	add	r5, r9
 8009e42:	d3e9      	bcc.n	8009e18 <forward_dense+0xfc>
 8009e44:	4643      	mov	r3, r8
 8009e46:	46b0      	mov	r8, r6
 8009e48:	461e      	mov	r6, r3
 8009e4a:	9a04      	ldr	r2, [sp, #16]
 8009e4c:	43d3      	mvns	r3, r2
 8009e4e:	4433      	add	r3, r6
 8009e50:	f023 0303 	bic.w	r3, r3, #3
 8009e54:	3304      	adds	r3, #4
 8009e56:	18d3      	adds	r3, r2, r3
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e5c:	9b05      	ldr	r3, [sp, #20]
 8009e5e:	4417      	add	r7, r2
 8009e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e62:	4416      	add	r6, r2
 8009e64:	9a07      	ldr	r2, [sp, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	f000 8171 	beq.w	800a152 <forward_dense+0x436>
 8009e70:	9b08      	ldr	r3, [sp, #32]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	689d      	ldr	r5, [r3, #8]
 8009e76:	9b06      	ldr	r3, [sp, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1bb      	bne.n	8009df4 <forward_dense+0xd8>
 8009e7c:	461c      	mov	r4, r3
 8009e7e:	9b04      	ldr	r3, [sp, #16]
 8009e80:	f1ba 0f00 	cmp.w	sl, #0
 8009e84:	d1bc      	bne.n	8009e00 <forward_dense+0xe4>
 8009e86:	42b3      	cmp	r3, r6
 8009e88:	d2e7      	bcs.n	8009e5a <forward_dense+0x13e>
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e8e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8009e92:	eb07 0c03 	add.w	ip, r7, r3
 8009e96:	469e      	mov	lr, r3
 8009e98:	2c00      	cmp	r4, #0
 8009e9a:	f000 80ff 	beq.w	800a09c <forward_dense+0x380>
 8009e9e:	f1b8 0f0f 	cmp.w	r8, #15
 8009ea2:	edd4 fa00 	vldr	s31, [r4]
 8009ea6:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800a124 <forward_dense+0x408>
 8009eaa:	f104 0404 	add.w	r4, r4, #4
 8009eae:	f240 80fd 	bls.w	800a0ac <forward_dense+0x390>
 8009eb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009eb6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009eba:	4641      	mov	r1, r8
 8009ebc:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8009ec0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009ec4:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8009ec8:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8009ecc:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8009ed0:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8009ed4:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8009ed8:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8009edc:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8009ee0:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8009ee4:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8009ee8:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8009eec:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8009ef0:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8009ef4:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8009ef8:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8009efc:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8009f00:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8009f04:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8009f08:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8009f0c:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8009f10:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8009f14:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8009f18:	ed13 4a04 	vldr	s8, [r3, #-16]
 8009f1c:	ed52 4a04 	vldr	s9, [r2, #-16]
 8009f20:	ed12 5a03 	vldr	s10, [r2, #-12]
 8009f24:	ed53 5a03 	vldr	s11, [r3, #-12]
 8009f28:	ed12 6a02 	vldr	s12, [r2, #-8]
 8009f2c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8009f30:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8009f34:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8009f38:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8009f3c:	3910      	subs	r1, #16
 8009f3e:	290f      	cmp	r1, #15
 8009f40:	ed53 ea01 	vldr	s29, [r3, #-4]
 8009f44:	ed12 ea01 	vldr	s28, [r2, #-4]
 8009f48:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8009f4c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009f50:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009f54:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009f58:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009f5c:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8009f60:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009f64:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009f68:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009f6c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009f70:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009f74:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009f78:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009f7c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009f80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f84:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8009f88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009f8c:	d896      	bhi.n	8009ebc <forward_dense+0x1a0>
 8009f8e:	eb05 010e 	add.w	r1, r5, lr
 8009f92:	465b      	mov	r3, fp
 8009f94:	4662      	mov	r2, ip
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d075      	beq.n	800a086 <forward_dense+0x36a>
 8009f9a:	ed91 7a00 	vldr	s14, [r1]
 8009f9e:	edd2 7a00 	vldr	s15, [r2]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fa8:	d06d      	beq.n	800a086 <forward_dense+0x36a>
 8009faa:	ed91 7a01 	vldr	s14, [r1, #4]
 8009fae:	edd2 7a01 	vldr	s15, [r2, #4]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fb8:	d065      	beq.n	800a086 <forward_dense+0x36a>
 8009fba:	ed91 7a02 	vldr	s14, [r1, #8]
 8009fbe:	edd2 7a02 	vldr	s15, [r2, #8]
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fc8:	d05d      	beq.n	800a086 <forward_dense+0x36a>
 8009fca:	ed91 7a03 	vldr	s14, [r1, #12]
 8009fce:	edd2 7a03 	vldr	s15, [r2, #12]
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fd8:	d055      	beq.n	800a086 <forward_dense+0x36a>
 8009fda:	ed91 7a04 	vldr	s14, [r1, #16]
 8009fde:	edd2 7a04 	vldr	s15, [r2, #16]
 8009fe2:	2b05      	cmp	r3, #5
 8009fe4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009fe8:	d04d      	beq.n	800a086 <forward_dense+0x36a>
 8009fea:	ed91 7a05 	vldr	s14, [r1, #20]
 8009fee:	edd2 7a05 	vldr	s15, [r2, #20]
 8009ff2:	2b06      	cmp	r3, #6
 8009ff4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ff8:	d045      	beq.n	800a086 <forward_dense+0x36a>
 8009ffa:	ed91 7a06 	vldr	s14, [r1, #24]
 8009ffe:	edd2 7a06 	vldr	s15, [r2, #24]
 800a002:	2b07      	cmp	r3, #7
 800a004:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a008:	d03d      	beq.n	800a086 <forward_dense+0x36a>
 800a00a:	ed91 7a07 	vldr	s14, [r1, #28]
 800a00e:	edd2 7a07 	vldr	s15, [r2, #28]
 800a012:	2b08      	cmp	r3, #8
 800a014:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a018:	d035      	beq.n	800a086 <forward_dense+0x36a>
 800a01a:	ed91 7a08 	vldr	s14, [r1, #32]
 800a01e:	edd2 7a08 	vldr	s15, [r2, #32]
 800a022:	2b09      	cmp	r3, #9
 800a024:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a028:	d02d      	beq.n	800a086 <forward_dense+0x36a>
 800a02a:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800a02e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800a032:	2b0a      	cmp	r3, #10
 800a034:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a038:	d025      	beq.n	800a086 <forward_dense+0x36a>
 800a03a:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800a03e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800a042:	2b0b      	cmp	r3, #11
 800a044:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a048:	d01d      	beq.n	800a086 <forward_dense+0x36a>
 800a04a:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800a04e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800a052:	2b0c      	cmp	r3, #12
 800a054:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a058:	d015      	beq.n	800a086 <forward_dense+0x36a>
 800a05a:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800a05e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800a062:	2b0d      	cmp	r3, #13
 800a064:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a068:	d00d      	beq.n	800a086 <forward_dense+0x36a>
 800a06a:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800a06e:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800a072:	2b0e      	cmp	r3, #14
 800a074:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a078:	d005      	beq.n	800a086 <forward_dense+0x36a>
 800a07a:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800a07e:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800a082:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a086:	444d      	add	r5, r9
 800a088:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800a08c:	ece0 6a01 	vstmia	r0!, {s13}
 800a090:	42b0      	cmp	r0, r6
 800a092:	f4bf aeda 	bcs.w	8009e4a <forward_dense+0x12e>
 800a096:	2c00      	cmp	r4, #0
 800a098:	f47f af01 	bne.w	8009e9e <forward_dense+0x182>
 800a09c:	f1b8 0f0f 	cmp.w	r8, #15
 800a0a0:	eef0 fa6a 	vmov.f32	s31, s21
 800a0a4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a124 <forward_dense+0x408>
 800a0a8:	f63f af03 	bhi.w	8009eb2 <forward_dense+0x196>
 800a0ac:	4643      	mov	r3, r8
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	463a      	mov	r2, r7
 800a0b2:	e770      	b.n	8009f96 <forward_dense+0x27a>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	deff      	udf	#255	; 0xff
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	deff      	udf	#255	; 0xff
 800a0be:	2300      	movs	r3, #0
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	deff      	udf	#255	; 0xff
 800a0c4:	b1ac      	cbz	r4, 800a0f2 <forward_dense+0x3d6>
 800a0c6:	f8d4 c000 	ldr.w	ip, [r4]
 800a0ca:	9803      	ldr	r0, [sp, #12]
 800a0cc:	9600      	str	r6, [sp, #0]
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4652      	mov	r2, sl
 800a0d4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800a0d8:	f7fd fc08 	bl	80078ec <ai_dict4_dot_array_f32>
 800a0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0de:	f84b 3b04 	str.w	r3, [fp], #4
 800a0e2:	45c3      	cmp	fp, r8
 800a0e4:	f104 0404 	add.w	r4, r4, #4
 800a0e8:	444d      	add	r5, r9
 800a0ea:	f4bf aeab 	bcs.w	8009e44 <forward_dense+0x128>
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	d1e9      	bne.n	800a0c6 <forward_dense+0x3aa>
 800a0f2:	4634      	mov	r4, r6
 800a0f4:	4646      	mov	r6, r8
 800a0f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a0fa:	9400      	str	r4, [sp, #0]
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	4629      	mov	r1, r5
 800a100:	4652      	mov	r2, sl
 800a102:	4640      	mov	r0, r8
 800a104:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800a108:	f7fd fbf0 	bl	80078ec <ai_dict4_dot_array_f32>
 800a10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10e:	f84b 3b04 	str.w	r3, [fp], #4
 800a112:	45b3      	cmp	fp, r6
 800a114:	444d      	add	r5, r9
 800a116:	d3f0      	bcc.n	800a0fa <forward_dense+0x3de>
 800a118:	46a0      	mov	r8, r4
 800a11a:	e696      	b.n	8009e4a <forward_dense+0x12e>
 800a11c:	9406      	str	r4, [sp, #24]
 800a11e:	e627      	b.n	8009d70 <forward_dense+0x54>
 800a120:	9306      	str	r3, [sp, #24]
 800a122:	e625      	b.n	8009d70 <forward_dense+0x54>
 800a124:	00000000 	.word	0x00000000
 800a128:	4634      	mov	r4, r6
 800a12a:	4646      	mov	r6, r8
 800a12c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a130:	9400      	str	r4, [sp, #0]
 800a132:	463b      	mov	r3, r7
 800a134:	4629      	mov	r1, r5
 800a136:	4652      	mov	r2, sl
 800a138:	4640      	mov	r0, r8
 800a13a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800a13e:	f7fd fb07 	bl	8007750 <ai_dict8_dot_array_f32>
 800a142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a144:	f84b 3b04 	str.w	r3, [fp], #4
 800a148:	45b3      	cmp	fp, r6
 800a14a:	444d      	add	r5, r9
 800a14c:	d3f0      	bcc.n	800a130 <forward_dense+0x414>
 800a14e:	46a0      	mov	r8, r4
 800a150:	e67b      	b.n	8009e4a <forward_dense+0x12e>
 800a152:	b011      	add	sp, #68	; 0x44
 800a154:	ecbd 8b10 	vpop	{d8-d15}
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800a160:	e624      	b.n	8009dac <forward_dense+0x90>
 800a162:	2300      	movs	r3, #0
 800a164:	9306      	str	r3, [sp, #24]
 800a166:	e603      	b.n	8009d70 <forward_dense+0x54>
 800a168:	9308      	str	r3, [sp, #32]
 800a16a:	e5f4      	b.n	8009d56 <forward_dense+0x3a>

0800a16c <nl_func_relu_array_f32>:
 800a16c:	b410      	push	{r4}
 800a16e:	698c      	ldr	r4, [r1, #24]
 800a170:	6981      	ldr	r1, [r0, #24]
 800a172:	68a3      	ldr	r3, [r4, #8]
 800a174:	6889      	ldr	r1, [r1, #8]
 800a176:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a17a:	3a01      	subs	r2, #1
 800a17c:	0092      	lsls	r2, r2, #2
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	d216      	bcs.n	800a1b0 <nl_func_relu_array_f32+0x44>
 800a182:	3204      	adds	r2, #4
 800a184:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a1b8 <nl_func_relu_array_f32+0x4c>
 800a188:	4411      	add	r1, r2
 800a18a:	3304      	adds	r3, #4
 800a18c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a198:	bfb8      	it	lt
 800a19a:	eef0 7a47 	vmovlt.f32	s15, s14
 800a19e:	ed61 7a01 	vstmdb	r1!, {s15}
 800a1a2:	68a0      	ldr	r0, [r4, #8]
 800a1a4:	f1a3 0208 	sub.w	r2, r3, #8
 800a1a8:	4290      	cmp	r0, r2
 800a1aa:	f1a3 0304 	sub.w	r3, r3, #4
 800a1ae:	d9ed      	bls.n	800a18c <nl_func_relu_array_f32+0x20>
 800a1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	00000000 	.word	0x00000000

0800a1bc <nl_func_sm_array_f32>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	ed2d 8b04 	vpush	{d8-d9}
 800a1c4:	b089      	sub	sp, #36	; 0x24
 800a1c6:	698f      	ldr	r7, [r1, #24]
 800a1c8:	6984      	ldr	r4, [r0, #24]
 800a1ca:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800a1ce:	68bd      	ldr	r5, [r7, #8]
 800a1d0:	9402      	str	r4, [sp, #8]
 800a1d2:	4626      	mov	r6, r4
 800a1d4:	4696      	mov	lr, r2
 800a1d6:	eba2 020c 	sub.w	r2, r2, ip
 800a1da:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a1de:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	68b6      	ldr	r6, [r6, #8]
 800a1e4:	ebae 0e04 	sub.w	lr, lr, r4
 800a1e8:	4295      	cmp	r5, r2
 800a1ea:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800a1ee:	d354      	bcc.n	800a29a <nl_func_sm_array_f32+0xde>
 800a1f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a1f4:	f1cc 0200 	rsb	r2, ip, #0
 800a1f8:	00a4      	lsls	r4, r4, #2
 800a1fa:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	9204      	str	r2, [sp, #16]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4262      	negs	r2, r4
 800a206:	9205      	str	r2, [sp, #20]
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a20e:	9b02      	ldr	r3, [sp, #8]
 800a210:	9a07      	ldr	r2, [sp, #28]
 800a212:	60bd      	str	r5, [r7, #8]
 800a214:	609e      	str	r6, [r3, #8]
 800a216:	9b06      	ldr	r3, [sp, #24]
 800a218:	6992      	ldr	r2, [r2, #24]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	6894      	ldr	r4, [r2, #8]
 800a21e:	9a03      	ldr	r2, [sp, #12]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	2a01      	cmp	r2, #1
 800a224:	ed93 8a00 	vldr	s16, [r3]
 800a228:	d940      	bls.n	800a2ac <nl_func_sm_array_f32+0xf0>
 800a22a:	9901      	ldr	r1, [sp, #4]
 800a22c:	1d1a      	adds	r2, r3, #4
 800a22e:	eb03 0b01 	add.w	fp, r3, r1
 800a232:	ecf2 7a01 	vldmia	r2!, {s15}
 800a236:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a23e:	bfb8      	it	lt
 800a240:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a244:	4593      	cmp	fp, r2
 800a246:	d1f4      	bne.n	800a232 <nl_func_sm_array_f32+0x76>
 800a248:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800a2b8 <nl_func_sm_array_f32+0xfc>
 800a24c:	469a      	mov	sl, r3
 800a24e:	46a1      	mov	r9, r4
 800a250:	46a0      	mov	r8, r4
 800a252:	ecba 0a01 	vldmia	sl!, {s0}
 800a256:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a25a:	f003 facd 	bl	800d7f8 <expf>
 800a25e:	45d3      	cmp	fp, sl
 800a260:	eca8 0a01 	vstmia	r8!, {s0}
 800a264:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a268:	d1f3      	bne.n	800a252 <nl_func_sm_array_f32+0x96>
 800a26a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a272:	d00b      	beq.n	800a28c <nl_func_sm_array_f32+0xd0>
 800a274:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a278:	9b01      	ldr	r3, [sp, #4]
 800a27a:	441c      	add	r4, r3
 800a27c:	edd9 7a00 	vldr	s15, [r9]
 800a280:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a284:	ece9 7a01 	vstmia	r9!, {s15}
 800a288:	454c      	cmp	r4, r9
 800a28a:	d1f7      	bne.n	800a27c <nl_func_sm_array_f32+0xc0>
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	441d      	add	r5, r3
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	42aa      	cmp	r2, r5
 800a296:	441e      	add	r6, r3
 800a298:	d9b9      	bls.n	800a20e <nl_func_sm_array_f32+0x52>
 800a29a:	60ba      	str	r2, [r7, #8]
 800a29c:	9a02      	ldr	r2, [sp, #8]
 800a29e:	68d3      	ldr	r3, [r2, #12]
 800a2a0:	6093      	str	r3, [r2, #8]
 800a2a2:	b009      	add	sp, #36	; 0x24
 800a2a4:	ecbd 8b04 	vpop	{d8-d9}
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	d0ed      	beq.n	800a28c <nl_func_sm_array_f32+0xd0>
 800a2b0:	9a01      	ldr	r2, [sp, #4]
 800a2b2:	eb03 0b02 	add.w	fp, r3, r2
 800a2b6:	e7c7      	b.n	800a248 <nl_func_sm_array_f32+0x8c>
 800a2b8:	00000000 	.word	0x00000000

0800a2bc <forward_sm>:
 800a2bc:	6982      	ldr	r2, [r0, #24]
 800a2be:	8813      	ldrh	r3, [r2, #0]
 800a2c0:	b32b      	cbz	r3, 800a30e <forward_sm+0x52>
 800a2c2:	6852      	ldr	r2, [r2, #4]
 800a2c4:	6851      	ldr	r1, [r2, #4]
 800a2c6:	b101      	cbz	r1, 800a2ca <forward_sm+0xe>
 800a2c8:	6809      	ldr	r1, [r1, #0]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d91c      	bls.n	800a308 <forward_sm+0x4c>
 800a2ce:	6913      	ldr	r3, [r2, #16]
 800a2d0:	b1c3      	cbz	r3, 800a304 <forward_sm+0x48>
 800a2d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	688c      	ldr	r4, [r1, #8]
 800a2d8:	68c3      	ldr	r3, [r0, #12]
 800a2da:	68ce      	ldr	r6, [r1, #12]
 800a2dc:	685f      	ldr	r7, [r3, #4]
 800a2de:	6873      	ldr	r3, [r6, #4]
 800a2e0:	0a24      	lsrs	r4, r4, #8
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	d015      	beq.n	800a312 <forward_sm+0x56>
 800a2e6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2f0:	42a6      	cmp	r6, r4
 800a2f2:	fb05 f202 	mul.w	r2, r5, r2
 800a2f6:	d1f9      	bne.n	800a2ec <forward_sm+0x30>
 800a2f8:	e9cd 3700 	strd	r3, r7, [sp]
 800a2fc:	f7ff ff5e 	bl	800a1bc <nl_func_sm_array_f32>
 800a300:	b003      	add	sp, #12
 800a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	deff      	udf	#255	; 0xff
 800a308:	2300      	movs	r3, #0
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	deff      	udf	#255	; 0xff
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	deff      	udf	#255	; 0xff
 800a312:	2201      	movs	r2, #1
 800a314:	e9cd 3700 	strd	r3, r7, [sp]
 800a318:	f7ff ff50 	bl	800a1bc <nl_func_sm_array_f32>
 800a31c:	b003      	add	sp, #12
 800a31e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a320 <pool_func_ap_array_f32>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	b095      	sub	sp, #84	; 0x54
 800a326:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800a32a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a32c:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 800a330:	68a8      	ldr	r0, [r5, #8]
 800a332:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800a336:	9509      	str	r5, [sp, #36]	; 0x24
 800a338:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800a33c:	9003      	str	r0, [sp, #12]
 800a33e:	950e      	str	r5, [sp, #56]	; 0x38
 800a340:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800a344:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 800a348:	9004      	str	r0, [sp, #16]
 800a34a:	9507      	str	r5, [sp, #28]
 800a34c:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 800a350:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 800a354:	900a      	str	r0, [sp, #40]	; 0x28
 800a356:	950c      	str	r5, [sp, #48]	; 0x30
 800a358:	f8bd 0080 	ldrh.w	r0, [sp, #128]	; 0x80
 800a35c:	9201      	str	r2, [sp, #4]
 800a35e:	468a      	mov	sl, r1
 800a360:	4699      	mov	r9, r3
 800a362:	b95c      	cbnz	r4, 800a37c <pool_func_ap_array_f32+0x5c>
 800a364:	b950      	cbnz	r0, 800a37c <pool_func_ap_array_f32+0x5c>
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	1a5a      	subs	r2, r3, r1
 800a36a:	9b07      	ldr	r3, [sp, #28]
 800a36c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a36e:	3a01      	subs	r2, #1
 800a370:	3b01      	subs	r3, #1
 800a372:	fb13 2301 	smlabb	r3, r3, r1, r2
 800a376:	041a      	lsls	r2, r3, #16
 800a378:	f100 80a6 	bmi.w	800a4c8 <pool_func_ap_array_f32+0x1a8>
 800a37c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 8093 	beq.w	800a4aa <pool_func_ap_array_f32+0x18a>
 800a384:	9b07      	ldr	r3, [sp, #28]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 808f 	beq.w	800a4aa <pool_func_ap_array_f32+0x18a>
 800a38c:	f1b9 0f00 	cmp.w	r9, #0
 800a390:	f000 808b 	beq.w	800a4aa <pool_func_ap_array_f32+0x18a>
 800a394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a396:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 800a614 <pool_func_ap_array_f32+0x2f4>
 800a39a:	1b1c      	subs	r4, r3, r4
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	1a1b      	subs	r3, r3, r0
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4240      	negs	r0, r0
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	b2a1      	uxth	r1, r4
 800a3a8:	9310      	str	r3, [sp, #64]	; 0x40
 800a3aa:	b283      	uxth	r3, r0
 800a3ac:	920f      	str	r2, [sp, #60]	; 0x3c
 800a3ae:	910d      	str	r1, [sp, #52]	; 0x34
 800a3b0:	9311      	str	r3, [sp, #68]	; 0x44
 800a3b2:	9c07      	ldr	r4, [sp, #28]
 800a3b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b8:	fb02 f204 	mul.w	r2, r2, r4
 800a3bc:	1acb      	subs	r3, r1, r3
 800a3be:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3c2:	9206      	str	r2, [sp, #24]
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	b21b      	sxth	r3, r3
 800a3c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3ca:	9304      	str	r3, [sp, #16]
 800a3cc:	9008      	str	r0, [sp, #32]
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	fa0f f881 	sxth.w	r8, r1
 800a3d4:	9205      	str	r2, [sp, #20]
 800a3d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3d8:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 800a3dc:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f04f 0e00 	mov.w	lr, #0
 800a3e6:	fb09 f303 	mul.w	r3, r9, r3
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800a3f0:	4675      	mov	r5, lr
 800a3f2:	9904      	ldr	r1, [sp, #16]
 800a3f4:	4588      	cmp	r8, r1
 800a3f6:	dd64      	ble.n	800a4c2 <pool_func_ap_array_f32+0x1a2>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800a618 <pool_func_ap_array_f32+0x2f8>
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	4564      	cmp	r4, ip
 800a402:	dd1c      	ble.n	800a43e <pool_func_ap_array_f32+0x11e>
 800a404:	2900      	cmp	r1, #0
 800a406:	fb0a f601 	mul.w	r6, sl, r1
 800a40a:	db18      	blt.n	800a43e <pool_func_ap_array_f32+0x11e>
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	4299      	cmp	r1, r3
 800a410:	da15      	bge.n	800a43e <pool_func_ap_array_f32+0x11e>
 800a412:	f1bc 0f00 	cmp.w	ip, #0
 800a416:	4663      	mov	r3, ip
 800a418:	db4a      	blt.n	800a4b0 <pool_func_ap_array_f32+0x190>
 800a41a:	18f2      	adds	r2, r6, r3
 800a41c:	1c58      	adds	r0, r3, #1
 800a41e:	fb09 5202 	mla	r2, r9, r2, r5
 800a422:	459a      	cmp	sl, r3
 800a424:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800a428:	b203      	sxth	r3, r0
 800a42a:	dd06      	ble.n	800a43a <pool_func_ap_array_f32+0x11a>
 800a42c:	edd2 7a00 	vldr	s15, [r2]
 800a430:	9a00      	ldr	r2, [sp, #0]
 800a432:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a436:	3201      	adds	r2, #1
 800a438:	9200      	str	r2, [sp, #0]
 800a43a:	429c      	cmp	r4, r3
 800a43c:	dced      	bgt.n	800a41a <pool_func_ap_array_f32+0xfa>
 800a43e:	3101      	adds	r1, #1
 800a440:	b209      	sxth	r1, r1
 800a442:	4588      	cmp	r8, r1
 800a444:	dcdc      	bgt.n	800a400 <pool_func_ap_array_f32+0xe0>
 800a446:	eddd 7a00 	vldr	s15, [sp]
 800a44a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a44e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a452:	9b02      	ldr	r3, [sp, #8]
 800a454:	f10e 0e01 	add.w	lr, lr, #1
 800a458:	441d      	add	r5, r3
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	fa0f fe8e 	sxth.w	lr, lr
 800a460:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a464:	45ce      	cmp	lr, r9
 800a466:	edc5 6a00 	vstr	s13, [r5]
 800a46a:	4675      	mov	r5, lr
 800a46c:	dbc1      	blt.n	800a3f2 <pool_func_ap_array_f32+0xd2>
 800a46e:	9b08      	ldr	r3, [sp, #32]
 800a470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a472:	3301      	adds	r3, #1
 800a474:	b219      	sxth	r1, r3
 800a476:	9b06      	ldr	r3, [sp, #24]
 800a478:	9108      	str	r1, [sp, #32]
 800a47a:	461a      	mov	r2, r3
 800a47c:	4402      	add	r2, r0
 800a47e:	9b05      	ldr	r3, [sp, #20]
 800a480:	b292      	uxth	r2, r2
 800a482:	9206      	str	r2, [sp, #24]
 800a484:	9a07      	ldr	r2, [sp, #28]
 800a486:	4403      	add	r3, r0
 800a488:	b29b      	uxth	r3, r3
 800a48a:	428a      	cmp	r2, r1
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	460b      	mov	r3, r1
 800a490:	dca1      	bgt.n	800a3d6 <pool_func_ap_array_f32+0xb6>
 800a492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a494:	3301      	adds	r3, #1
 800a496:	b21a      	sxth	r2, r3
 800a498:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800a49c:	440b      	add	r3, r1
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	930d      	str	r3, [sp, #52]	; 0x34
 800a4a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4a4:	920f      	str	r2, [sp, #60]	; 0x3c
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	dc83      	bgt.n	800a3b2 <pool_func_ap_array_f32+0x92>
 800a4aa:	b015      	add	sp, #84	; 0x54
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	b21b      	sxth	r3, r3
 800a4b4:	42bb      	cmp	r3, r7
 800a4b6:	dac0      	bge.n	800a43a <pool_func_ap_array_f32+0x11a>
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	42bb      	cmp	r3, r7
 800a4be:	dbf7      	blt.n	800a4b0 <pool_func_ap_array_f32+0x190>
 800a4c0:	e7bb      	b.n	800a43a <pool_func_ap_array_f32+0x11a>
 800a4c2:	eef0 6a46 	vmov.f32	s13, s12
 800a4c6:	e7c4      	b.n	800a452 <pool_func_ap_array_f32+0x132>
 800a4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ca:	9a01      	ldr	r2, [sp, #4]
 800a4cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a4ce:	1a9a      	subs	r2, r3, r2
 800a4d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4d2:	3a01      	subs	r2, #1
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	fb13 2301 	smlabb	r3, r3, r1, r2
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	f57f af4e 	bpl.w	800a37c <pool_func_ap_array_f32+0x5c>
 800a4e0:	fb09 f30a 	mul.w	r3, r9, sl
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
 800a4ea:	9310      	str	r3, [sp, #64]	; 0x40
 800a4ec:	ed9f 6a49 	vldr	s12, [pc, #292]	; 800a614 <pool_func_ap_array_f32+0x2f4>
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f2:	9001      	str	r0, [sp, #4]
 800a4f4:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800a4fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a500:	429a      	cmp	r2, r3
 800a502:	ddd2      	ble.n	800a4aa <pool_func_ap_array_f32+0x18a>
 800a504:	9a00      	ldr	r2, [sp, #0]
 800a506:	9907      	ldr	r1, [sp, #28]
 800a508:	fa0f fc82 	sxth.w	ip, r2
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d074      	beq.n	800a5fa <pool_func_ap_array_f32+0x2da>
 800a510:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a512:	fb01 f303 	mul.w	r3, r1, r3
 800a516:	1a12      	subs	r2, r2, r0
 800a518:	9306      	str	r3, [sp, #24]
 800a51a:	b213      	sxth	r3, r2
 800a51c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51e:	f1b9 0f00 	cmp.w	r9, #0
 800a522:	d06a      	beq.n	800a5fa <pool_func_ap_array_f32+0x2da>
 800a524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a526:	fb02 f303 	mul.w	r3, r2, r3
 800a52a:	f04f 0b00 	mov.w	fp, #0
 800a52e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	f8cd b014 	str.w	fp, [sp, #20]
 800a536:	46da      	mov	sl, fp
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	9902      	ldr	r1, [sp, #8]
 800a53e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800a542:	eb0a 0203 	add.w	r2, sl, r3
 800a546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a548:	fa0f f78b 	sxth.w	r7, fp
 800a54c:	1e4e      	subs	r6, r1, #1
 800a54e:	18fb      	adds	r3, r7, r3
 800a550:	eba6 060b 	sub.w	r6, r6, fp
 800a554:	f04f 0a00 	mov.w	sl, #0
 800a558:	fb09 f202 	mul.w	r2, r9, r2
 800a55c:	fb09 f303 	mul.w	r3, r9, r3
 800a560:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800a564:	9208      	str	r2, [sp, #32]
 800a566:	930d      	str	r3, [sp, #52]	; 0x34
 800a568:	b2b6      	uxth	r6, r6
 800a56a:	46d0      	mov	r8, sl
 800a56c:	b209      	sxth	r1, r1
 800a56e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a570:	4584      	cmp	ip, r0
 800a572:	dd4b      	ble.n	800a60c <pool_func_ap_array_f32+0x2ec>
 800a574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a576:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a618 <pool_func_ap_array_f32+0x2f8>
 800a57a:	eb08 0503 	add.w	r5, r8, r3
 800a57e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a580:	2400      	movs	r4, #0
 800a582:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a586:	42b9      	cmp	r1, r7
 800a588:	dd0c      	ble.n	800a5a4 <pool_func_ap_array_f32+0x284>
 800a58a:	462a      	mov	r2, r5
 800a58c:	463b      	mov	r3, r7
 800a58e:	3301      	adds	r3, #1
 800a590:	ed92 7a00 	vldr	s14, [r2]
 800a594:	b21b      	sxth	r3, r3
 800a596:	428b      	cmp	r3, r1
 800a598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a59c:	4472      	add	r2, lr
 800a59e:	d1f6      	bne.n	800a58e <pool_func_ap_array_f32+0x26e>
 800a5a0:	3401      	adds	r4, #1
 800a5a2:	4434      	add	r4, r6
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	b200      	sxth	r0, r0
 800a5a8:	4584      	cmp	ip, r0
 800a5aa:	445d      	add	r5, fp
 800a5ac:	d1eb      	bne.n	800a586 <pool_func_ap_array_f32+0x266>
 800a5ae:	ee07 4a10 	vmov	s14, r4
 800a5b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a5ba:	9b08      	ldr	r3, [sp, #32]
 800a5bc:	9a03      	ldr	r2, [sp, #12]
 800a5be:	f10a 0a01 	add.w	sl, sl, #1
 800a5c2:	4443      	add	r3, r8
 800a5c4:	fa0f fa8a 	sxth.w	sl, sl
 800a5c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5cc:	45ca      	cmp	sl, r9
 800a5ce:	46d0      	mov	r8, sl
 800a5d0:	edc3 6a00 	vstr	s13, [r3]
 800a5d4:	dbcb      	blt.n	800a56e <pool_func_ap_array_f32+0x24e>
 800a5d6:	9b05      	ldr	r3, [sp, #20]
 800a5d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5da:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b21a      	sxth	r2, r3
 800a5e2:	9b02      	ldr	r3, [sp, #8]
 800a5e4:	9205      	str	r2, [sp, #20]
 800a5e6:	440b      	add	r3, r1
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	9302      	str	r3, [sp, #8]
 800a5ec:	9b07      	ldr	r3, [sp, #28]
 800a5ee:	448b      	add	fp, r1
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	fa1f fb8b 	uxth.w	fp, fp
 800a5f6:	4692      	mov	sl, r2
 800a5f8:	dc9f      	bgt.n	800a53a <pool_func_ap_array_f32+0x21a>
 800a5fa:	9b00      	ldr	r3, [sp, #0]
 800a5fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5fe:	4413      	add	r3, r2
 800a600:	b29b      	uxth	r3, r3
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	3301      	adds	r3, #1
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	e776      	b.n	800a4fa <pool_func_ap_array_f32+0x1da>
 800a60c:	eef0 6a46 	vmov.f32	s13, s12
 800a610:	e7d3      	b.n	800a5ba <pool_func_ap_array_f32+0x29a>
 800a612:	bf00      	nop
 800a614:	7fc00000 	.word	0x7fc00000
 800a618:	00000000 	.word	0x00000000

0800a61c <ai_check_custom_types>:
 800a61c:	4b13      	ldr	r3, [pc, #76]	; (800a66c <ai_check_custom_types+0x50>)
 800a61e:	b082      	sub	sp, #8
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	b118      	cbz	r0, 800a62e <ai_check_custom_types+0x12>
 800a626:	7803      	ldrb	r3, [r0, #0]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d002      	beq.n	800a632 <ai_check_custom_types+0x16>
 800a62c:	2000      	movs	r0, #0
 800a62e:	b002      	add	sp, #8
 800a630:	4770      	bx	lr
 800a632:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a636:	4293      	cmp	r3, r2
 800a638:	d004      	beq.n	800a644 <ai_check_custom_types+0x28>
 800a63a:	2001      	movs	r0, #1
 800a63c:	f080 0001 	eor.w	r0, r0, #1
 800a640:	b002      	add	sp, #8
 800a642:	4770      	bx	lr
 800a644:	7842      	ldrb	r2, [r0, #1]
 800a646:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	f100 0001 	add.w	r0, r0, #1
 800a650:	d1f3      	bne.n	800a63a <ai_check_custom_types+0x1e>
 800a652:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a656:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d1ed      	bne.n	800a63a <ai_check_custom_types+0x1e>
 800a65e:	7842      	ldrb	r2, [r0, #1]
 800a660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a664:	429a      	cmp	r2, r3
 800a666:	d1e8      	bne.n	800a63a <ai_check_custom_types+0x1e>
 800a668:	2000      	movs	r0, #0
 800a66a:	e7e7      	b.n	800a63c <ai_check_custom_types+0x20>
 800a66c:	0800dd40 	.word	0x0800dd40

0800a670 <ai_layers_init_all>:
 800a670:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a672:	b17a      	cbz	r2, 800a694 <ai_layers_init_all+0x24>
 800a674:	6913      	ldr	r3, [r2, #16]
 800a676:	60d0      	str	r0, [r2, #12]
 800a678:	429a      	cmp	r2, r3
 800a67a:	f04f 0201 	mov.w	r2, #1
 800a67e:	d009      	beq.n	800a694 <ai_layers_init_all+0x24>
 800a680:	b143      	cbz	r3, 800a694 <ai_layers_init_all+0x24>
 800a682:	6919      	ldr	r1, [r3, #16]
 800a684:	60d8      	str	r0, [r3, #12]
 800a686:	4299      	cmp	r1, r3
 800a688:	f102 0201 	add.w	r2, r2, #1
 800a68c:	d002      	beq.n	800a694 <ai_layers_init_all+0x24>
 800a68e:	460b      	mov	r3, r1
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1f6      	bne.n	800a682 <ai_layers_init_all+0x12>
 800a694:	4610      	mov	r0, r2
 800a696:	4770      	bx	lr

0800a698 <ai_layers_post_init_all>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800a69c:	b18c      	cbz	r4, 800a6c2 <ai_layers_post_init_all+0x2a>
 800a69e:	2500      	movs	r5, #0
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	f013 0f01 	tst.w	r3, #1
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	d003      	beq.n	800a6b2 <ai_layers_post_init_all+0x1a>
 800a6aa:	6a23      	ldr	r3, [r4, #32]
 800a6ac:	b10b      	cbz	r3, 800a6b2 <ai_layers_post_init_all+0x1a>
 800a6ae:	4798      	blx	r3
 800a6b0:	3501      	adds	r5, #1
 800a6b2:	6923      	ldr	r3, [r4, #16]
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	d002      	beq.n	800a6be <ai_layers_post_init_all+0x26>
 800a6b8:	461c      	mov	r4, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1f0      	bne.n	800a6a0 <ai_layers_post_init_all+0x8>
 800a6be:	4628      	mov	r0, r5
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	4625      	mov	r5, r4
 800a6c4:	e7fb      	b.n	800a6be <ai_layers_post_init_all+0x26>
 800a6c6:	bf00      	nop

0800a6c8 <ai_layers_forward_all>:
 800a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6cc:	6d87      	ldr	r7, [r0, #88]	; 0x58
 800a6ce:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	2f00      	cmp	r7, #0
 800a6d4:	d02c      	beq.n	800a730 <ai_layers_forward_all+0x68>
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	d03f      	beq.n	800a75a <ai_layers_forward_all+0x92>
 800a6da:	6545      	str	r5, [r0, #84]	; 0x54
 800a6dc:	4629      	mov	r1, r5
 800a6de:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	47b8      	blx	r7
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a6e8:	46b0      	mov	r8, r6
 800a6ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a6ec:	2002      	movs	r0, #2
 800a6ee:	47b8      	blx	r7
 800a6f0:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800a6f2:	696b      	ldr	r3, [r5, #20]
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	4798      	blx	r3
 800a6f8:	692b      	ldr	r3, [r5, #16]
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	f04f 0003 	mov.w	r0, #3
 800a700:	4619      	mov	r1, r3
 800a702:	d009      	beq.n	800a718 <ai_layers_forward_all+0x50>
 800a704:	6563      	str	r3, [r4, #84]	; 0x54
 800a706:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a708:	47b8      	blx	r7
 800a70a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a70c:	3601      	adds	r6, #1
 800a70e:	2900      	cmp	r1, #0
 800a710:	d1eb      	bne.n	800a6ea <ai_layers_forward_all+0x22>
 800a712:	4630      	mov	r0, r6
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	2100      	movs	r1, #0
 800a71a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 800a71e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a720:	47b8      	blx	r7
 800a722:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a724:	3601      	adds	r6, #1
 800a726:	2900      	cmp	r1, #0
 800a728:	d1df      	bne.n	800a6ea <ai_layers_forward_all+0x22>
 800a72a:	4630      	mov	r0, r6
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	b19d      	cbz	r5, 800a75a <ai_layers_forward_all+0x92>
 800a732:	6545      	str	r5, [r0, #84]	; 0x54
 800a734:	463e      	mov	r6, r7
 800a736:	696b      	ldr	r3, [r5, #20]
 800a738:	4628      	mov	r0, r5
 800a73a:	4798      	blx	r3
 800a73c:	692b      	ldr	r3, [r5, #16]
 800a73e:	42ab      	cmp	r3, r5
 800a740:	f106 0601 	add.w	r6, r6, #1
 800a744:	d004      	beq.n	800a750 <ai_layers_forward_all+0x88>
 800a746:	6563      	str	r3, [r4, #84]	; 0x54
 800a748:	461d      	mov	r5, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f3      	bne.n	800a736 <ai_layers_forward_all+0x6e>
 800a74e:	e7e0      	b.n	800a712 <ai_layers_forward_all+0x4a>
 800a750:	2300      	movs	r3, #0
 800a752:	6563      	str	r3, [r4, #84]	; 0x54
 800a754:	4630      	mov	r0, r6
 800a756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75a:	462e      	mov	r6, r5
 800a75c:	4630      	mov	r0, r6
 800a75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a762:	bf00      	nop

0800a764 <ai_layers_destroy_all>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800a768:	b18c      	cbz	r4, 800a78e <ai_layers_destroy_all+0x2a>
 800a76a:	2500      	movs	r5, #0
 800a76c:	6863      	ldr	r3, [r4, #4]
 800a76e:	f013 0f04 	tst.w	r3, #4
 800a772:	4620      	mov	r0, r4
 800a774:	d003      	beq.n	800a77e <ai_layers_destroy_all+0x1a>
 800a776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a778:	b10b      	cbz	r3, 800a77e <ai_layers_destroy_all+0x1a>
 800a77a:	4798      	blx	r3
 800a77c:	3501      	adds	r5, #1
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	42a3      	cmp	r3, r4
 800a782:	d002      	beq.n	800a78a <ai_layers_destroy_all+0x26>
 800a784:	461c      	mov	r4, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1f0      	bne.n	800a76c <ai_layers_destroy_all+0x8>
 800a78a:	4628      	mov	r0, r5
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	4625      	mov	r5, r4
 800a790:	e7fb      	b.n	800a78a <ai_layers_destroy_all+0x26>
 800a792:	bf00      	nop

0800a794 <ai_array_to_buffer_fmt>:
 800a794:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d02e      	beq.n	800a7fa <ai_array_to_buffer_fmt+0x66>
 800a79c:	4a1b      	ldr	r2, [pc, #108]	; (800a80c <ai_array_to_buffer_fmt+0x78>)
 800a79e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d00e      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7a6:	dd11      	ble.n	800a7cc <ai_array_to_buffer_fmt+0x38>
 800a7a8:	4a19      	ldr	r2, [pc, #100]	; (800a810 <ai_array_to_buffer_fmt+0x7c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d00a      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7ae:	dd18      	ble.n	800a7e2 <ai_array_to_buffer_fmt+0x4e>
 800a7b0:	4a18      	ldr	r2, [pc, #96]	; (800a814 <ai_array_to_buffer_fmt+0x80>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d006      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7b6:	4a18      	ldr	r2, [pc, #96]	; (800a818 <ai_array_to_buffer_fmt+0x84>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d003      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7bc:	4a17      	ldr	r2, [pc, #92]	; (800a81c <ai_array_to_buffer_fmt+0x88>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d000      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7c2:	2340      	movs	r3, #64	; 0x40
 800a7c4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a7c8:	4318      	orrs	r0, r3
 800a7ca:	4770      	bx	lr
 800a7cc:	4a14      	ldr	r2, [pc, #80]	; (800a820 <ai_array_to_buffer_fmt+0x8c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d0f8      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7d2:	dd06      	ble.n	800a7e2 <ai_array_to_buffer_fmt+0x4e>
 800a7d4:	4a13      	ldr	r2, [pc, #76]	; (800a824 <ai_array_to_buffer_fmt+0x90>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d0f4      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7da:	320f      	adds	r2, #15
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d0f1      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7e0:	e7ef      	b.n	800a7c2 <ai_array_to_buffer_fmt+0x2e>
 800a7e2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d0ec      	beq.n	800a7c4 <ai_array_to_buffer_fmt+0x30>
 800a7ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d1e7      	bne.n	800a7c2 <ai_array_to_buffer_fmt+0x2e>
 800a7f2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a7f6:	4318      	orrs	r0, r3
 800a7f8:	4770      	bx	lr
 800a7fa:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <ai_array_to_buffer_fmt+0x94>)
 800a7fc:	4003      	ands	r3, r0
 800a7fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a802:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a806:	4318      	orrs	r0, r3
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	00060440 	.word	0x00060440
 800a810:	00840447 	.word	0x00840447
 800a814:	0084084f 	.word	0x0084084f
 800a818:	01821040 	.word	0x01821040
 800a81c:	00840840 	.word	0x00840840
 800a820:	00040447 	.word	0x00040447
 800a824:	00040840 	.word	0x00040840
 800a828:	00803fff 	.word	0x00803fff

0800a82c <ai_array_get_byte_size>:
 800a82c:	b1c1      	cbz	r1, 800a860 <ai_array_get_byte_size+0x34>
 800a82e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800a832:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a836:	4413      	add	r3, r2
 800a838:	fb01 f103 	mul.w	r1, r1, r3
 800a83c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800a840:	3107      	adds	r1, #7
 800a842:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800a846:	f021 0107 	bic.w	r1, r1, #7
 800a84a:	2804      	cmp	r0, #4
 800a84c:	fa21 f102 	lsr.w	r1, r1, r2
 800a850:	d008      	beq.n	800a864 <ai_array_get_byte_size+0x38>
 800a852:	2808      	cmp	r0, #8
 800a854:	d101      	bne.n	800a85a <ai_array_get_byte_size+0x2e>
 800a856:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a85a:	3107      	adds	r1, #7
 800a85c:	08c8      	lsrs	r0, r1, #3
 800a85e:	4770      	bx	lr
 800a860:	4608      	mov	r0, r1
 800a862:	4770      	bx	lr
 800a864:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800a868:	3107      	adds	r1, #7
 800a86a:	08c8      	lsrs	r0, r1, #3
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop

0800a870 <__errno>:
 800a870:	4b01      	ldr	r3, [pc, #4]	; (800a878 <__errno+0x8>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	2000069c 	.word	0x2000069c

0800a87c <__libc_init_array>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4d0d      	ldr	r5, [pc, #52]	; (800a8b4 <__libc_init_array+0x38>)
 800a880:	4c0d      	ldr	r4, [pc, #52]	; (800a8b8 <__libc_init_array+0x3c>)
 800a882:	1b64      	subs	r4, r4, r5
 800a884:	10a4      	asrs	r4, r4, #2
 800a886:	2600      	movs	r6, #0
 800a888:	42a6      	cmp	r6, r4
 800a88a:	d109      	bne.n	800a8a0 <__libc_init_array+0x24>
 800a88c:	4d0b      	ldr	r5, [pc, #44]	; (800a8bc <__libc_init_array+0x40>)
 800a88e:	4c0c      	ldr	r4, [pc, #48]	; (800a8c0 <__libc_init_array+0x44>)
 800a890:	f003 f928 	bl	800dae4 <_init>
 800a894:	1b64      	subs	r4, r4, r5
 800a896:	10a4      	asrs	r4, r4, #2
 800a898:	2600      	movs	r6, #0
 800a89a:	42a6      	cmp	r6, r4
 800a89c:	d105      	bne.n	800a8aa <__libc_init_array+0x2e>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}
 800a8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a4:	4798      	blx	r3
 800a8a6:	3601      	adds	r6, #1
 800a8a8:	e7ee      	b.n	800a888 <__libc_init_array+0xc>
 800a8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ae:	4798      	blx	r3
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	e7f2      	b.n	800a89a <__libc_init_array+0x1e>
 800a8b4:	08016094 	.word	0x08016094
 800a8b8:	08016094 	.word	0x08016094
 800a8bc:	08016094 	.word	0x08016094
 800a8c0:	08016098 	.word	0x08016098

0800a8c4 <malloc>:
 800a8c4:	4b02      	ldr	r3, [pc, #8]	; (800a8d0 <malloc+0xc>)
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f000 b885 	b.w	800a9d8 <_malloc_r>
 800a8ce:	bf00      	nop
 800a8d0:	2000069c 	.word	0x2000069c

0800a8d4 <memcpy>:
 800a8d4:	440a      	add	r2, r1
 800a8d6:	4291      	cmp	r1, r2
 800a8d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8dc:	d100      	bne.n	800a8e0 <memcpy+0xc>
 800a8de:	4770      	bx	lr
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8ea:	4291      	cmp	r1, r2
 800a8ec:	d1f9      	bne.n	800a8e2 <memcpy+0xe>
 800a8ee:	bd10      	pop	{r4, pc}

0800a8f0 <memset>:
 800a8f0:	4402      	add	r2, r0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d100      	bne.n	800a8fa <memset+0xa>
 800a8f8:	4770      	bx	lr
 800a8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a8fe:	e7f9      	b.n	800a8f4 <memset+0x4>

0800a900 <_free_r>:
 800a900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a902:	2900      	cmp	r1, #0
 800a904:	d044      	beq.n	800a990 <_free_r+0x90>
 800a906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90a:	9001      	str	r0, [sp, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f1a1 0404 	sub.w	r4, r1, #4
 800a912:	bfb8      	it	lt
 800a914:	18e4      	addlt	r4, r4, r3
 800a916:	f001 ff59 	bl	800c7cc <__malloc_lock>
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <_free_r+0x94>)
 800a91c:	9801      	ldr	r0, [sp, #4]
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	b933      	cbnz	r3, 800a930 <_free_r+0x30>
 800a922:	6063      	str	r3, [r4, #4]
 800a924:	6014      	str	r4, [r2, #0]
 800a926:	b003      	add	sp, #12
 800a928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a92c:	f001 bf54 	b.w	800c7d8 <__malloc_unlock>
 800a930:	42a3      	cmp	r3, r4
 800a932:	d908      	bls.n	800a946 <_free_r+0x46>
 800a934:	6825      	ldr	r5, [r4, #0]
 800a936:	1961      	adds	r1, r4, r5
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf01      	itttt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	1949      	addeq	r1, r1, r5
 800a942:	6021      	streq	r1, [r4, #0]
 800a944:	e7ed      	b.n	800a922 <_free_r+0x22>
 800a946:	461a      	mov	r2, r3
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	b10b      	cbz	r3, 800a950 <_free_r+0x50>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d9fa      	bls.n	800a946 <_free_r+0x46>
 800a950:	6811      	ldr	r1, [r2, #0]
 800a952:	1855      	adds	r5, r2, r1
 800a954:	42a5      	cmp	r5, r4
 800a956:	d10b      	bne.n	800a970 <_free_r+0x70>
 800a958:	6824      	ldr	r4, [r4, #0]
 800a95a:	4421      	add	r1, r4
 800a95c:	1854      	adds	r4, r2, r1
 800a95e:	42a3      	cmp	r3, r4
 800a960:	6011      	str	r1, [r2, #0]
 800a962:	d1e0      	bne.n	800a926 <_free_r+0x26>
 800a964:	681c      	ldr	r4, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	6053      	str	r3, [r2, #4]
 800a96a:	4421      	add	r1, r4
 800a96c:	6011      	str	r1, [r2, #0]
 800a96e:	e7da      	b.n	800a926 <_free_r+0x26>
 800a970:	d902      	bls.n	800a978 <_free_r+0x78>
 800a972:	230c      	movs	r3, #12
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	e7d6      	b.n	800a926 <_free_r+0x26>
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	1961      	adds	r1, r4, r5
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf04      	itt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	bf04      	itt	eq
 800a988:	1949      	addeq	r1, r1, r5
 800a98a:	6021      	streq	r1, [r4, #0]
 800a98c:	6054      	str	r4, [r2, #4]
 800a98e:	e7ca      	b.n	800a926 <_free_r+0x26>
 800a990:	b003      	add	sp, #12
 800a992:	bd30      	pop	{r4, r5, pc}
 800a994:	2000a608 	.word	0x2000a608

0800a998 <sbrk_aligned>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4e0e      	ldr	r6, [pc, #56]	; (800a9d4 <sbrk_aligned+0x3c>)
 800a99c:	460c      	mov	r4, r1
 800a99e:	6831      	ldr	r1, [r6, #0]
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	b911      	cbnz	r1, 800a9aa <sbrk_aligned+0x12>
 800a9a4:	f000 fd84 	bl	800b4b0 <_sbrk_r>
 800a9a8:	6030      	str	r0, [r6, #0]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 fd7f 	bl	800b4b0 <_sbrk_r>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d00a      	beq.n	800a9cc <sbrk_aligned+0x34>
 800a9b6:	1cc4      	adds	r4, r0, #3
 800a9b8:	f024 0403 	bic.w	r4, r4, #3
 800a9bc:	42a0      	cmp	r0, r4
 800a9be:	d007      	beq.n	800a9d0 <sbrk_aligned+0x38>
 800a9c0:	1a21      	subs	r1, r4, r0
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 fd74 	bl	800b4b0 <_sbrk_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d101      	bne.n	800a9d0 <sbrk_aligned+0x38>
 800a9cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	2000a60c 	.word	0x2000a60c

0800a9d8 <_malloc_r>:
 800a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9dc:	1ccd      	adds	r5, r1, #3
 800a9de:	f025 0503 	bic.w	r5, r5, #3
 800a9e2:	3508      	adds	r5, #8
 800a9e4:	2d0c      	cmp	r5, #12
 800a9e6:	bf38      	it	cc
 800a9e8:	250c      	movcc	r5, #12
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	db01      	blt.n	800a9f4 <_malloc_r+0x1c>
 800a9f0:	42a9      	cmp	r1, r5
 800a9f2:	d905      	bls.n	800aa00 <_malloc_r+0x28>
 800a9f4:	230c      	movs	r3, #12
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	2600      	movs	r6, #0
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	4e2e      	ldr	r6, [pc, #184]	; (800aabc <_malloc_r+0xe4>)
 800aa02:	f001 fee3 	bl	800c7cc <__malloc_lock>
 800aa06:	6833      	ldr	r3, [r6, #0]
 800aa08:	461c      	mov	r4, r3
 800aa0a:	bb34      	cbnz	r4, 800aa5a <_malloc_r+0x82>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f7ff ffc2 	bl	800a998 <sbrk_aligned>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	4604      	mov	r4, r0
 800aa18:	d14d      	bne.n	800aab6 <_malloc_r+0xde>
 800aa1a:	6834      	ldr	r4, [r6, #0]
 800aa1c:	4626      	mov	r6, r4
 800aa1e:	2e00      	cmp	r6, #0
 800aa20:	d140      	bne.n	800aaa4 <_malloc_r+0xcc>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	4631      	mov	r1, r6
 800aa26:	4638      	mov	r0, r7
 800aa28:	eb04 0803 	add.w	r8, r4, r3
 800aa2c:	f000 fd40 	bl	800b4b0 <_sbrk_r>
 800aa30:	4580      	cmp	r8, r0
 800aa32:	d13a      	bne.n	800aaaa <_malloc_r+0xd2>
 800aa34:	6821      	ldr	r1, [r4, #0]
 800aa36:	3503      	adds	r5, #3
 800aa38:	1a6d      	subs	r5, r5, r1
 800aa3a:	f025 0503 	bic.w	r5, r5, #3
 800aa3e:	3508      	adds	r5, #8
 800aa40:	2d0c      	cmp	r5, #12
 800aa42:	bf38      	it	cc
 800aa44:	250c      	movcc	r5, #12
 800aa46:	4629      	mov	r1, r5
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7ff ffa5 	bl	800a998 <sbrk_aligned>
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d02b      	beq.n	800aaaa <_malloc_r+0xd2>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	442b      	add	r3, r5
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	e00e      	b.n	800aa78 <_malloc_r+0xa0>
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	1b52      	subs	r2, r2, r5
 800aa5e:	d41e      	bmi.n	800aa9e <_malloc_r+0xc6>
 800aa60:	2a0b      	cmp	r2, #11
 800aa62:	d916      	bls.n	800aa92 <_malloc_r+0xba>
 800aa64:	1961      	adds	r1, r4, r5
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	6025      	str	r5, [r4, #0]
 800aa6a:	bf18      	it	ne
 800aa6c:	6059      	strne	r1, [r3, #4]
 800aa6e:	6863      	ldr	r3, [r4, #4]
 800aa70:	bf08      	it	eq
 800aa72:	6031      	streq	r1, [r6, #0]
 800aa74:	5162      	str	r2, [r4, r5]
 800aa76:	604b      	str	r3, [r1, #4]
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f104 060b 	add.w	r6, r4, #11
 800aa7e:	f001 feab 	bl	800c7d8 <__malloc_unlock>
 800aa82:	f026 0607 	bic.w	r6, r6, #7
 800aa86:	1d23      	adds	r3, r4, #4
 800aa88:	1af2      	subs	r2, r6, r3
 800aa8a:	d0b6      	beq.n	800a9fa <_malloc_r+0x22>
 800aa8c:	1b9b      	subs	r3, r3, r6
 800aa8e:	50a3      	str	r3, [r4, r2]
 800aa90:	e7b3      	b.n	800a9fa <_malloc_r+0x22>
 800aa92:	6862      	ldr	r2, [r4, #4]
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	bf0c      	ite	eq
 800aa98:	6032      	streq	r2, [r6, #0]
 800aa9a:	605a      	strne	r2, [r3, #4]
 800aa9c:	e7ec      	b.n	800aa78 <_malloc_r+0xa0>
 800aa9e:	4623      	mov	r3, r4
 800aaa0:	6864      	ldr	r4, [r4, #4]
 800aaa2:	e7b2      	b.n	800aa0a <_malloc_r+0x32>
 800aaa4:	4634      	mov	r4, r6
 800aaa6:	6876      	ldr	r6, [r6, #4]
 800aaa8:	e7b9      	b.n	800aa1e <_malloc_r+0x46>
 800aaaa:	230c      	movs	r3, #12
 800aaac:	603b      	str	r3, [r7, #0]
 800aaae:	4638      	mov	r0, r7
 800aab0:	f001 fe92 	bl	800c7d8 <__malloc_unlock>
 800aab4:	e7a1      	b.n	800a9fa <_malloc_r+0x22>
 800aab6:	6025      	str	r5, [r4, #0]
 800aab8:	e7de      	b.n	800aa78 <_malloc_r+0xa0>
 800aaba:	bf00      	nop
 800aabc:	2000a608 	.word	0x2000a608

0800aac0 <__cvt>:
 800aac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aac4:	ec55 4b10 	vmov	r4, r5, d0
 800aac8:	2d00      	cmp	r5, #0
 800aaca:	460e      	mov	r6, r1
 800aacc:	4619      	mov	r1, r3
 800aace:	462b      	mov	r3, r5
 800aad0:	bfbb      	ittet	lt
 800aad2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aad6:	461d      	movlt	r5, r3
 800aad8:	2300      	movge	r3, #0
 800aada:	232d      	movlt	r3, #45	; 0x2d
 800aadc:	700b      	strb	r3, [r1, #0]
 800aade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aae4:	4691      	mov	r9, r2
 800aae6:	f023 0820 	bic.w	r8, r3, #32
 800aaea:	bfbc      	itt	lt
 800aaec:	4622      	movlt	r2, r4
 800aaee:	4614      	movlt	r4, r2
 800aaf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaf4:	d005      	beq.n	800ab02 <__cvt+0x42>
 800aaf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aafa:	d100      	bne.n	800aafe <__cvt+0x3e>
 800aafc:	3601      	adds	r6, #1
 800aafe:	2102      	movs	r1, #2
 800ab00:	e000      	b.n	800ab04 <__cvt+0x44>
 800ab02:	2103      	movs	r1, #3
 800ab04:	ab03      	add	r3, sp, #12
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	ab02      	add	r3, sp, #8
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	ec45 4b10 	vmov	d0, r4, r5
 800ab10:	4653      	mov	r3, sl
 800ab12:	4632      	mov	r2, r6
 800ab14:	f000 fe48 	bl	800b7a8 <_dtoa_r>
 800ab18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	d102      	bne.n	800ab26 <__cvt+0x66>
 800ab20:	f019 0f01 	tst.w	r9, #1
 800ab24:	d022      	beq.n	800ab6c <__cvt+0xac>
 800ab26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab2a:	eb07 0906 	add.w	r9, r7, r6
 800ab2e:	d110      	bne.n	800ab52 <__cvt+0x92>
 800ab30:	783b      	ldrb	r3, [r7, #0]
 800ab32:	2b30      	cmp	r3, #48	; 0x30
 800ab34:	d10a      	bne.n	800ab4c <__cvt+0x8c>
 800ab36:	2200      	movs	r2, #0
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7f5 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab42:	b918      	cbnz	r0, 800ab4c <__cvt+0x8c>
 800ab44:	f1c6 0601 	rsb	r6, r6, #1
 800ab48:	f8ca 6000 	str.w	r6, [sl]
 800ab4c:	f8da 3000 	ldr.w	r3, [sl]
 800ab50:	4499      	add	r9, r3
 800ab52:	2200      	movs	r2, #0
 800ab54:	2300      	movs	r3, #0
 800ab56:	4620      	mov	r0, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f7f5 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab5e:	b108      	cbz	r0, 800ab64 <__cvt+0xa4>
 800ab60:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab64:	2230      	movs	r2, #48	; 0x30
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	454b      	cmp	r3, r9
 800ab6a:	d307      	bcc.n	800ab7c <__cvt+0xbc>
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab70:	1bdb      	subs	r3, r3, r7
 800ab72:	4638      	mov	r0, r7
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	b004      	add	sp, #16
 800ab78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7c:	1c59      	adds	r1, r3, #1
 800ab7e:	9103      	str	r1, [sp, #12]
 800ab80:	701a      	strb	r2, [r3, #0]
 800ab82:	e7f0      	b.n	800ab66 <__cvt+0xa6>

0800ab84 <__exponent>:
 800ab84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab86:	4603      	mov	r3, r0
 800ab88:	2900      	cmp	r1, #0
 800ab8a:	bfb8      	it	lt
 800ab8c:	4249      	neglt	r1, r1
 800ab8e:	f803 2b02 	strb.w	r2, [r3], #2
 800ab92:	bfb4      	ite	lt
 800ab94:	222d      	movlt	r2, #45	; 0x2d
 800ab96:	222b      	movge	r2, #43	; 0x2b
 800ab98:	2909      	cmp	r1, #9
 800ab9a:	7042      	strb	r2, [r0, #1]
 800ab9c:	dd2a      	ble.n	800abf4 <__exponent+0x70>
 800ab9e:	f10d 0407 	add.w	r4, sp, #7
 800aba2:	46a4      	mov	ip, r4
 800aba4:	270a      	movs	r7, #10
 800aba6:	46a6      	mov	lr, r4
 800aba8:	460a      	mov	r2, r1
 800abaa:	fb91 f6f7 	sdiv	r6, r1, r7
 800abae:	fb07 1516 	mls	r5, r7, r6, r1
 800abb2:	3530      	adds	r5, #48	; 0x30
 800abb4:	2a63      	cmp	r2, #99	; 0x63
 800abb6:	f104 34ff 	add.w	r4, r4, #4294967295
 800abba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abbe:	4631      	mov	r1, r6
 800abc0:	dcf1      	bgt.n	800aba6 <__exponent+0x22>
 800abc2:	3130      	adds	r1, #48	; 0x30
 800abc4:	f1ae 0502 	sub.w	r5, lr, #2
 800abc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800abcc:	1c44      	adds	r4, r0, #1
 800abce:	4629      	mov	r1, r5
 800abd0:	4561      	cmp	r1, ip
 800abd2:	d30a      	bcc.n	800abea <__exponent+0x66>
 800abd4:	f10d 0209 	add.w	r2, sp, #9
 800abd8:	eba2 020e 	sub.w	r2, r2, lr
 800abdc:	4565      	cmp	r5, ip
 800abde:	bf88      	it	hi
 800abe0:	2200      	movhi	r2, #0
 800abe2:	4413      	add	r3, r2
 800abe4:	1a18      	subs	r0, r3, r0
 800abe6:	b003      	add	sp, #12
 800abe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abf2:	e7ed      	b.n	800abd0 <__exponent+0x4c>
 800abf4:	2330      	movs	r3, #48	; 0x30
 800abf6:	3130      	adds	r1, #48	; 0x30
 800abf8:	7083      	strb	r3, [r0, #2]
 800abfa:	70c1      	strb	r1, [r0, #3]
 800abfc:	1d03      	adds	r3, r0, #4
 800abfe:	e7f1      	b.n	800abe4 <__exponent+0x60>

0800ac00 <_printf_float>:
 800ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac04:	ed2d 8b02 	vpush	{d8}
 800ac08:	b08d      	sub	sp, #52	; 0x34
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac10:	4616      	mov	r6, r2
 800ac12:	461f      	mov	r7, r3
 800ac14:	4605      	mov	r5, r0
 800ac16:	f001 fd6d 	bl	800c6f4 <_localeconv_r>
 800ac1a:	f8d0 a000 	ldr.w	sl, [r0]
 800ac1e:	4650      	mov	r0, sl
 800ac20:	f7f5 fad6 	bl	80001d0 <strlen>
 800ac24:	2300      	movs	r3, #0
 800ac26:	930a      	str	r3, [sp, #40]	; 0x28
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac30:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac34:	3307      	adds	r3, #7
 800ac36:	f023 0307 	bic.w	r3, r3, #7
 800ac3a:	f103 0208 	add.w	r2, r3, #8
 800ac3e:	f8c8 2000 	str.w	r2, [r8]
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac52:	9307      	str	r3, [sp, #28]
 800ac54:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac58:	ee08 0a10 	vmov	s16, r0
 800ac5c:	4b9f      	ldr	r3, [pc, #636]	; (800aedc <_printf_float+0x2dc>)
 800ac5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac62:	f04f 32ff 	mov.w	r2, #4294967295
 800ac66:	f7f5 ff61 	bl	8000b2c <__aeabi_dcmpun>
 800ac6a:	bb88      	cbnz	r0, 800acd0 <_printf_float+0xd0>
 800ac6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac70:	4b9a      	ldr	r3, [pc, #616]	; (800aedc <_printf_float+0x2dc>)
 800ac72:	f04f 32ff 	mov.w	r2, #4294967295
 800ac76:	f7f5 ff3b 	bl	8000af0 <__aeabi_dcmple>
 800ac7a:	bb48      	cbnz	r0, 800acd0 <_printf_float+0xd0>
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4640      	mov	r0, r8
 800ac82:	4649      	mov	r1, r9
 800ac84:	f7f5 ff2a 	bl	8000adc <__aeabi_dcmplt>
 800ac88:	b110      	cbz	r0, 800ac90 <_printf_float+0x90>
 800ac8a:	232d      	movs	r3, #45	; 0x2d
 800ac8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac90:	4b93      	ldr	r3, [pc, #588]	; (800aee0 <_printf_float+0x2e0>)
 800ac92:	4894      	ldr	r0, [pc, #592]	; (800aee4 <_printf_float+0x2e4>)
 800ac94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac98:	bf94      	ite	ls
 800ac9a:	4698      	movls	r8, r3
 800ac9c:	4680      	movhi	r8, r0
 800ac9e:	2303      	movs	r3, #3
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	9b05      	ldr	r3, [sp, #20]
 800aca4:	f023 0204 	bic.w	r2, r3, #4
 800aca8:	6022      	str	r2, [r4, #0]
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	9700      	str	r7, [sp, #0]
 800acb0:	4633      	mov	r3, r6
 800acb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800acb4:	4621      	mov	r1, r4
 800acb6:	4628      	mov	r0, r5
 800acb8:	f000 f9d8 	bl	800b06c <_printf_common>
 800acbc:	3001      	adds	r0, #1
 800acbe:	f040 8090 	bne.w	800ade2 <_printf_float+0x1e2>
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	b00d      	add	sp, #52	; 0x34
 800acc8:	ecbd 8b02 	vpop	{d8}
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	4642      	mov	r2, r8
 800acd2:	464b      	mov	r3, r9
 800acd4:	4640      	mov	r0, r8
 800acd6:	4649      	mov	r1, r9
 800acd8:	f7f5 ff28 	bl	8000b2c <__aeabi_dcmpun>
 800acdc:	b140      	cbz	r0, 800acf0 <_printf_float+0xf0>
 800acde:	464b      	mov	r3, r9
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbc      	itt	lt
 800ace4:	232d      	movlt	r3, #45	; 0x2d
 800ace6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acea:	487f      	ldr	r0, [pc, #508]	; (800aee8 <_printf_float+0x2e8>)
 800acec:	4b7f      	ldr	r3, [pc, #508]	; (800aeec <_printf_float+0x2ec>)
 800acee:	e7d1      	b.n	800ac94 <_printf_float+0x94>
 800acf0:	6863      	ldr	r3, [r4, #4]
 800acf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acf6:	9206      	str	r2, [sp, #24]
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	d13f      	bne.n	800ad7c <_printf_float+0x17c>
 800acfc:	2306      	movs	r3, #6
 800acfe:	6063      	str	r3, [r4, #4]
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	6861      	ldr	r1, [r4, #4]
 800ad04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9303      	str	r3, [sp, #12]
 800ad0c:	ab0a      	add	r3, sp, #40	; 0x28
 800ad0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad12:	ab09      	add	r3, sp, #36	; 0x24
 800ad14:	ec49 8b10 	vmov	d0, r8, r9
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	6022      	str	r2, [r4, #0]
 800ad1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7ff fecd 	bl	800aac0 <__cvt>
 800ad26:	9b06      	ldr	r3, [sp, #24]
 800ad28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad2a:	2b47      	cmp	r3, #71	; 0x47
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	d108      	bne.n	800ad42 <_printf_float+0x142>
 800ad30:	1cc8      	adds	r0, r1, #3
 800ad32:	db02      	blt.n	800ad3a <_printf_float+0x13a>
 800ad34:	6863      	ldr	r3, [r4, #4]
 800ad36:	4299      	cmp	r1, r3
 800ad38:	dd41      	ble.n	800adbe <_printf_float+0x1be>
 800ad3a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad3e:	fa5f fb8b 	uxtb.w	fp, fp
 800ad42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad46:	d820      	bhi.n	800ad8a <_printf_float+0x18a>
 800ad48:	3901      	subs	r1, #1
 800ad4a:	465a      	mov	r2, fp
 800ad4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad50:	9109      	str	r1, [sp, #36]	; 0x24
 800ad52:	f7ff ff17 	bl	800ab84 <__exponent>
 800ad56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad58:	1813      	adds	r3, r2, r0
 800ad5a:	2a01      	cmp	r2, #1
 800ad5c:	4681      	mov	r9, r0
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	dc02      	bgt.n	800ad68 <_printf_float+0x168>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	07d2      	lsls	r2, r2, #31
 800ad66:	d501      	bpl.n	800ad6c <_printf_float+0x16c>
 800ad68:	3301      	adds	r3, #1
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d09c      	beq.n	800acae <_printf_float+0xae>
 800ad74:	232d      	movs	r3, #45	; 0x2d
 800ad76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7a:	e798      	b.n	800acae <_printf_float+0xae>
 800ad7c:	9a06      	ldr	r2, [sp, #24]
 800ad7e:	2a47      	cmp	r2, #71	; 0x47
 800ad80:	d1be      	bne.n	800ad00 <_printf_float+0x100>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1bc      	bne.n	800ad00 <_printf_float+0x100>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e7b9      	b.n	800acfe <_printf_float+0xfe>
 800ad8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad8e:	d118      	bne.n	800adc2 <_printf_float+0x1c2>
 800ad90:	2900      	cmp	r1, #0
 800ad92:	6863      	ldr	r3, [r4, #4]
 800ad94:	dd0b      	ble.n	800adae <_printf_float+0x1ae>
 800ad96:	6121      	str	r1, [r4, #16]
 800ad98:	b913      	cbnz	r3, 800ada0 <_printf_float+0x1a0>
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	07d0      	lsls	r0, r2, #31
 800ad9e:	d502      	bpl.n	800ada6 <_printf_float+0x1a6>
 800ada0:	3301      	adds	r3, #1
 800ada2:	440b      	add	r3, r1
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ada8:	f04f 0900 	mov.w	r9, #0
 800adac:	e7de      	b.n	800ad6c <_printf_float+0x16c>
 800adae:	b913      	cbnz	r3, 800adb6 <_printf_float+0x1b6>
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	07d2      	lsls	r2, r2, #31
 800adb4:	d501      	bpl.n	800adba <_printf_float+0x1ba>
 800adb6:	3302      	adds	r3, #2
 800adb8:	e7f4      	b.n	800ada4 <_printf_float+0x1a4>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7f2      	b.n	800ada4 <_printf_float+0x1a4>
 800adbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc4:	4299      	cmp	r1, r3
 800adc6:	db05      	blt.n	800add4 <_printf_float+0x1d4>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	6121      	str	r1, [r4, #16]
 800adcc:	07d8      	lsls	r0, r3, #31
 800adce:	d5ea      	bpl.n	800ada6 <_printf_float+0x1a6>
 800add0:	1c4b      	adds	r3, r1, #1
 800add2:	e7e7      	b.n	800ada4 <_printf_float+0x1a4>
 800add4:	2900      	cmp	r1, #0
 800add6:	bfd4      	ite	le
 800add8:	f1c1 0202 	rsble	r2, r1, #2
 800addc:	2201      	movgt	r2, #1
 800adde:	4413      	add	r3, r2
 800ade0:	e7e0      	b.n	800ada4 <_printf_float+0x1a4>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	055a      	lsls	r2, r3, #21
 800ade6:	d407      	bmi.n	800adf8 <_printf_float+0x1f8>
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	4642      	mov	r2, r8
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	d12c      	bne.n	800ae50 <_printf_float+0x250>
 800adf6:	e764      	b.n	800acc2 <_printf_float+0xc2>
 800adf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adfc:	f240 80e0 	bls.w	800afc0 <_printf_float+0x3c0>
 800ae00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	f7f5 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d034      	beq.n	800ae7a <_printf_float+0x27a>
 800ae10:	4a37      	ldr	r2, [pc, #220]	; (800aef0 <_printf_float+0x2f0>)
 800ae12:	2301      	movs	r3, #1
 800ae14:	4631      	mov	r1, r6
 800ae16:	4628      	mov	r0, r5
 800ae18:	47b8      	blx	r7
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	f43f af51 	beq.w	800acc2 <_printf_float+0xc2>
 800ae20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae24:	429a      	cmp	r2, r3
 800ae26:	db02      	blt.n	800ae2e <_printf_float+0x22e>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	07d8      	lsls	r0, r3, #31
 800ae2c:	d510      	bpl.n	800ae50 <_printf_float+0x250>
 800ae2e:	ee18 3a10 	vmov	r3, s16
 800ae32:	4652      	mov	r2, sl
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f af41 	beq.w	800acc2 <_printf_float+0xc2>
 800ae40:	f04f 0800 	mov.w	r8, #0
 800ae44:	f104 091a 	add.w	r9, r4, #26
 800ae48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	4543      	cmp	r3, r8
 800ae4e:	dc09      	bgt.n	800ae64 <_printf_float+0x264>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	079b      	lsls	r3, r3, #30
 800ae54:	f100 8105 	bmi.w	800b062 <_printf_float+0x462>
 800ae58:	68e0      	ldr	r0, [r4, #12]
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5c:	4298      	cmp	r0, r3
 800ae5e:	bfb8      	it	lt
 800ae60:	4618      	movlt	r0, r3
 800ae62:	e730      	b.n	800acc6 <_printf_float+0xc6>
 800ae64:	2301      	movs	r3, #1
 800ae66:	464a      	mov	r2, r9
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af27 	beq.w	800acc2 <_printf_float+0xc2>
 800ae74:	f108 0801 	add.w	r8, r8, #1
 800ae78:	e7e6      	b.n	800ae48 <_printf_float+0x248>
 800ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dc39      	bgt.n	800aef4 <_printf_float+0x2f4>
 800ae80:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <_printf_float+0x2f0>)
 800ae82:	2301      	movs	r3, #1
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af19 	beq.w	800acc2 <_printf_float+0xc2>
 800ae90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae94:	4313      	orrs	r3, r2
 800ae96:	d102      	bne.n	800ae9e <_printf_float+0x29e>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	07d9      	lsls	r1, r3, #31
 800ae9c:	d5d8      	bpl.n	800ae50 <_printf_float+0x250>
 800ae9e:	ee18 3a10 	vmov	r3, s16
 800aea2:	4652      	mov	r2, sl
 800aea4:	4631      	mov	r1, r6
 800aea6:	4628      	mov	r0, r5
 800aea8:	47b8      	blx	r7
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f43f af09 	beq.w	800acc2 <_printf_float+0xc2>
 800aeb0:	f04f 0900 	mov.w	r9, #0
 800aeb4:	f104 0a1a 	add.w	sl, r4, #26
 800aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeba:	425b      	negs	r3, r3
 800aebc:	454b      	cmp	r3, r9
 800aebe:	dc01      	bgt.n	800aec4 <_printf_float+0x2c4>
 800aec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec2:	e792      	b.n	800adea <_printf_float+0x1ea>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4652      	mov	r2, sl
 800aec8:	4631      	mov	r1, r6
 800aeca:	4628      	mov	r0, r5
 800aecc:	47b8      	blx	r7
 800aece:	3001      	adds	r0, #1
 800aed0:	f43f aef7 	beq.w	800acc2 <_printf_float+0xc2>
 800aed4:	f109 0901 	add.w	r9, r9, #1
 800aed8:	e7ee      	b.n	800aeb8 <_printf_float+0x2b8>
 800aeda:	bf00      	nop
 800aedc:	7fefffff 	.word	0x7fefffff
 800aee0:	08015ca0 	.word	0x08015ca0
 800aee4:	08015ca4 	.word	0x08015ca4
 800aee8:	08015cac 	.word	0x08015cac
 800aeec:	08015ca8 	.word	0x08015ca8
 800aef0:	08015cb0 	.word	0x08015cb0
 800aef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aef8:	429a      	cmp	r2, r3
 800aefa:	bfa8      	it	ge
 800aefc:	461a      	movge	r2, r3
 800aefe:	2a00      	cmp	r2, #0
 800af00:	4691      	mov	r9, r2
 800af02:	dc37      	bgt.n	800af74 <_printf_float+0x374>
 800af04:	f04f 0b00 	mov.w	fp, #0
 800af08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0c:	f104 021a 	add.w	r2, r4, #26
 800af10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	eba3 0309 	sub.w	r3, r3, r9
 800af18:	455b      	cmp	r3, fp
 800af1a:	dc33      	bgt.n	800af84 <_printf_float+0x384>
 800af1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af20:	429a      	cmp	r2, r3
 800af22:	db3b      	blt.n	800af9c <_printf_float+0x39c>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	07da      	lsls	r2, r3, #31
 800af28:	d438      	bmi.n	800af9c <_printf_float+0x39c>
 800af2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af2c:	9a05      	ldr	r2, [sp, #20]
 800af2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af30:	1a9a      	subs	r2, r3, r2
 800af32:	eba3 0901 	sub.w	r9, r3, r1
 800af36:	4591      	cmp	r9, r2
 800af38:	bfa8      	it	ge
 800af3a:	4691      	movge	r9, r2
 800af3c:	f1b9 0f00 	cmp.w	r9, #0
 800af40:	dc35      	bgt.n	800afae <_printf_float+0x3ae>
 800af42:	f04f 0800 	mov.w	r8, #0
 800af46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af4a:	f104 0a1a 	add.w	sl, r4, #26
 800af4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af52:	1a9b      	subs	r3, r3, r2
 800af54:	eba3 0309 	sub.w	r3, r3, r9
 800af58:	4543      	cmp	r3, r8
 800af5a:	f77f af79 	ble.w	800ae50 <_printf_float+0x250>
 800af5e:	2301      	movs	r3, #1
 800af60:	4652      	mov	r2, sl
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	f43f aeaa 	beq.w	800acc2 <_printf_float+0xc2>
 800af6e:	f108 0801 	add.w	r8, r8, #1
 800af72:	e7ec      	b.n	800af4e <_printf_float+0x34e>
 800af74:	4613      	mov	r3, r2
 800af76:	4631      	mov	r1, r6
 800af78:	4642      	mov	r2, r8
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	d1c0      	bne.n	800af04 <_printf_float+0x304>
 800af82:	e69e      	b.n	800acc2 <_printf_float+0xc2>
 800af84:	2301      	movs	r3, #1
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	9205      	str	r2, [sp, #20]
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	f43f ae97 	beq.w	800acc2 <_printf_float+0xc2>
 800af94:	9a05      	ldr	r2, [sp, #20]
 800af96:	f10b 0b01 	add.w	fp, fp, #1
 800af9a:	e7b9      	b.n	800af10 <_printf_float+0x310>
 800af9c:	ee18 3a10 	vmov	r3, s16
 800afa0:	4652      	mov	r2, sl
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	d1be      	bne.n	800af2a <_printf_float+0x32a>
 800afac:	e689      	b.n	800acc2 <_printf_float+0xc2>
 800afae:	9a05      	ldr	r2, [sp, #20]
 800afb0:	464b      	mov	r3, r9
 800afb2:	4442      	add	r2, r8
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	d1c1      	bne.n	800af42 <_printf_float+0x342>
 800afbe:	e680      	b.n	800acc2 <_printf_float+0xc2>
 800afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc2:	2a01      	cmp	r2, #1
 800afc4:	dc01      	bgt.n	800afca <_printf_float+0x3ca>
 800afc6:	07db      	lsls	r3, r3, #31
 800afc8:	d538      	bpl.n	800b03c <_printf_float+0x43c>
 800afca:	2301      	movs	r3, #1
 800afcc:	4642      	mov	r2, r8
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	f43f ae74 	beq.w	800acc2 <_printf_float+0xc2>
 800afda:	ee18 3a10 	vmov	r3, s16
 800afde:	4652      	mov	r2, sl
 800afe0:	4631      	mov	r1, r6
 800afe2:	4628      	mov	r0, r5
 800afe4:	47b8      	blx	r7
 800afe6:	3001      	adds	r0, #1
 800afe8:	f43f ae6b 	beq.w	800acc2 <_printf_float+0xc2>
 800afec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aff0:	2200      	movs	r2, #0
 800aff2:	2300      	movs	r3, #0
 800aff4:	f7f5 fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 800aff8:	b9d8      	cbnz	r0, 800b032 <_printf_float+0x432>
 800affa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800affc:	f108 0201 	add.w	r2, r8, #1
 800b000:	3b01      	subs	r3, #1
 800b002:	4631      	mov	r1, r6
 800b004:	4628      	mov	r0, r5
 800b006:	47b8      	blx	r7
 800b008:	3001      	adds	r0, #1
 800b00a:	d10e      	bne.n	800b02a <_printf_float+0x42a>
 800b00c:	e659      	b.n	800acc2 <_printf_float+0xc2>
 800b00e:	2301      	movs	r3, #1
 800b010:	4652      	mov	r2, sl
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	f43f ae52 	beq.w	800acc2 <_printf_float+0xc2>
 800b01e:	f108 0801 	add.w	r8, r8, #1
 800b022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b024:	3b01      	subs	r3, #1
 800b026:	4543      	cmp	r3, r8
 800b028:	dcf1      	bgt.n	800b00e <_printf_float+0x40e>
 800b02a:	464b      	mov	r3, r9
 800b02c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b030:	e6dc      	b.n	800adec <_printf_float+0x1ec>
 800b032:	f04f 0800 	mov.w	r8, #0
 800b036:	f104 0a1a 	add.w	sl, r4, #26
 800b03a:	e7f2      	b.n	800b022 <_printf_float+0x422>
 800b03c:	2301      	movs	r3, #1
 800b03e:	4642      	mov	r2, r8
 800b040:	e7df      	b.n	800b002 <_printf_float+0x402>
 800b042:	2301      	movs	r3, #1
 800b044:	464a      	mov	r2, r9
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f ae38 	beq.w	800acc2 <_printf_float+0xc2>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	68e3      	ldr	r3, [r4, #12]
 800b058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b05a:	1a5b      	subs	r3, r3, r1
 800b05c:	4543      	cmp	r3, r8
 800b05e:	dcf0      	bgt.n	800b042 <_printf_float+0x442>
 800b060:	e6fa      	b.n	800ae58 <_printf_float+0x258>
 800b062:	f04f 0800 	mov.w	r8, #0
 800b066:	f104 0919 	add.w	r9, r4, #25
 800b06a:	e7f4      	b.n	800b056 <_printf_float+0x456>

0800b06c <_printf_common>:
 800b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	4616      	mov	r6, r2
 800b072:	4699      	mov	r9, r3
 800b074:	688a      	ldr	r2, [r1, #8]
 800b076:	690b      	ldr	r3, [r1, #16]
 800b078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	bfb8      	it	lt
 800b080:	4613      	movlt	r3, r2
 800b082:	6033      	str	r3, [r6, #0]
 800b084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b088:	4607      	mov	r7, r0
 800b08a:	460c      	mov	r4, r1
 800b08c:	b10a      	cbz	r2, 800b092 <_printf_common+0x26>
 800b08e:	3301      	adds	r3, #1
 800b090:	6033      	str	r3, [r6, #0]
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	0699      	lsls	r1, r3, #26
 800b096:	bf42      	ittt	mi
 800b098:	6833      	ldrmi	r3, [r6, #0]
 800b09a:	3302      	addmi	r3, #2
 800b09c:	6033      	strmi	r3, [r6, #0]
 800b09e:	6825      	ldr	r5, [r4, #0]
 800b0a0:	f015 0506 	ands.w	r5, r5, #6
 800b0a4:	d106      	bne.n	800b0b4 <_printf_common+0x48>
 800b0a6:	f104 0a19 	add.w	sl, r4, #25
 800b0aa:	68e3      	ldr	r3, [r4, #12]
 800b0ac:	6832      	ldr	r2, [r6, #0]
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	42ab      	cmp	r3, r5
 800b0b2:	dc26      	bgt.n	800b102 <_printf_common+0x96>
 800b0b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0b8:	1e13      	subs	r3, r2, #0
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	bf18      	it	ne
 800b0be:	2301      	movne	r3, #1
 800b0c0:	0692      	lsls	r2, r2, #26
 800b0c2:	d42b      	bmi.n	800b11c <_printf_common+0xb0>
 800b0c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	47c0      	blx	r8
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d01e      	beq.n	800b110 <_printf_common+0xa4>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	68e5      	ldr	r5, [r4, #12]
 800b0d6:	6832      	ldr	r2, [r6, #0]
 800b0d8:	f003 0306 	and.w	r3, r3, #6
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	bf08      	it	eq
 800b0e0:	1aad      	subeq	r5, r5, r2
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	6922      	ldr	r2, [r4, #16]
 800b0e6:	bf0c      	ite	eq
 800b0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ec:	2500      	movne	r5, #0
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	bfc4      	itt	gt
 800b0f2:	1a9b      	subgt	r3, r3, r2
 800b0f4:	18ed      	addgt	r5, r5, r3
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	341a      	adds	r4, #26
 800b0fa:	42b5      	cmp	r5, r6
 800b0fc:	d11a      	bne.n	800b134 <_printf_common+0xc8>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e008      	b.n	800b114 <_printf_common+0xa8>
 800b102:	2301      	movs	r3, #1
 800b104:	4652      	mov	r2, sl
 800b106:	4649      	mov	r1, r9
 800b108:	4638      	mov	r0, r7
 800b10a:	47c0      	blx	r8
 800b10c:	3001      	adds	r0, #1
 800b10e:	d103      	bne.n	800b118 <_printf_common+0xac>
 800b110:	f04f 30ff 	mov.w	r0, #4294967295
 800b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b118:	3501      	adds	r5, #1
 800b11a:	e7c6      	b.n	800b0aa <_printf_common+0x3e>
 800b11c:	18e1      	adds	r1, r4, r3
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	2030      	movs	r0, #48	; 0x30
 800b122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b126:	4422      	add	r2, r4
 800b128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b12c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b130:	3302      	adds	r3, #2
 800b132:	e7c7      	b.n	800b0c4 <_printf_common+0x58>
 800b134:	2301      	movs	r3, #1
 800b136:	4622      	mov	r2, r4
 800b138:	4649      	mov	r1, r9
 800b13a:	4638      	mov	r0, r7
 800b13c:	47c0      	blx	r8
 800b13e:	3001      	adds	r0, #1
 800b140:	d0e6      	beq.n	800b110 <_printf_common+0xa4>
 800b142:	3601      	adds	r6, #1
 800b144:	e7d9      	b.n	800b0fa <_printf_common+0x8e>
	...

0800b148 <_printf_i>:
 800b148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	7e0f      	ldrb	r7, [r1, #24]
 800b14e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b150:	2f78      	cmp	r7, #120	; 0x78
 800b152:	4691      	mov	r9, r2
 800b154:	4680      	mov	r8, r0
 800b156:	460c      	mov	r4, r1
 800b158:	469a      	mov	sl, r3
 800b15a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b15e:	d807      	bhi.n	800b170 <_printf_i+0x28>
 800b160:	2f62      	cmp	r7, #98	; 0x62
 800b162:	d80a      	bhi.n	800b17a <_printf_i+0x32>
 800b164:	2f00      	cmp	r7, #0
 800b166:	f000 80d8 	beq.w	800b31a <_printf_i+0x1d2>
 800b16a:	2f58      	cmp	r7, #88	; 0x58
 800b16c:	f000 80a3 	beq.w	800b2b6 <_printf_i+0x16e>
 800b170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b178:	e03a      	b.n	800b1f0 <_printf_i+0xa8>
 800b17a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b17e:	2b15      	cmp	r3, #21
 800b180:	d8f6      	bhi.n	800b170 <_printf_i+0x28>
 800b182:	a101      	add	r1, pc, #4	; (adr r1, 800b188 <_printf_i+0x40>)
 800b184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b188:	0800b1e1 	.word	0x0800b1e1
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b171 	.word	0x0800b171
 800b194:	0800b171 	.word	0x0800b171
 800b198:	0800b171 	.word	0x0800b171
 800b19c:	0800b171 	.word	0x0800b171
 800b1a0:	0800b1f5 	.word	0x0800b1f5
 800b1a4:	0800b171 	.word	0x0800b171
 800b1a8:	0800b171 	.word	0x0800b171
 800b1ac:	0800b171 	.word	0x0800b171
 800b1b0:	0800b171 	.word	0x0800b171
 800b1b4:	0800b301 	.word	0x0800b301
 800b1b8:	0800b225 	.word	0x0800b225
 800b1bc:	0800b2e3 	.word	0x0800b2e3
 800b1c0:	0800b171 	.word	0x0800b171
 800b1c4:	0800b171 	.word	0x0800b171
 800b1c8:	0800b323 	.word	0x0800b323
 800b1cc:	0800b171 	.word	0x0800b171
 800b1d0:	0800b225 	.word	0x0800b225
 800b1d4:	0800b171 	.word	0x0800b171
 800b1d8:	0800b171 	.word	0x0800b171
 800b1dc:	0800b2eb 	.word	0x0800b2eb
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	1d1a      	adds	r2, r3, #4
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	602a      	str	r2, [r5, #0]
 800b1e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e0a3      	b.n	800b33c <_printf_i+0x1f4>
 800b1f4:	6820      	ldr	r0, [r4, #0]
 800b1f6:	6829      	ldr	r1, [r5, #0]
 800b1f8:	0606      	lsls	r6, r0, #24
 800b1fa:	f101 0304 	add.w	r3, r1, #4
 800b1fe:	d50a      	bpl.n	800b216 <_printf_i+0xce>
 800b200:	680e      	ldr	r6, [r1, #0]
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	2e00      	cmp	r6, #0
 800b206:	da03      	bge.n	800b210 <_printf_i+0xc8>
 800b208:	232d      	movs	r3, #45	; 0x2d
 800b20a:	4276      	negs	r6, r6
 800b20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b210:	485e      	ldr	r0, [pc, #376]	; (800b38c <_printf_i+0x244>)
 800b212:	230a      	movs	r3, #10
 800b214:	e019      	b.n	800b24a <_printf_i+0x102>
 800b216:	680e      	ldr	r6, [r1, #0]
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b21e:	bf18      	it	ne
 800b220:	b236      	sxthne	r6, r6
 800b222:	e7ef      	b.n	800b204 <_printf_i+0xbc>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	6820      	ldr	r0, [r4, #0]
 800b228:	1d19      	adds	r1, r3, #4
 800b22a:	6029      	str	r1, [r5, #0]
 800b22c:	0601      	lsls	r1, r0, #24
 800b22e:	d501      	bpl.n	800b234 <_printf_i+0xec>
 800b230:	681e      	ldr	r6, [r3, #0]
 800b232:	e002      	b.n	800b23a <_printf_i+0xf2>
 800b234:	0646      	lsls	r6, r0, #25
 800b236:	d5fb      	bpl.n	800b230 <_printf_i+0xe8>
 800b238:	881e      	ldrh	r6, [r3, #0]
 800b23a:	4854      	ldr	r0, [pc, #336]	; (800b38c <_printf_i+0x244>)
 800b23c:	2f6f      	cmp	r7, #111	; 0x6f
 800b23e:	bf0c      	ite	eq
 800b240:	2308      	moveq	r3, #8
 800b242:	230a      	movne	r3, #10
 800b244:	2100      	movs	r1, #0
 800b246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b24a:	6865      	ldr	r5, [r4, #4]
 800b24c:	60a5      	str	r5, [r4, #8]
 800b24e:	2d00      	cmp	r5, #0
 800b250:	bfa2      	ittt	ge
 800b252:	6821      	ldrge	r1, [r4, #0]
 800b254:	f021 0104 	bicge.w	r1, r1, #4
 800b258:	6021      	strge	r1, [r4, #0]
 800b25a:	b90e      	cbnz	r6, 800b260 <_printf_i+0x118>
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	d04d      	beq.n	800b2fc <_printf_i+0x1b4>
 800b260:	4615      	mov	r5, r2
 800b262:	fbb6 f1f3 	udiv	r1, r6, r3
 800b266:	fb03 6711 	mls	r7, r3, r1, r6
 800b26a:	5dc7      	ldrb	r7, [r0, r7]
 800b26c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b270:	4637      	mov	r7, r6
 800b272:	42bb      	cmp	r3, r7
 800b274:	460e      	mov	r6, r1
 800b276:	d9f4      	bls.n	800b262 <_printf_i+0x11a>
 800b278:	2b08      	cmp	r3, #8
 800b27a:	d10b      	bne.n	800b294 <_printf_i+0x14c>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	07de      	lsls	r6, r3, #31
 800b280:	d508      	bpl.n	800b294 <_printf_i+0x14c>
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6861      	ldr	r1, [r4, #4]
 800b286:	4299      	cmp	r1, r3
 800b288:	bfde      	ittt	le
 800b28a:	2330      	movle	r3, #48	; 0x30
 800b28c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b290:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b294:	1b52      	subs	r2, r2, r5
 800b296:	6122      	str	r2, [r4, #16]
 800b298:	f8cd a000 	str.w	sl, [sp]
 800b29c:	464b      	mov	r3, r9
 800b29e:	aa03      	add	r2, sp, #12
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	f7ff fee2 	bl	800b06c <_printf_common>
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d14c      	bne.n	800b346 <_printf_i+0x1fe>
 800b2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b0:	b004      	add	sp, #16
 800b2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b6:	4835      	ldr	r0, [pc, #212]	; (800b38c <_printf_i+0x244>)
 800b2b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2bc:	6829      	ldr	r1, [r5, #0]
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2c4:	6029      	str	r1, [r5, #0]
 800b2c6:	061d      	lsls	r5, r3, #24
 800b2c8:	d514      	bpl.n	800b2f4 <_printf_i+0x1ac>
 800b2ca:	07df      	lsls	r7, r3, #31
 800b2cc:	bf44      	itt	mi
 800b2ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b2d2:	6023      	strmi	r3, [r4, #0]
 800b2d4:	b91e      	cbnz	r6, 800b2de <_printf_i+0x196>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	f023 0320 	bic.w	r3, r3, #32
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	2310      	movs	r3, #16
 800b2e0:	e7b0      	b.n	800b244 <_printf_i+0xfc>
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	f043 0320 	orr.w	r3, r3, #32
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	2378      	movs	r3, #120	; 0x78
 800b2ec:	4828      	ldr	r0, [pc, #160]	; (800b390 <_printf_i+0x248>)
 800b2ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2f2:	e7e3      	b.n	800b2bc <_printf_i+0x174>
 800b2f4:	0659      	lsls	r1, r3, #25
 800b2f6:	bf48      	it	mi
 800b2f8:	b2b6      	uxthmi	r6, r6
 800b2fa:	e7e6      	b.n	800b2ca <_printf_i+0x182>
 800b2fc:	4615      	mov	r5, r2
 800b2fe:	e7bb      	b.n	800b278 <_printf_i+0x130>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	6826      	ldr	r6, [r4, #0]
 800b304:	6961      	ldr	r1, [r4, #20]
 800b306:	1d18      	adds	r0, r3, #4
 800b308:	6028      	str	r0, [r5, #0]
 800b30a:	0635      	lsls	r5, r6, #24
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	d501      	bpl.n	800b314 <_printf_i+0x1cc>
 800b310:	6019      	str	r1, [r3, #0]
 800b312:	e002      	b.n	800b31a <_printf_i+0x1d2>
 800b314:	0670      	lsls	r0, r6, #25
 800b316:	d5fb      	bpl.n	800b310 <_printf_i+0x1c8>
 800b318:	8019      	strh	r1, [r3, #0]
 800b31a:	2300      	movs	r3, #0
 800b31c:	6123      	str	r3, [r4, #16]
 800b31e:	4615      	mov	r5, r2
 800b320:	e7ba      	b.n	800b298 <_printf_i+0x150>
 800b322:	682b      	ldr	r3, [r5, #0]
 800b324:	1d1a      	adds	r2, r3, #4
 800b326:	602a      	str	r2, [r5, #0]
 800b328:	681d      	ldr	r5, [r3, #0]
 800b32a:	6862      	ldr	r2, [r4, #4]
 800b32c:	2100      	movs	r1, #0
 800b32e:	4628      	mov	r0, r5
 800b330:	f7f4 ff56 	bl	80001e0 <memchr>
 800b334:	b108      	cbz	r0, 800b33a <_printf_i+0x1f2>
 800b336:	1b40      	subs	r0, r0, r5
 800b338:	6060      	str	r0, [r4, #4]
 800b33a:	6863      	ldr	r3, [r4, #4]
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	2300      	movs	r3, #0
 800b340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b344:	e7a8      	b.n	800b298 <_printf_i+0x150>
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	462a      	mov	r2, r5
 800b34a:	4649      	mov	r1, r9
 800b34c:	4640      	mov	r0, r8
 800b34e:	47d0      	blx	sl
 800b350:	3001      	adds	r0, #1
 800b352:	d0ab      	beq.n	800b2ac <_printf_i+0x164>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	079b      	lsls	r3, r3, #30
 800b358:	d413      	bmi.n	800b382 <_printf_i+0x23a>
 800b35a:	68e0      	ldr	r0, [r4, #12]
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	4298      	cmp	r0, r3
 800b360:	bfb8      	it	lt
 800b362:	4618      	movlt	r0, r3
 800b364:	e7a4      	b.n	800b2b0 <_printf_i+0x168>
 800b366:	2301      	movs	r3, #1
 800b368:	4632      	mov	r2, r6
 800b36a:	4649      	mov	r1, r9
 800b36c:	4640      	mov	r0, r8
 800b36e:	47d0      	blx	sl
 800b370:	3001      	adds	r0, #1
 800b372:	d09b      	beq.n	800b2ac <_printf_i+0x164>
 800b374:	3501      	adds	r5, #1
 800b376:	68e3      	ldr	r3, [r4, #12]
 800b378:	9903      	ldr	r1, [sp, #12]
 800b37a:	1a5b      	subs	r3, r3, r1
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	dcf2      	bgt.n	800b366 <_printf_i+0x21e>
 800b380:	e7eb      	b.n	800b35a <_printf_i+0x212>
 800b382:	2500      	movs	r5, #0
 800b384:	f104 0619 	add.w	r6, r4, #25
 800b388:	e7f5      	b.n	800b376 <_printf_i+0x22e>
 800b38a:	bf00      	nop
 800b38c:	08015cb2 	.word	0x08015cb2
 800b390:	08015cc3 	.word	0x08015cc3

0800b394 <iprintf>:
 800b394:	b40f      	push	{r0, r1, r2, r3}
 800b396:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <iprintf+0x2c>)
 800b398:	b513      	push	{r0, r1, r4, lr}
 800b39a:	681c      	ldr	r4, [r3, #0]
 800b39c:	b124      	cbz	r4, 800b3a8 <iprintf+0x14>
 800b39e:	69a3      	ldr	r3, [r4, #24]
 800b3a0:	b913      	cbnz	r3, 800b3a8 <iprintf+0x14>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f001 f908 	bl	800c5b8 <__sinit>
 800b3a8:	ab05      	add	r3, sp, #20
 800b3aa:	9a04      	ldr	r2, [sp, #16]
 800b3ac:	68a1      	ldr	r1, [r4, #8]
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f001 ff65 	bl	800d280 <_vfiprintf_r>
 800b3b6:	b002      	add	sp, #8
 800b3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3bc:	b004      	add	sp, #16
 800b3be:	4770      	bx	lr
 800b3c0:	2000069c 	.word	0x2000069c

0800b3c4 <_puts_r>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	460e      	mov	r6, r1
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	b118      	cbz	r0, 800b3d4 <_puts_r+0x10>
 800b3cc:	6983      	ldr	r3, [r0, #24]
 800b3ce:	b90b      	cbnz	r3, 800b3d4 <_puts_r+0x10>
 800b3d0:	f001 f8f2 	bl	800c5b8 <__sinit>
 800b3d4:	69ab      	ldr	r3, [r5, #24]
 800b3d6:	68ac      	ldr	r4, [r5, #8]
 800b3d8:	b913      	cbnz	r3, 800b3e0 <_puts_r+0x1c>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f001 f8ec 	bl	800c5b8 <__sinit>
 800b3e0:	4b2c      	ldr	r3, [pc, #176]	; (800b494 <_puts_r+0xd0>)
 800b3e2:	429c      	cmp	r4, r3
 800b3e4:	d120      	bne.n	800b428 <_puts_r+0x64>
 800b3e6:	686c      	ldr	r4, [r5, #4]
 800b3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d405      	bmi.n	800b3fa <_puts_r+0x36>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	0598      	lsls	r0, r3, #22
 800b3f2:	d402      	bmi.n	800b3fa <_puts_r+0x36>
 800b3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3f6:	f001 f982 	bl	800c6fe <__retarget_lock_acquire_recursive>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	0719      	lsls	r1, r3, #28
 800b3fe:	d51d      	bpl.n	800b43c <_puts_r+0x78>
 800b400:	6923      	ldr	r3, [r4, #16]
 800b402:	b1db      	cbz	r3, 800b43c <_puts_r+0x78>
 800b404:	3e01      	subs	r6, #1
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b40c:	3b01      	subs	r3, #1
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	bb39      	cbnz	r1, 800b462 <_puts_r+0x9e>
 800b412:	2b00      	cmp	r3, #0
 800b414:	da38      	bge.n	800b488 <_puts_r+0xc4>
 800b416:	4622      	mov	r2, r4
 800b418:	210a      	movs	r1, #10
 800b41a:	4628      	mov	r0, r5
 800b41c:	f000 f878 	bl	800b510 <__swbuf_r>
 800b420:	3001      	adds	r0, #1
 800b422:	d011      	beq.n	800b448 <_puts_r+0x84>
 800b424:	250a      	movs	r5, #10
 800b426:	e011      	b.n	800b44c <_puts_r+0x88>
 800b428:	4b1b      	ldr	r3, [pc, #108]	; (800b498 <_puts_r+0xd4>)
 800b42a:	429c      	cmp	r4, r3
 800b42c:	d101      	bne.n	800b432 <_puts_r+0x6e>
 800b42e:	68ac      	ldr	r4, [r5, #8]
 800b430:	e7da      	b.n	800b3e8 <_puts_r+0x24>
 800b432:	4b1a      	ldr	r3, [pc, #104]	; (800b49c <_puts_r+0xd8>)
 800b434:	429c      	cmp	r4, r3
 800b436:	bf08      	it	eq
 800b438:	68ec      	ldreq	r4, [r5, #12]
 800b43a:	e7d5      	b.n	800b3e8 <_puts_r+0x24>
 800b43c:	4621      	mov	r1, r4
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 f8b8 	bl	800b5b4 <__swsetup_r>
 800b444:	2800      	cmp	r0, #0
 800b446:	d0dd      	beq.n	800b404 <_puts_r+0x40>
 800b448:	f04f 35ff 	mov.w	r5, #4294967295
 800b44c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b44e:	07da      	lsls	r2, r3, #31
 800b450:	d405      	bmi.n	800b45e <_puts_r+0x9a>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	059b      	lsls	r3, r3, #22
 800b456:	d402      	bmi.n	800b45e <_puts_r+0x9a>
 800b458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b45a:	f001 f951 	bl	800c700 <__retarget_lock_release_recursive>
 800b45e:	4628      	mov	r0, r5
 800b460:	bd70      	pop	{r4, r5, r6, pc}
 800b462:	2b00      	cmp	r3, #0
 800b464:	da04      	bge.n	800b470 <_puts_r+0xac>
 800b466:	69a2      	ldr	r2, [r4, #24]
 800b468:	429a      	cmp	r2, r3
 800b46a:	dc06      	bgt.n	800b47a <_puts_r+0xb6>
 800b46c:	290a      	cmp	r1, #10
 800b46e:	d004      	beq.n	800b47a <_puts_r+0xb6>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	6022      	str	r2, [r4, #0]
 800b476:	7019      	strb	r1, [r3, #0]
 800b478:	e7c5      	b.n	800b406 <_puts_r+0x42>
 800b47a:	4622      	mov	r2, r4
 800b47c:	4628      	mov	r0, r5
 800b47e:	f000 f847 	bl	800b510 <__swbuf_r>
 800b482:	3001      	adds	r0, #1
 800b484:	d1bf      	bne.n	800b406 <_puts_r+0x42>
 800b486:	e7df      	b.n	800b448 <_puts_r+0x84>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	250a      	movs	r5, #10
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	6022      	str	r2, [r4, #0]
 800b490:	701d      	strb	r5, [r3, #0]
 800b492:	e7db      	b.n	800b44c <_puts_r+0x88>
 800b494:	08015d84 	.word	0x08015d84
 800b498:	08015da4 	.word	0x08015da4
 800b49c:	08015d64 	.word	0x08015d64

0800b4a0 <puts>:
 800b4a0:	4b02      	ldr	r3, [pc, #8]	; (800b4ac <puts+0xc>)
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	6818      	ldr	r0, [r3, #0]
 800b4a6:	f7ff bf8d 	b.w	800b3c4 <_puts_r>
 800b4aa:	bf00      	nop
 800b4ac:	2000069c 	.word	0x2000069c

0800b4b0 <_sbrk_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d06      	ldr	r5, [pc, #24]	; (800b4cc <_sbrk_r+0x1c>)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	602b      	str	r3, [r5, #0]
 800b4bc:	f7f6 fb54 	bl	8001b68 <_sbrk>
 800b4c0:	1c43      	adds	r3, r0, #1
 800b4c2:	d102      	bne.n	800b4ca <_sbrk_r+0x1a>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	b103      	cbz	r3, 800b4ca <_sbrk_r+0x1a>
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	2000a614 	.word	0x2000a614

0800b4d0 <siprintf>:
 800b4d0:	b40e      	push	{r1, r2, r3}
 800b4d2:	b500      	push	{lr}
 800b4d4:	b09c      	sub	sp, #112	; 0x70
 800b4d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b4d8:	9002      	str	r0, [sp, #8]
 800b4da:	9006      	str	r0, [sp, #24]
 800b4dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b4e0:	4809      	ldr	r0, [pc, #36]	; (800b508 <siprintf+0x38>)
 800b4e2:	9107      	str	r1, [sp, #28]
 800b4e4:	9104      	str	r1, [sp, #16]
 800b4e6:	4909      	ldr	r1, [pc, #36]	; (800b50c <siprintf+0x3c>)
 800b4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ec:	9105      	str	r1, [sp, #20]
 800b4ee:	6800      	ldr	r0, [r0, #0]
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	a902      	add	r1, sp, #8
 800b4f4:	f001 fd9a 	bl	800d02c <_svfiprintf_r>
 800b4f8:	9b02      	ldr	r3, [sp, #8]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	b01c      	add	sp, #112	; 0x70
 800b500:	f85d eb04 	ldr.w	lr, [sp], #4
 800b504:	b003      	add	sp, #12
 800b506:	4770      	bx	lr
 800b508:	2000069c 	.word	0x2000069c
 800b50c:	ffff0208 	.word	0xffff0208

0800b510 <__swbuf_r>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	460e      	mov	r6, r1
 800b514:	4614      	mov	r4, r2
 800b516:	4605      	mov	r5, r0
 800b518:	b118      	cbz	r0, 800b522 <__swbuf_r+0x12>
 800b51a:	6983      	ldr	r3, [r0, #24]
 800b51c:	b90b      	cbnz	r3, 800b522 <__swbuf_r+0x12>
 800b51e:	f001 f84b 	bl	800c5b8 <__sinit>
 800b522:	4b21      	ldr	r3, [pc, #132]	; (800b5a8 <__swbuf_r+0x98>)
 800b524:	429c      	cmp	r4, r3
 800b526:	d12b      	bne.n	800b580 <__swbuf_r+0x70>
 800b528:	686c      	ldr	r4, [r5, #4]
 800b52a:	69a3      	ldr	r3, [r4, #24]
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	071a      	lsls	r2, r3, #28
 800b532:	d52f      	bpl.n	800b594 <__swbuf_r+0x84>
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	b36b      	cbz	r3, 800b594 <__swbuf_r+0x84>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	6820      	ldr	r0, [r4, #0]
 800b53c:	1ac0      	subs	r0, r0, r3
 800b53e:	6963      	ldr	r3, [r4, #20]
 800b540:	b2f6      	uxtb	r6, r6
 800b542:	4283      	cmp	r3, r0
 800b544:	4637      	mov	r7, r6
 800b546:	dc04      	bgt.n	800b552 <__swbuf_r+0x42>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 ffa0 	bl	800c490 <_fflush_r>
 800b550:	bb30      	cbnz	r0, 800b5a0 <__swbuf_r+0x90>
 800b552:	68a3      	ldr	r3, [r4, #8]
 800b554:	3b01      	subs	r3, #1
 800b556:	60a3      	str	r3, [r4, #8]
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	6022      	str	r2, [r4, #0]
 800b55e:	701e      	strb	r6, [r3, #0]
 800b560:	6963      	ldr	r3, [r4, #20]
 800b562:	3001      	adds	r0, #1
 800b564:	4283      	cmp	r3, r0
 800b566:	d004      	beq.n	800b572 <__swbuf_r+0x62>
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	07db      	lsls	r3, r3, #31
 800b56c:	d506      	bpl.n	800b57c <__swbuf_r+0x6c>
 800b56e:	2e0a      	cmp	r6, #10
 800b570:	d104      	bne.n	800b57c <__swbuf_r+0x6c>
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f000 ff8b 	bl	800c490 <_fflush_r>
 800b57a:	b988      	cbnz	r0, 800b5a0 <__swbuf_r+0x90>
 800b57c:	4638      	mov	r0, r7
 800b57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b580:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <__swbuf_r+0x9c>)
 800b582:	429c      	cmp	r4, r3
 800b584:	d101      	bne.n	800b58a <__swbuf_r+0x7a>
 800b586:	68ac      	ldr	r4, [r5, #8]
 800b588:	e7cf      	b.n	800b52a <__swbuf_r+0x1a>
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <__swbuf_r+0xa0>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	bf08      	it	eq
 800b590:	68ec      	ldreq	r4, [r5, #12]
 800b592:	e7ca      	b.n	800b52a <__swbuf_r+0x1a>
 800b594:	4621      	mov	r1, r4
 800b596:	4628      	mov	r0, r5
 800b598:	f000 f80c 	bl	800b5b4 <__swsetup_r>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d0cb      	beq.n	800b538 <__swbuf_r+0x28>
 800b5a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b5a4:	e7ea      	b.n	800b57c <__swbuf_r+0x6c>
 800b5a6:	bf00      	nop
 800b5a8:	08015d84 	.word	0x08015d84
 800b5ac:	08015da4 	.word	0x08015da4
 800b5b0:	08015d64 	.word	0x08015d64

0800b5b4 <__swsetup_r>:
 800b5b4:	4b32      	ldr	r3, [pc, #200]	; (800b680 <__swsetup_r+0xcc>)
 800b5b6:	b570      	push	{r4, r5, r6, lr}
 800b5b8:	681d      	ldr	r5, [r3, #0]
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	b125      	cbz	r5, 800b5ca <__swsetup_r+0x16>
 800b5c0:	69ab      	ldr	r3, [r5, #24]
 800b5c2:	b913      	cbnz	r3, 800b5ca <__swsetup_r+0x16>
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f000 fff7 	bl	800c5b8 <__sinit>
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	; (800b684 <__swsetup_r+0xd0>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d10f      	bne.n	800b5f0 <__swsetup_r+0x3c>
 800b5d0:	686c      	ldr	r4, [r5, #4]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5d8:	0719      	lsls	r1, r3, #28
 800b5da:	d42c      	bmi.n	800b636 <__swsetup_r+0x82>
 800b5dc:	06dd      	lsls	r5, r3, #27
 800b5de:	d411      	bmi.n	800b604 <__swsetup_r+0x50>
 800b5e0:	2309      	movs	r3, #9
 800b5e2:	6033      	str	r3, [r6, #0]
 800b5e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ee:	e03e      	b.n	800b66e <__swsetup_r+0xba>
 800b5f0:	4b25      	ldr	r3, [pc, #148]	; (800b688 <__swsetup_r+0xd4>)
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d101      	bne.n	800b5fa <__swsetup_r+0x46>
 800b5f6:	68ac      	ldr	r4, [r5, #8]
 800b5f8:	e7eb      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <__swsetup_r+0xd8>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	bf08      	it	eq
 800b600:	68ec      	ldreq	r4, [r5, #12]
 800b602:	e7e6      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b604:	0758      	lsls	r0, r3, #29
 800b606:	d512      	bpl.n	800b62e <__swsetup_r+0x7a>
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	b141      	cbz	r1, 800b61e <__swsetup_r+0x6a>
 800b60c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b610:	4299      	cmp	r1, r3
 800b612:	d002      	beq.n	800b61a <__swsetup_r+0x66>
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff f973 	bl	800a900 <_free_r>
 800b61a:	2300      	movs	r3, #0
 800b61c:	6363      	str	r3, [r4, #52]	; 0x34
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	2300      	movs	r3, #0
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0308 	orr.w	r3, r3, #8
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	b94b      	cbnz	r3, 800b64e <__swsetup_r+0x9a>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b644:	d003      	beq.n	800b64e <__swsetup_r+0x9a>
 800b646:	4621      	mov	r1, r4
 800b648:	4630      	mov	r0, r6
 800b64a:	f001 f87f 	bl	800c74c <__smakebuf_r>
 800b64e:	89a0      	ldrh	r0, [r4, #12]
 800b650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b654:	f010 0301 	ands.w	r3, r0, #1
 800b658:	d00a      	beq.n	800b670 <__swsetup_r+0xbc>
 800b65a:	2300      	movs	r3, #0
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	6963      	ldr	r3, [r4, #20]
 800b660:	425b      	negs	r3, r3
 800b662:	61a3      	str	r3, [r4, #24]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b943      	cbnz	r3, 800b67a <__swsetup_r+0xc6>
 800b668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b66c:	d1ba      	bne.n	800b5e4 <__swsetup_r+0x30>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	0781      	lsls	r1, r0, #30
 800b672:	bf58      	it	pl
 800b674:	6963      	ldrpl	r3, [r4, #20]
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	e7f4      	b.n	800b664 <__swsetup_r+0xb0>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7f7      	b.n	800b66e <__swsetup_r+0xba>
 800b67e:	bf00      	nop
 800b680:	2000069c 	.word	0x2000069c
 800b684:	08015d84 	.word	0x08015d84
 800b688:	08015da4 	.word	0x08015da4
 800b68c:	08015d64 	.word	0x08015d64

0800b690 <quorem>:
 800b690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	6903      	ldr	r3, [r0, #16]
 800b696:	690c      	ldr	r4, [r1, #16]
 800b698:	42a3      	cmp	r3, r4
 800b69a:	4607      	mov	r7, r0
 800b69c:	f2c0 8081 	blt.w	800b7a2 <quorem+0x112>
 800b6a0:	3c01      	subs	r4, #1
 800b6a2:	f101 0814 	add.w	r8, r1, #20
 800b6a6:	f100 0514 	add.w	r5, r0, #20
 800b6aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6c8:	d331      	bcc.n	800b72e <quorem+0x9e>
 800b6ca:	f04f 0e00 	mov.w	lr, #0
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	46ac      	mov	ip, r5
 800b6d2:	46f2      	mov	sl, lr
 800b6d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6d8:	b293      	uxth	r3, r2
 800b6da:	fb06 e303 	mla	r3, r6, r3, lr
 800b6de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	ebaa 0303 	sub.w	r3, sl, r3
 800b6e8:	f8dc a000 	ldr.w	sl, [ip]
 800b6ec:	0c12      	lsrs	r2, r2, #16
 800b6ee:	fa13 f38a 	uxtah	r3, r3, sl
 800b6f2:	fb06 e202 	mla	r2, r6, r2, lr
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	9b00      	ldr	r3, [sp, #0]
 800b6fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6fe:	b292      	uxth	r2, r2
 800b700:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b708:	f8bd 3000 	ldrh.w	r3, [sp]
 800b70c:	4581      	cmp	r9, r0
 800b70e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b712:	f84c 3b04 	str.w	r3, [ip], #4
 800b716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b71a:	d2db      	bcs.n	800b6d4 <quorem+0x44>
 800b71c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b720:	b92b      	cbnz	r3, 800b72e <quorem+0x9e>
 800b722:	9b01      	ldr	r3, [sp, #4]
 800b724:	3b04      	subs	r3, #4
 800b726:	429d      	cmp	r5, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	d32e      	bcc.n	800b78a <quorem+0xfa>
 800b72c:	613c      	str	r4, [r7, #16]
 800b72e:	4638      	mov	r0, r7
 800b730:	f001 fada 	bl	800cce8 <__mcmp>
 800b734:	2800      	cmp	r0, #0
 800b736:	db24      	blt.n	800b782 <quorem+0xf2>
 800b738:	3601      	adds	r6, #1
 800b73a:	4628      	mov	r0, r5
 800b73c:	f04f 0c00 	mov.w	ip, #0
 800b740:	f858 2b04 	ldr.w	r2, [r8], #4
 800b744:	f8d0 e000 	ldr.w	lr, [r0]
 800b748:	b293      	uxth	r3, r2
 800b74a:	ebac 0303 	sub.w	r3, ip, r3
 800b74e:	0c12      	lsrs	r2, r2, #16
 800b750:	fa13 f38e 	uxtah	r3, r3, lr
 800b754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b762:	45c1      	cmp	r9, r8
 800b764:	f840 3b04 	str.w	r3, [r0], #4
 800b768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b76c:	d2e8      	bcs.n	800b740 <quorem+0xb0>
 800b76e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b776:	b922      	cbnz	r2, 800b782 <quorem+0xf2>
 800b778:	3b04      	subs	r3, #4
 800b77a:	429d      	cmp	r5, r3
 800b77c:	461a      	mov	r2, r3
 800b77e:	d30a      	bcc.n	800b796 <quorem+0x106>
 800b780:	613c      	str	r4, [r7, #16]
 800b782:	4630      	mov	r0, r6
 800b784:	b003      	add	sp, #12
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	6812      	ldr	r2, [r2, #0]
 800b78c:	3b04      	subs	r3, #4
 800b78e:	2a00      	cmp	r2, #0
 800b790:	d1cc      	bne.n	800b72c <quorem+0x9c>
 800b792:	3c01      	subs	r4, #1
 800b794:	e7c7      	b.n	800b726 <quorem+0x96>
 800b796:	6812      	ldr	r2, [r2, #0]
 800b798:	3b04      	subs	r3, #4
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	d1f0      	bne.n	800b780 <quorem+0xf0>
 800b79e:	3c01      	subs	r4, #1
 800b7a0:	e7eb      	b.n	800b77a <quorem+0xea>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e7ee      	b.n	800b784 <quorem+0xf4>
	...

0800b7a8 <_dtoa_r>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	ed2d 8b04 	vpush	{d8-d9}
 800b7b0:	ec57 6b10 	vmov	r6, r7, d0
 800b7b4:	b093      	sub	sp, #76	; 0x4c
 800b7b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7bc:	9106      	str	r1, [sp, #24]
 800b7be:	ee10 aa10 	vmov	sl, s0
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7c6:	930c      	str	r3, [sp, #48]	; 0x30
 800b7c8:	46bb      	mov	fp, r7
 800b7ca:	b975      	cbnz	r5, 800b7ea <_dtoa_r+0x42>
 800b7cc:	2010      	movs	r0, #16
 800b7ce:	f7ff f879 	bl	800a8c4 <malloc>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	6260      	str	r0, [r4, #36]	; 0x24
 800b7d6:	b920      	cbnz	r0, 800b7e2 <_dtoa_r+0x3a>
 800b7d8:	4ba7      	ldr	r3, [pc, #668]	; (800ba78 <_dtoa_r+0x2d0>)
 800b7da:	21ea      	movs	r1, #234	; 0xea
 800b7dc:	48a7      	ldr	r0, [pc, #668]	; (800ba7c <_dtoa_r+0x2d4>)
 800b7de:	f001 fed5 	bl	800d58c <__assert_func>
 800b7e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7e6:	6005      	str	r5, [r0, #0]
 800b7e8:	60c5      	str	r5, [r0, #12]
 800b7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ec:	6819      	ldr	r1, [r3, #0]
 800b7ee:	b151      	cbz	r1, 800b806 <_dtoa_r+0x5e>
 800b7f0:	685a      	ldr	r2, [r3, #4]
 800b7f2:	604a      	str	r2, [r1, #4]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	4093      	lsls	r3, r2
 800b7f8:	608b      	str	r3, [r1, #8]
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f001 f832 	bl	800c864 <_Bfree>
 800b800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	1e3b      	subs	r3, r7, #0
 800b808:	bfaa      	itet	ge
 800b80a:	2300      	movge	r3, #0
 800b80c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b810:	f8c8 3000 	strge.w	r3, [r8]
 800b814:	4b9a      	ldr	r3, [pc, #616]	; (800ba80 <_dtoa_r+0x2d8>)
 800b816:	bfbc      	itt	lt
 800b818:	2201      	movlt	r2, #1
 800b81a:	f8c8 2000 	strlt.w	r2, [r8]
 800b81e:	ea33 030b 	bics.w	r3, r3, fp
 800b822:	d11b      	bne.n	800b85c <_dtoa_r+0xb4>
 800b824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b826:	f242 730f 	movw	r3, #9999	; 0x270f
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b830:	4333      	orrs	r3, r6
 800b832:	f000 8592 	beq.w	800c35a <_dtoa_r+0xbb2>
 800b836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b838:	b963      	cbnz	r3, 800b854 <_dtoa_r+0xac>
 800b83a:	4b92      	ldr	r3, [pc, #584]	; (800ba84 <_dtoa_r+0x2dc>)
 800b83c:	e022      	b.n	800b884 <_dtoa_r+0xdc>
 800b83e:	4b92      	ldr	r3, [pc, #584]	; (800ba88 <_dtoa_r+0x2e0>)
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	3308      	adds	r3, #8
 800b844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	9801      	ldr	r0, [sp, #4]
 800b84a:	b013      	add	sp, #76	; 0x4c
 800b84c:	ecbd 8b04 	vpop	{d8-d9}
 800b850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b854:	4b8b      	ldr	r3, [pc, #556]	; (800ba84 <_dtoa_r+0x2dc>)
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	3303      	adds	r3, #3
 800b85a:	e7f3      	b.n	800b844 <_dtoa_r+0x9c>
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	4650      	mov	r0, sl
 800b862:	4659      	mov	r1, fp
 800b864:	f7f5 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 800b868:	ec4b ab19 	vmov	d9, sl, fp
 800b86c:	4680      	mov	r8, r0
 800b86e:	b158      	cbz	r0, 800b888 <_dtoa_r+0xe0>
 800b870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b872:	2301      	movs	r3, #1
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 856b 	beq.w	800c354 <_dtoa_r+0xbac>
 800b87e:	4883      	ldr	r0, [pc, #524]	; (800ba8c <_dtoa_r+0x2e4>)
 800b880:	6018      	str	r0, [r3, #0]
 800b882:	1e43      	subs	r3, r0, #1
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	e7df      	b.n	800b848 <_dtoa_r+0xa0>
 800b888:	ec4b ab10 	vmov	d0, sl, fp
 800b88c:	aa10      	add	r2, sp, #64	; 0x40
 800b88e:	a911      	add	r1, sp, #68	; 0x44
 800b890:	4620      	mov	r0, r4
 800b892:	f001 facf 	bl	800ce34 <__d2b>
 800b896:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b89a:	ee08 0a10 	vmov	s16, r0
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	f000 8084 	beq.w	800b9ac <_dtoa_r+0x204>
 800b8a4:	ee19 3a90 	vmov	r3, s19
 800b8a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8b0:	4656      	mov	r6, sl
 800b8b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b8be:	4b74      	ldr	r3, [pc, #464]	; (800ba90 <_dtoa_r+0x2e8>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	f7f4 fcdf 	bl	8000288 <__aeabi_dsub>
 800b8ca:	a365      	add	r3, pc, #404	; (adr r3, 800ba60 <_dtoa_r+0x2b8>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f7f4 fe92 	bl	80005f8 <__aeabi_dmul>
 800b8d4:	a364      	add	r3, pc, #400	; (adr r3, 800ba68 <_dtoa_r+0x2c0>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f7f4 fcd7 	bl	800028c <__adddf3>
 800b8de:	4606      	mov	r6, r0
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	460f      	mov	r7, r1
 800b8e4:	f7f4 fe1e 	bl	8000524 <__aeabi_i2d>
 800b8e8:	a361      	add	r3, pc, #388	; (adr r3, 800ba70 <_dtoa_r+0x2c8>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	f7f4 fcc7 	bl	800028c <__adddf3>
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	f7f5 f929 	bl	8000b58 <__aeabi_d2iz>
 800b906:	2200      	movs	r2, #0
 800b908:	9000      	str	r0, [sp, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	4630      	mov	r0, r6
 800b90e:	4639      	mov	r1, r7
 800b910:	f7f5 f8e4 	bl	8000adc <__aeabi_dcmplt>
 800b914:	b150      	cbz	r0, 800b92c <_dtoa_r+0x184>
 800b916:	9800      	ldr	r0, [sp, #0]
 800b918:	f7f4 fe04 	bl	8000524 <__aeabi_i2d>
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	f7f5 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b924:	b910      	cbnz	r0, 800b92c <_dtoa_r+0x184>
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	3b01      	subs	r3, #1
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	9b00      	ldr	r3, [sp, #0]
 800b92e:	2b16      	cmp	r3, #22
 800b930:	d85a      	bhi.n	800b9e8 <_dtoa_r+0x240>
 800b932:	9a00      	ldr	r2, [sp, #0]
 800b934:	4b57      	ldr	r3, [pc, #348]	; (800ba94 <_dtoa_r+0x2ec>)
 800b936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	ec51 0b19 	vmov	r0, r1, d9
 800b942:	f7f5 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	d050      	beq.n	800b9ec <_dtoa_r+0x244>
 800b94a:	9b00      	ldr	r3, [sp, #0]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	2300      	movs	r3, #0
 800b952:	930b      	str	r3, [sp, #44]	; 0x2c
 800b954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b956:	1b5d      	subs	r5, r3, r5
 800b958:	1e6b      	subs	r3, r5, #1
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	bf45      	ittet	mi
 800b95e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b962:	9304      	strmi	r3, [sp, #16]
 800b964:	2300      	movpl	r3, #0
 800b966:	2300      	movmi	r3, #0
 800b968:	bf4c      	ite	mi
 800b96a:	9305      	strmi	r3, [sp, #20]
 800b96c:	9304      	strpl	r3, [sp, #16]
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	db3d      	blt.n	800b9f0 <_dtoa_r+0x248>
 800b974:	9b05      	ldr	r3, [sp, #20]
 800b976:	9a00      	ldr	r2, [sp, #0]
 800b978:	920a      	str	r2, [sp, #40]	; 0x28
 800b97a:	4413      	add	r3, r2
 800b97c:	9305      	str	r3, [sp, #20]
 800b97e:	2300      	movs	r3, #0
 800b980:	9307      	str	r3, [sp, #28]
 800b982:	9b06      	ldr	r3, [sp, #24]
 800b984:	2b09      	cmp	r3, #9
 800b986:	f200 8089 	bhi.w	800ba9c <_dtoa_r+0x2f4>
 800b98a:	2b05      	cmp	r3, #5
 800b98c:	bfc4      	itt	gt
 800b98e:	3b04      	subgt	r3, #4
 800b990:	9306      	strgt	r3, [sp, #24]
 800b992:	9b06      	ldr	r3, [sp, #24]
 800b994:	f1a3 0302 	sub.w	r3, r3, #2
 800b998:	bfcc      	ite	gt
 800b99a:	2500      	movgt	r5, #0
 800b99c:	2501      	movle	r5, #1
 800b99e:	2b03      	cmp	r3, #3
 800b9a0:	f200 8087 	bhi.w	800bab2 <_dtoa_r+0x30a>
 800b9a4:	e8df f003 	tbb	[pc, r3]
 800b9a8:	59383a2d 	.word	0x59383a2d
 800b9ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9b0:	441d      	add	r5, r3
 800b9b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9b6:	2b20      	cmp	r3, #32
 800b9b8:	bfc1      	itttt	gt
 800b9ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b9c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b9c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b9ca:	bfda      	itte	le
 800b9cc:	f1c3 0320 	rsble	r3, r3, #32
 800b9d0:	fa06 f003 	lslle.w	r0, r6, r3
 800b9d4:	4318      	orrgt	r0, r3
 800b9d6:	f7f4 fd95 	bl	8000504 <__aeabi_ui2d>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4606      	mov	r6, r0
 800b9de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b9e2:	3d01      	subs	r5, #1
 800b9e4:	930e      	str	r3, [sp, #56]	; 0x38
 800b9e6:	e76a      	b.n	800b8be <_dtoa_r+0x116>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e7b2      	b.n	800b952 <_dtoa_r+0x1aa>
 800b9ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9ee:	e7b1      	b.n	800b954 <_dtoa_r+0x1ac>
 800b9f0:	9b04      	ldr	r3, [sp, #16]
 800b9f2:	9a00      	ldr	r2, [sp, #0]
 800b9f4:	1a9b      	subs	r3, r3, r2
 800b9f6:	9304      	str	r3, [sp, #16]
 800b9f8:	4253      	negs	r3, r2
 800b9fa:	9307      	str	r3, [sp, #28]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800ba00:	e7bf      	b.n	800b982 <_dtoa_r+0x1da>
 800ba02:	2300      	movs	r3, #0
 800ba04:	9308      	str	r3, [sp, #32]
 800ba06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	dc55      	bgt.n	800bab8 <_dtoa_r+0x310>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba12:	461a      	mov	r2, r3
 800ba14:	9209      	str	r2, [sp, #36]	; 0x24
 800ba16:	e00c      	b.n	800ba32 <_dtoa_r+0x28a>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e7f3      	b.n	800ba04 <_dtoa_r+0x25c>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba20:	9308      	str	r3, [sp, #32]
 800ba22:	9b00      	ldr	r3, [sp, #0]
 800ba24:	4413      	add	r3, r2
 800ba26:	9302      	str	r3, [sp, #8]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	9303      	str	r3, [sp, #12]
 800ba2e:	bfb8      	it	lt
 800ba30:	2301      	movlt	r3, #1
 800ba32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba34:	2200      	movs	r2, #0
 800ba36:	6042      	str	r2, [r0, #4]
 800ba38:	2204      	movs	r2, #4
 800ba3a:	f102 0614 	add.w	r6, r2, #20
 800ba3e:	429e      	cmp	r6, r3
 800ba40:	6841      	ldr	r1, [r0, #4]
 800ba42:	d93d      	bls.n	800bac0 <_dtoa_r+0x318>
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fecd 	bl	800c7e4 <_Balloc>
 800ba4a:	9001      	str	r0, [sp, #4]
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d13b      	bne.n	800bac8 <_dtoa_r+0x320>
 800ba50:	4b11      	ldr	r3, [pc, #68]	; (800ba98 <_dtoa_r+0x2f0>)
 800ba52:	4602      	mov	r2, r0
 800ba54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ba58:	e6c0      	b.n	800b7dc <_dtoa_r+0x34>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e7df      	b.n	800ba1e <_dtoa_r+0x276>
 800ba5e:	bf00      	nop
 800ba60:	636f4361 	.word	0x636f4361
 800ba64:	3fd287a7 	.word	0x3fd287a7
 800ba68:	8b60c8b3 	.word	0x8b60c8b3
 800ba6c:	3fc68a28 	.word	0x3fc68a28
 800ba70:	509f79fb 	.word	0x509f79fb
 800ba74:	3fd34413 	.word	0x3fd34413
 800ba78:	08015ce1 	.word	0x08015ce1
 800ba7c:	08015cf8 	.word	0x08015cf8
 800ba80:	7ff00000 	.word	0x7ff00000
 800ba84:	08015cdd 	.word	0x08015cdd
 800ba88:	08015cd4 	.word	0x08015cd4
 800ba8c:	08015cb1 	.word	0x08015cb1
 800ba90:	3ff80000 	.word	0x3ff80000
 800ba94:	08015e48 	.word	0x08015e48
 800ba98:	08015d53 	.word	0x08015d53
 800ba9c:	2501      	movs	r5, #1
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9306      	str	r3, [sp, #24]
 800baa2:	9508      	str	r5, [sp, #32]
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295
 800baa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baac:	2200      	movs	r2, #0
 800baae:	2312      	movs	r3, #18
 800bab0:	e7b0      	b.n	800ba14 <_dtoa_r+0x26c>
 800bab2:	2301      	movs	r3, #1
 800bab4:	9308      	str	r3, [sp, #32]
 800bab6:	e7f5      	b.n	800baa4 <_dtoa_r+0x2fc>
 800bab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800babe:	e7b8      	b.n	800ba32 <_dtoa_r+0x28a>
 800bac0:	3101      	adds	r1, #1
 800bac2:	6041      	str	r1, [r0, #4]
 800bac4:	0052      	lsls	r2, r2, #1
 800bac6:	e7b8      	b.n	800ba3a <_dtoa_r+0x292>
 800bac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baca:	9a01      	ldr	r2, [sp, #4]
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	9b03      	ldr	r3, [sp, #12]
 800bad0:	2b0e      	cmp	r3, #14
 800bad2:	f200 809d 	bhi.w	800bc10 <_dtoa_r+0x468>
 800bad6:	2d00      	cmp	r5, #0
 800bad8:	f000 809a 	beq.w	800bc10 <_dtoa_r+0x468>
 800badc:	9b00      	ldr	r3, [sp, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	dd32      	ble.n	800bb48 <_dtoa_r+0x3a0>
 800bae2:	4ab7      	ldr	r2, [pc, #732]	; (800bdc0 <_dtoa_r+0x618>)
 800bae4:	f003 030f 	and.w	r3, r3, #15
 800bae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baf0:	9b00      	ldr	r3, [sp, #0]
 800baf2:	05d8      	lsls	r0, r3, #23
 800baf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800baf8:	d516      	bpl.n	800bb28 <_dtoa_r+0x380>
 800bafa:	4bb2      	ldr	r3, [pc, #712]	; (800bdc4 <_dtoa_r+0x61c>)
 800bafc:	ec51 0b19 	vmov	r0, r1, d9
 800bb00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb04:	f7f4 fea2 	bl	800084c <__aeabi_ddiv>
 800bb08:	f007 070f 	and.w	r7, r7, #15
 800bb0c:	4682      	mov	sl, r0
 800bb0e:	468b      	mov	fp, r1
 800bb10:	2503      	movs	r5, #3
 800bb12:	4eac      	ldr	r6, [pc, #688]	; (800bdc4 <_dtoa_r+0x61c>)
 800bb14:	b957      	cbnz	r7, 800bb2c <_dtoa_r+0x384>
 800bb16:	4642      	mov	r2, r8
 800bb18:	464b      	mov	r3, r9
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	4659      	mov	r1, fp
 800bb1e:	f7f4 fe95 	bl	800084c <__aeabi_ddiv>
 800bb22:	4682      	mov	sl, r0
 800bb24:	468b      	mov	fp, r1
 800bb26:	e028      	b.n	800bb7a <_dtoa_r+0x3d2>
 800bb28:	2502      	movs	r5, #2
 800bb2a:	e7f2      	b.n	800bb12 <_dtoa_r+0x36a>
 800bb2c:	07f9      	lsls	r1, r7, #31
 800bb2e:	d508      	bpl.n	800bb42 <_dtoa_r+0x39a>
 800bb30:	4640      	mov	r0, r8
 800bb32:	4649      	mov	r1, r9
 800bb34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb38:	f7f4 fd5e 	bl	80005f8 <__aeabi_dmul>
 800bb3c:	3501      	adds	r5, #1
 800bb3e:	4680      	mov	r8, r0
 800bb40:	4689      	mov	r9, r1
 800bb42:	107f      	asrs	r7, r7, #1
 800bb44:	3608      	adds	r6, #8
 800bb46:	e7e5      	b.n	800bb14 <_dtoa_r+0x36c>
 800bb48:	f000 809b 	beq.w	800bc82 <_dtoa_r+0x4da>
 800bb4c:	9b00      	ldr	r3, [sp, #0]
 800bb4e:	4f9d      	ldr	r7, [pc, #628]	; (800bdc4 <_dtoa_r+0x61c>)
 800bb50:	425e      	negs	r6, r3
 800bb52:	4b9b      	ldr	r3, [pc, #620]	; (800bdc0 <_dtoa_r+0x618>)
 800bb54:	f006 020f 	and.w	r2, r6, #15
 800bb58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	ec51 0b19 	vmov	r0, r1, d9
 800bb64:	f7f4 fd48 	bl	80005f8 <__aeabi_dmul>
 800bb68:	1136      	asrs	r6, r6, #4
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	468b      	mov	fp, r1
 800bb6e:	2300      	movs	r3, #0
 800bb70:	2502      	movs	r5, #2
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	d17a      	bne.n	800bc6c <_dtoa_r+0x4c4>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1d3      	bne.n	800bb22 <_dtoa_r+0x37a>
 800bb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 8082 	beq.w	800bc86 <_dtoa_r+0x4de>
 800bb82:	4b91      	ldr	r3, [pc, #580]	; (800bdc8 <_dtoa_r+0x620>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	4650      	mov	r0, sl
 800bb88:	4659      	mov	r1, fp
 800bb8a:	f7f4 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d079      	beq.n	800bc86 <_dtoa_r+0x4de>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d076      	beq.n	800bc86 <_dtoa_r+0x4de>
 800bb98:	9b02      	ldr	r3, [sp, #8]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	dd36      	ble.n	800bc0c <_dtoa_r+0x464>
 800bb9e:	9b00      	ldr	r3, [sp, #0]
 800bba0:	4650      	mov	r0, sl
 800bba2:	4659      	mov	r1, fp
 800bba4:	1e5f      	subs	r7, r3, #1
 800bba6:	2200      	movs	r2, #0
 800bba8:	4b88      	ldr	r3, [pc, #544]	; (800bdcc <_dtoa_r+0x624>)
 800bbaa:	f7f4 fd25 	bl	80005f8 <__aeabi_dmul>
 800bbae:	9e02      	ldr	r6, [sp, #8]
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	468b      	mov	fp, r1
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f7f4 fcb4 	bl	8000524 <__aeabi_i2d>
 800bbbc:	4652      	mov	r2, sl
 800bbbe:	465b      	mov	r3, fp
 800bbc0:	f7f4 fd1a 	bl	80005f8 <__aeabi_dmul>
 800bbc4:	4b82      	ldr	r3, [pc, #520]	; (800bdd0 <_dtoa_r+0x628>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f7f4 fb60 	bl	800028c <__adddf3>
 800bbcc:	46d0      	mov	r8, sl
 800bbce:	46d9      	mov	r9, fp
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	d158      	bne.n	800bc8c <_dtoa_r+0x4e4>
 800bbda:	4b7e      	ldr	r3, [pc, #504]	; (800bdd4 <_dtoa_r+0x62c>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	f7f4 fb51 	bl	8000288 <__aeabi_dsub>
 800bbe6:	4652      	mov	r2, sl
 800bbe8:	465b      	mov	r3, fp
 800bbea:	4680      	mov	r8, r0
 800bbec:	4689      	mov	r9, r1
 800bbee:	f7f4 ff93 	bl	8000b18 <__aeabi_dcmpgt>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	f040 8295 	bne.w	800c122 <_dtoa_r+0x97a>
 800bbf8:	4652      	mov	r2, sl
 800bbfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bbfe:	4640      	mov	r0, r8
 800bc00:	4649      	mov	r1, r9
 800bc02:	f7f4 ff6b 	bl	8000adc <__aeabi_dcmplt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f040 8289 	bne.w	800c11e <_dtoa_r+0x976>
 800bc0c:	ec5b ab19 	vmov	sl, fp, d9
 800bc10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f2c0 8148 	blt.w	800bea8 <_dtoa_r+0x700>
 800bc18:	9a00      	ldr	r2, [sp, #0]
 800bc1a:	2a0e      	cmp	r2, #14
 800bc1c:	f300 8144 	bgt.w	800bea8 <_dtoa_r+0x700>
 800bc20:	4b67      	ldr	r3, [pc, #412]	; (800bdc0 <_dtoa_r+0x618>)
 800bc22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc26:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f280 80d5 	bge.w	800bddc <_dtoa_r+0x634>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f300 80d1 	bgt.w	800bddc <_dtoa_r+0x634>
 800bc3a:	f040 826f 	bne.w	800c11c <_dtoa_r+0x974>
 800bc3e:	4b65      	ldr	r3, [pc, #404]	; (800bdd4 <_dtoa_r+0x62c>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	4640      	mov	r0, r8
 800bc44:	4649      	mov	r1, r9
 800bc46:	f7f4 fcd7 	bl	80005f8 <__aeabi_dmul>
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	465b      	mov	r3, fp
 800bc4e:	f7f4 ff59 	bl	8000b04 <__aeabi_dcmpge>
 800bc52:	9e03      	ldr	r6, [sp, #12]
 800bc54:	4637      	mov	r7, r6
 800bc56:	2800      	cmp	r0, #0
 800bc58:	f040 8245 	bne.w	800c0e6 <_dtoa_r+0x93e>
 800bc5c:	9d01      	ldr	r5, [sp, #4]
 800bc5e:	2331      	movs	r3, #49	; 0x31
 800bc60:	f805 3b01 	strb.w	r3, [r5], #1
 800bc64:	9b00      	ldr	r3, [sp, #0]
 800bc66:	3301      	adds	r3, #1
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	e240      	b.n	800c0ee <_dtoa_r+0x946>
 800bc6c:	07f2      	lsls	r2, r6, #31
 800bc6e:	d505      	bpl.n	800bc7c <_dtoa_r+0x4d4>
 800bc70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc74:	f7f4 fcc0 	bl	80005f8 <__aeabi_dmul>
 800bc78:	3501      	adds	r5, #1
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	1076      	asrs	r6, r6, #1
 800bc7e:	3708      	adds	r7, #8
 800bc80:	e777      	b.n	800bb72 <_dtoa_r+0x3ca>
 800bc82:	2502      	movs	r5, #2
 800bc84:	e779      	b.n	800bb7a <_dtoa_r+0x3d2>
 800bc86:	9f00      	ldr	r7, [sp, #0]
 800bc88:	9e03      	ldr	r6, [sp, #12]
 800bc8a:	e794      	b.n	800bbb6 <_dtoa_r+0x40e>
 800bc8c:	9901      	ldr	r1, [sp, #4]
 800bc8e:	4b4c      	ldr	r3, [pc, #304]	; (800bdc0 <_dtoa_r+0x618>)
 800bc90:	4431      	add	r1, r6
 800bc92:	910d      	str	r1, [sp, #52]	; 0x34
 800bc94:	9908      	ldr	r1, [sp, #32]
 800bc96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	d043      	beq.n	800bd2a <_dtoa_r+0x582>
 800bca2:	494d      	ldr	r1, [pc, #308]	; (800bdd8 <_dtoa_r+0x630>)
 800bca4:	2000      	movs	r0, #0
 800bca6:	f7f4 fdd1 	bl	800084c <__aeabi_ddiv>
 800bcaa:	4652      	mov	r2, sl
 800bcac:	465b      	mov	r3, fp
 800bcae:	f7f4 faeb 	bl	8000288 <__aeabi_dsub>
 800bcb2:	9d01      	ldr	r5, [sp, #4]
 800bcb4:	4682      	mov	sl, r0
 800bcb6:	468b      	mov	fp, r1
 800bcb8:	4649      	mov	r1, r9
 800bcba:	4640      	mov	r0, r8
 800bcbc:	f7f4 ff4c 	bl	8000b58 <__aeabi_d2iz>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	f7f4 fc2f 	bl	8000524 <__aeabi_i2d>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4640      	mov	r0, r8
 800bccc:	4649      	mov	r1, r9
 800bcce:	f7f4 fadb 	bl	8000288 <__aeabi_dsub>
 800bcd2:	3630      	adds	r6, #48	; 0x30
 800bcd4:	f805 6b01 	strb.w	r6, [r5], #1
 800bcd8:	4652      	mov	r2, sl
 800bcda:	465b      	mov	r3, fp
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	f7f4 fefc 	bl	8000adc <__aeabi_dcmplt>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d163      	bne.n	800bdb0 <_dtoa_r+0x608>
 800bce8:	4642      	mov	r2, r8
 800bcea:	464b      	mov	r3, r9
 800bcec:	4936      	ldr	r1, [pc, #216]	; (800bdc8 <_dtoa_r+0x620>)
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f7f4 faca 	bl	8000288 <__aeabi_dsub>
 800bcf4:	4652      	mov	r2, sl
 800bcf6:	465b      	mov	r3, fp
 800bcf8:	f7f4 fef0 	bl	8000adc <__aeabi_dcmplt>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f040 80b5 	bne.w	800be6c <_dtoa_r+0x6c4>
 800bd02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd04:	429d      	cmp	r5, r3
 800bd06:	d081      	beq.n	800bc0c <_dtoa_r+0x464>
 800bd08:	4b30      	ldr	r3, [pc, #192]	; (800bdcc <_dtoa_r+0x624>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4650      	mov	r0, sl
 800bd0e:	4659      	mov	r1, fp
 800bd10:	f7f4 fc72 	bl	80005f8 <__aeabi_dmul>
 800bd14:	4b2d      	ldr	r3, [pc, #180]	; (800bdcc <_dtoa_r+0x624>)
 800bd16:	4682      	mov	sl, r0
 800bd18:	468b      	mov	fp, r1
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f7f4 fc6a 	bl	80005f8 <__aeabi_dmul>
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	e7c6      	b.n	800bcb8 <_dtoa_r+0x510>
 800bd2a:	4650      	mov	r0, sl
 800bd2c:	4659      	mov	r1, fp
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd34:	9d01      	ldr	r5, [sp, #4]
 800bd36:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd38:	4682      	mov	sl, r0
 800bd3a:	468b      	mov	fp, r1
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	4640      	mov	r0, r8
 800bd40:	f7f4 ff0a 	bl	8000b58 <__aeabi_d2iz>
 800bd44:	4606      	mov	r6, r0
 800bd46:	f7f4 fbed 	bl	8000524 <__aeabi_i2d>
 800bd4a:	3630      	adds	r6, #48	; 0x30
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4640      	mov	r0, r8
 800bd52:	4649      	mov	r1, r9
 800bd54:	f7f4 fa98 	bl	8000288 <__aeabi_dsub>
 800bd58:	f805 6b01 	strb.w	r6, [r5], #1
 800bd5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	4680      	mov	r8, r0
 800bd62:	4689      	mov	r9, r1
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	d124      	bne.n	800bdb4 <_dtoa_r+0x60c>
 800bd6a:	4b1b      	ldr	r3, [pc, #108]	; (800bdd8 <_dtoa_r+0x630>)
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	4659      	mov	r1, fp
 800bd70:	f7f4 fa8c 	bl	800028c <__adddf3>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	4640      	mov	r0, r8
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	f7f4 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d173      	bne.n	800be6c <_dtoa_r+0x6c4>
 800bd84:	4652      	mov	r2, sl
 800bd86:	465b      	mov	r3, fp
 800bd88:	4913      	ldr	r1, [pc, #76]	; (800bdd8 <_dtoa_r+0x630>)
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	f7f4 fa7c 	bl	8000288 <__aeabi_dsub>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	4640      	mov	r0, r8
 800bd96:	4649      	mov	r1, r9
 800bd98:	f7f4 fea0 	bl	8000adc <__aeabi_dcmplt>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f43f af35 	beq.w	800bc0c <_dtoa_r+0x464>
 800bda2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bda4:	1e6b      	subs	r3, r5, #1
 800bda6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bda8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdac:	2b30      	cmp	r3, #48	; 0x30
 800bdae:	d0f8      	beq.n	800bda2 <_dtoa_r+0x5fa>
 800bdb0:	9700      	str	r7, [sp, #0]
 800bdb2:	e049      	b.n	800be48 <_dtoa_r+0x6a0>
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <_dtoa_r+0x624>)
 800bdb6:	f7f4 fc1f 	bl	80005f8 <__aeabi_dmul>
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4689      	mov	r9, r1
 800bdbe:	e7bd      	b.n	800bd3c <_dtoa_r+0x594>
 800bdc0:	08015e48 	.word	0x08015e48
 800bdc4:	08015e20 	.word	0x08015e20
 800bdc8:	3ff00000 	.word	0x3ff00000
 800bdcc:	40240000 	.word	0x40240000
 800bdd0:	401c0000 	.word	0x401c0000
 800bdd4:	40140000 	.word	0x40140000
 800bdd8:	3fe00000 	.word	0x3fe00000
 800bddc:	9d01      	ldr	r5, [sp, #4]
 800bdde:	4656      	mov	r6, sl
 800bde0:	465f      	mov	r7, fp
 800bde2:	4642      	mov	r2, r8
 800bde4:	464b      	mov	r3, r9
 800bde6:	4630      	mov	r0, r6
 800bde8:	4639      	mov	r1, r7
 800bdea:	f7f4 fd2f 	bl	800084c <__aeabi_ddiv>
 800bdee:	f7f4 feb3 	bl	8000b58 <__aeabi_d2iz>
 800bdf2:	4682      	mov	sl, r0
 800bdf4:	f7f4 fb96 	bl	8000524 <__aeabi_i2d>
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be0c:	f7f4 fa3c 	bl	8000288 <__aeabi_dsub>
 800be10:	f805 6b01 	strb.w	r6, [r5], #1
 800be14:	9e01      	ldr	r6, [sp, #4]
 800be16:	9f03      	ldr	r7, [sp, #12]
 800be18:	1bae      	subs	r6, r5, r6
 800be1a:	42b7      	cmp	r7, r6
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	d135      	bne.n	800be8e <_dtoa_r+0x6e6>
 800be22:	f7f4 fa33 	bl	800028c <__adddf3>
 800be26:	4642      	mov	r2, r8
 800be28:	464b      	mov	r3, r9
 800be2a:	4606      	mov	r6, r0
 800be2c:	460f      	mov	r7, r1
 800be2e:	f7f4 fe73 	bl	8000b18 <__aeabi_dcmpgt>
 800be32:	b9d0      	cbnz	r0, 800be6a <_dtoa_r+0x6c2>
 800be34:	4642      	mov	r2, r8
 800be36:	464b      	mov	r3, r9
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800be40:	b110      	cbz	r0, 800be48 <_dtoa_r+0x6a0>
 800be42:	f01a 0f01 	tst.w	sl, #1
 800be46:	d110      	bne.n	800be6a <_dtoa_r+0x6c2>
 800be48:	4620      	mov	r0, r4
 800be4a:	ee18 1a10 	vmov	r1, s16
 800be4e:	f000 fd09 	bl	800c864 <_Bfree>
 800be52:	2300      	movs	r3, #0
 800be54:	9800      	ldr	r0, [sp, #0]
 800be56:	702b      	strb	r3, [r5, #0]
 800be58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be5a:	3001      	adds	r0, #1
 800be5c:	6018      	str	r0, [r3, #0]
 800be5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be60:	2b00      	cmp	r3, #0
 800be62:	f43f acf1 	beq.w	800b848 <_dtoa_r+0xa0>
 800be66:	601d      	str	r5, [r3, #0]
 800be68:	e4ee      	b.n	800b848 <_dtoa_r+0xa0>
 800be6a:	9f00      	ldr	r7, [sp, #0]
 800be6c:	462b      	mov	r3, r5
 800be6e:	461d      	mov	r5, r3
 800be70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be74:	2a39      	cmp	r2, #57	; 0x39
 800be76:	d106      	bne.n	800be86 <_dtoa_r+0x6de>
 800be78:	9a01      	ldr	r2, [sp, #4]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d1f7      	bne.n	800be6e <_dtoa_r+0x6c6>
 800be7e:	9901      	ldr	r1, [sp, #4]
 800be80:	2230      	movs	r2, #48	; 0x30
 800be82:	3701      	adds	r7, #1
 800be84:	700a      	strb	r2, [r1, #0]
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	3201      	adds	r2, #1
 800be8a:	701a      	strb	r2, [r3, #0]
 800be8c:	e790      	b.n	800bdb0 <_dtoa_r+0x608>
 800be8e:	4ba6      	ldr	r3, [pc, #664]	; (800c128 <_dtoa_r+0x980>)
 800be90:	2200      	movs	r2, #0
 800be92:	f7f4 fbb1 	bl	80005f8 <__aeabi_dmul>
 800be96:	2200      	movs	r2, #0
 800be98:	2300      	movs	r3, #0
 800be9a:	4606      	mov	r6, r0
 800be9c:	460f      	mov	r7, r1
 800be9e:	f7f4 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d09d      	beq.n	800bde2 <_dtoa_r+0x63a>
 800bea6:	e7cf      	b.n	800be48 <_dtoa_r+0x6a0>
 800bea8:	9a08      	ldr	r2, [sp, #32]
 800beaa:	2a00      	cmp	r2, #0
 800beac:	f000 80d7 	beq.w	800c05e <_dtoa_r+0x8b6>
 800beb0:	9a06      	ldr	r2, [sp, #24]
 800beb2:	2a01      	cmp	r2, #1
 800beb4:	f300 80ba 	bgt.w	800c02c <_dtoa_r+0x884>
 800beb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beba:	2a00      	cmp	r2, #0
 800bebc:	f000 80b2 	beq.w	800c024 <_dtoa_r+0x87c>
 800bec0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bec4:	9e07      	ldr	r6, [sp, #28]
 800bec6:	9d04      	ldr	r5, [sp, #16]
 800bec8:	9a04      	ldr	r2, [sp, #16]
 800beca:	441a      	add	r2, r3
 800becc:	9204      	str	r2, [sp, #16]
 800bece:	9a05      	ldr	r2, [sp, #20]
 800bed0:	2101      	movs	r1, #1
 800bed2:	441a      	add	r2, r3
 800bed4:	4620      	mov	r0, r4
 800bed6:	9205      	str	r2, [sp, #20]
 800bed8:	f000 fd7c 	bl	800c9d4 <__i2b>
 800bedc:	4607      	mov	r7, r0
 800bede:	2d00      	cmp	r5, #0
 800bee0:	dd0c      	ble.n	800befc <_dtoa_r+0x754>
 800bee2:	9b05      	ldr	r3, [sp, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	dd09      	ble.n	800befc <_dtoa_r+0x754>
 800bee8:	42ab      	cmp	r3, r5
 800beea:	9a04      	ldr	r2, [sp, #16]
 800beec:	bfa8      	it	ge
 800beee:	462b      	movge	r3, r5
 800bef0:	1ad2      	subs	r2, r2, r3
 800bef2:	9204      	str	r2, [sp, #16]
 800bef4:	9a05      	ldr	r2, [sp, #20]
 800bef6:	1aed      	subs	r5, r5, r3
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	9305      	str	r3, [sp, #20]
 800befc:	9b07      	ldr	r3, [sp, #28]
 800befe:	b31b      	cbz	r3, 800bf48 <_dtoa_r+0x7a0>
 800bf00:	9b08      	ldr	r3, [sp, #32]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 80af 	beq.w	800c066 <_dtoa_r+0x8be>
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	dd13      	ble.n	800bf34 <_dtoa_r+0x78c>
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	4632      	mov	r2, r6
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 fe1f 	bl	800cb54 <__pow5mult>
 800bf16:	ee18 2a10 	vmov	r2, s16
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f000 fd6e 	bl	800ca00 <__multiply>
 800bf24:	ee18 1a10 	vmov	r1, s16
 800bf28:	4680      	mov	r8, r0
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 fc9a 	bl	800c864 <_Bfree>
 800bf30:	ee08 8a10 	vmov	s16, r8
 800bf34:	9b07      	ldr	r3, [sp, #28]
 800bf36:	1b9a      	subs	r2, r3, r6
 800bf38:	d006      	beq.n	800bf48 <_dtoa_r+0x7a0>
 800bf3a:	ee18 1a10 	vmov	r1, s16
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f000 fe08 	bl	800cb54 <__pow5mult>
 800bf44:	ee08 0a10 	vmov	s16, r0
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 fd42 	bl	800c9d4 <__i2b>
 800bf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	4606      	mov	r6, r0
 800bf56:	f340 8088 	ble.w	800c06a <_dtoa_r+0x8c2>
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 fdf8 	bl	800cb54 <__pow5mult>
 800bf64:	9b06      	ldr	r3, [sp, #24]
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	4606      	mov	r6, r0
 800bf6a:	f340 8081 	ble.w	800c070 <_dtoa_r+0x8c8>
 800bf6e:	f04f 0800 	mov.w	r8, #0
 800bf72:	6933      	ldr	r3, [r6, #16]
 800bf74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	f000 fcdb 	bl	800c934 <__hi0bits>
 800bf7e:	f1c0 0020 	rsb	r0, r0, #32
 800bf82:	9b05      	ldr	r3, [sp, #20]
 800bf84:	4418      	add	r0, r3
 800bf86:	f010 001f 	ands.w	r0, r0, #31
 800bf8a:	f000 8092 	beq.w	800c0b2 <_dtoa_r+0x90a>
 800bf8e:	f1c0 0320 	rsb	r3, r0, #32
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	f340 808a 	ble.w	800c0ac <_dtoa_r+0x904>
 800bf98:	f1c0 001c 	rsb	r0, r0, #28
 800bf9c:	9b04      	ldr	r3, [sp, #16]
 800bf9e:	4403      	add	r3, r0
 800bfa0:	9304      	str	r3, [sp, #16]
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	4403      	add	r3, r0
 800bfa6:	4405      	add	r5, r0
 800bfa8:	9305      	str	r3, [sp, #20]
 800bfaa:	9b04      	ldr	r3, [sp, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dd07      	ble.n	800bfc0 <_dtoa_r+0x818>
 800bfb0:	ee18 1a10 	vmov	r1, s16
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 fe26 	bl	800cc08 <__lshift>
 800bfbc:	ee08 0a10 	vmov	s16, r0
 800bfc0:	9b05      	ldr	r3, [sp, #20]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dd05      	ble.n	800bfd2 <_dtoa_r+0x82a>
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fe1c 	bl	800cc08 <__lshift>
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d06e      	beq.n	800c0b6 <_dtoa_r+0x90e>
 800bfd8:	ee18 0a10 	vmov	r0, s16
 800bfdc:	4631      	mov	r1, r6
 800bfde:	f000 fe83 	bl	800cce8 <__mcmp>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	da67      	bge.n	800c0b6 <_dtoa_r+0x90e>
 800bfe6:	9b00      	ldr	r3, [sp, #0]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	ee18 1a10 	vmov	r1, s16
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	220a      	movs	r2, #10
 800bff2:	2300      	movs	r3, #0
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 fc57 	bl	800c8a8 <__multadd>
 800bffa:	9b08      	ldr	r3, [sp, #32]
 800bffc:	ee08 0a10 	vmov	s16, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 81b1 	beq.w	800c368 <_dtoa_r+0xbc0>
 800c006:	2300      	movs	r3, #0
 800c008:	4639      	mov	r1, r7
 800c00a:	220a      	movs	r2, #10
 800c00c:	4620      	mov	r0, r4
 800c00e:	f000 fc4b 	bl	800c8a8 <__multadd>
 800c012:	9b02      	ldr	r3, [sp, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	4607      	mov	r7, r0
 800c018:	f300 808e 	bgt.w	800c138 <_dtoa_r+0x990>
 800c01c:	9b06      	ldr	r3, [sp, #24]
 800c01e:	2b02      	cmp	r3, #2
 800c020:	dc51      	bgt.n	800c0c6 <_dtoa_r+0x91e>
 800c022:	e089      	b.n	800c138 <_dtoa_r+0x990>
 800c024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c02a:	e74b      	b.n	800bec4 <_dtoa_r+0x71c>
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	1e5e      	subs	r6, r3, #1
 800c030:	9b07      	ldr	r3, [sp, #28]
 800c032:	42b3      	cmp	r3, r6
 800c034:	bfbf      	itttt	lt
 800c036:	9b07      	ldrlt	r3, [sp, #28]
 800c038:	9607      	strlt	r6, [sp, #28]
 800c03a:	1af2      	sublt	r2, r6, r3
 800c03c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c03e:	bfb6      	itet	lt
 800c040:	189b      	addlt	r3, r3, r2
 800c042:	1b9e      	subge	r6, r3, r6
 800c044:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	bfb8      	it	lt
 800c04a:	2600      	movlt	r6, #0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	bfb7      	itett	lt
 800c050:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c054:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c058:	1a9d      	sublt	r5, r3, r2
 800c05a:	2300      	movlt	r3, #0
 800c05c:	e734      	b.n	800bec8 <_dtoa_r+0x720>
 800c05e:	9e07      	ldr	r6, [sp, #28]
 800c060:	9d04      	ldr	r5, [sp, #16]
 800c062:	9f08      	ldr	r7, [sp, #32]
 800c064:	e73b      	b.n	800bede <_dtoa_r+0x736>
 800c066:	9a07      	ldr	r2, [sp, #28]
 800c068:	e767      	b.n	800bf3a <_dtoa_r+0x792>
 800c06a:	9b06      	ldr	r3, [sp, #24]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	dc18      	bgt.n	800c0a2 <_dtoa_r+0x8fa>
 800c070:	f1ba 0f00 	cmp.w	sl, #0
 800c074:	d115      	bne.n	800c0a2 <_dtoa_r+0x8fa>
 800c076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c07a:	b993      	cbnz	r3, 800c0a2 <_dtoa_r+0x8fa>
 800c07c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c080:	0d1b      	lsrs	r3, r3, #20
 800c082:	051b      	lsls	r3, r3, #20
 800c084:	b183      	cbz	r3, 800c0a8 <_dtoa_r+0x900>
 800c086:	9b04      	ldr	r3, [sp, #16]
 800c088:	3301      	adds	r3, #1
 800c08a:	9304      	str	r3, [sp, #16]
 800c08c:	9b05      	ldr	r3, [sp, #20]
 800c08e:	3301      	adds	r3, #1
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	f04f 0801 	mov.w	r8, #1
 800c096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f47f af6a 	bne.w	800bf72 <_dtoa_r+0x7ca>
 800c09e:	2001      	movs	r0, #1
 800c0a0:	e76f      	b.n	800bf82 <_dtoa_r+0x7da>
 800c0a2:	f04f 0800 	mov.w	r8, #0
 800c0a6:	e7f6      	b.n	800c096 <_dtoa_r+0x8ee>
 800c0a8:	4698      	mov	r8, r3
 800c0aa:	e7f4      	b.n	800c096 <_dtoa_r+0x8ee>
 800c0ac:	f43f af7d 	beq.w	800bfaa <_dtoa_r+0x802>
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	301c      	adds	r0, #28
 800c0b4:	e772      	b.n	800bf9c <_dtoa_r+0x7f4>
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dc37      	bgt.n	800c12c <_dtoa_r+0x984>
 800c0bc:	9b06      	ldr	r3, [sp, #24]
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	dd34      	ble.n	800c12c <_dtoa_r+0x984>
 800c0c2:	9b03      	ldr	r3, [sp, #12]
 800c0c4:	9302      	str	r3, [sp, #8]
 800c0c6:	9b02      	ldr	r3, [sp, #8]
 800c0c8:	b96b      	cbnz	r3, 800c0e6 <_dtoa_r+0x93e>
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	2205      	movs	r2, #5
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f000 fbea 	bl	800c8a8 <__multadd>
 800c0d4:	4601      	mov	r1, r0
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	ee18 0a10 	vmov	r0, s16
 800c0dc:	f000 fe04 	bl	800cce8 <__mcmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	f73f adbb 	bgt.w	800bc5c <_dtoa_r+0x4b4>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e8:	9d01      	ldr	r5, [sp, #4]
 800c0ea:	43db      	mvns	r3, r3
 800c0ec:	9300      	str	r3, [sp, #0]
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f000 fbb5 	bl	800c864 <_Bfree>
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	f43f aea4 	beq.w	800be48 <_dtoa_r+0x6a0>
 800c100:	f1b8 0f00 	cmp.w	r8, #0
 800c104:	d005      	beq.n	800c112 <_dtoa_r+0x96a>
 800c106:	45b8      	cmp	r8, r7
 800c108:	d003      	beq.n	800c112 <_dtoa_r+0x96a>
 800c10a:	4641      	mov	r1, r8
 800c10c:	4620      	mov	r0, r4
 800c10e:	f000 fba9 	bl	800c864 <_Bfree>
 800c112:	4639      	mov	r1, r7
 800c114:	4620      	mov	r0, r4
 800c116:	f000 fba5 	bl	800c864 <_Bfree>
 800c11a:	e695      	b.n	800be48 <_dtoa_r+0x6a0>
 800c11c:	2600      	movs	r6, #0
 800c11e:	4637      	mov	r7, r6
 800c120:	e7e1      	b.n	800c0e6 <_dtoa_r+0x93e>
 800c122:	9700      	str	r7, [sp, #0]
 800c124:	4637      	mov	r7, r6
 800c126:	e599      	b.n	800bc5c <_dtoa_r+0x4b4>
 800c128:	40240000 	.word	0x40240000
 800c12c:	9b08      	ldr	r3, [sp, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 80ca 	beq.w	800c2c8 <_dtoa_r+0xb20>
 800c134:	9b03      	ldr	r3, [sp, #12]
 800c136:	9302      	str	r3, [sp, #8]
 800c138:	2d00      	cmp	r5, #0
 800c13a:	dd05      	ble.n	800c148 <_dtoa_r+0x9a0>
 800c13c:	4639      	mov	r1, r7
 800c13e:	462a      	mov	r2, r5
 800c140:	4620      	mov	r0, r4
 800c142:	f000 fd61 	bl	800cc08 <__lshift>
 800c146:	4607      	mov	r7, r0
 800c148:	f1b8 0f00 	cmp.w	r8, #0
 800c14c:	d05b      	beq.n	800c206 <_dtoa_r+0xa5e>
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	4620      	mov	r0, r4
 800c152:	f000 fb47 	bl	800c7e4 <_Balloc>
 800c156:	4605      	mov	r5, r0
 800c158:	b928      	cbnz	r0, 800c166 <_dtoa_r+0x9be>
 800c15a:	4b87      	ldr	r3, [pc, #540]	; (800c378 <_dtoa_r+0xbd0>)
 800c15c:	4602      	mov	r2, r0
 800c15e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c162:	f7ff bb3b 	b.w	800b7dc <_dtoa_r+0x34>
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	3202      	adds	r2, #2
 800c16a:	0092      	lsls	r2, r2, #2
 800c16c:	f107 010c 	add.w	r1, r7, #12
 800c170:	300c      	adds	r0, #12
 800c172:	f7fe fbaf 	bl	800a8d4 <memcpy>
 800c176:	2201      	movs	r2, #1
 800c178:	4629      	mov	r1, r5
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 fd44 	bl	800cc08 <__lshift>
 800c180:	9b01      	ldr	r3, [sp, #4]
 800c182:	f103 0901 	add.w	r9, r3, #1
 800c186:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c18a:	4413      	add	r3, r2
 800c18c:	9305      	str	r3, [sp, #20]
 800c18e:	f00a 0301 	and.w	r3, sl, #1
 800c192:	46b8      	mov	r8, r7
 800c194:	9304      	str	r3, [sp, #16]
 800c196:	4607      	mov	r7, r0
 800c198:	4631      	mov	r1, r6
 800c19a:	ee18 0a10 	vmov	r0, s16
 800c19e:	f7ff fa77 	bl	800b690 <quorem>
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	9002      	str	r0, [sp, #8]
 800c1a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1aa:	ee18 0a10 	vmov	r0, s16
 800c1ae:	f000 fd9b 	bl	800cce8 <__mcmp>
 800c1b2:	463a      	mov	r2, r7
 800c1b4:	9003      	str	r0, [sp, #12]
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f000 fdb1 	bl	800cd20 <__mdiff>
 800c1be:	68c2      	ldr	r2, [r0, #12]
 800c1c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	bb02      	cbnz	r2, 800c20a <_dtoa_r+0xa62>
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	ee18 0a10 	vmov	r0, s16
 800c1ce:	f000 fd8b 	bl	800cce8 <__mcmp>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	9207      	str	r2, [sp, #28]
 800c1da:	f000 fb43 	bl	800c864 <_Bfree>
 800c1de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c1e2:	ea43 0102 	orr.w	r1, r3, r2
 800c1e6:	9b04      	ldr	r3, [sp, #16]
 800c1e8:	430b      	orrs	r3, r1
 800c1ea:	464d      	mov	r5, r9
 800c1ec:	d10f      	bne.n	800c20e <_dtoa_r+0xa66>
 800c1ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1f2:	d02a      	beq.n	800c24a <_dtoa_r+0xaa2>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dd02      	ble.n	800c200 <_dtoa_r+0xa58>
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c200:	f88b a000 	strb.w	sl, [fp]
 800c204:	e775      	b.n	800c0f2 <_dtoa_r+0x94a>
 800c206:	4638      	mov	r0, r7
 800c208:	e7ba      	b.n	800c180 <_dtoa_r+0x9d8>
 800c20a:	2201      	movs	r2, #1
 800c20c:	e7e2      	b.n	800c1d4 <_dtoa_r+0xa2c>
 800c20e:	9b03      	ldr	r3, [sp, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	db04      	blt.n	800c21e <_dtoa_r+0xa76>
 800c214:	9906      	ldr	r1, [sp, #24]
 800c216:	430b      	orrs	r3, r1
 800c218:	9904      	ldr	r1, [sp, #16]
 800c21a:	430b      	orrs	r3, r1
 800c21c:	d122      	bne.n	800c264 <_dtoa_r+0xabc>
 800c21e:	2a00      	cmp	r2, #0
 800c220:	ddee      	ble.n	800c200 <_dtoa_r+0xa58>
 800c222:	ee18 1a10 	vmov	r1, s16
 800c226:	2201      	movs	r2, #1
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fced 	bl	800cc08 <__lshift>
 800c22e:	4631      	mov	r1, r6
 800c230:	ee08 0a10 	vmov	s16, r0
 800c234:	f000 fd58 	bl	800cce8 <__mcmp>
 800c238:	2800      	cmp	r0, #0
 800c23a:	dc03      	bgt.n	800c244 <_dtoa_r+0xa9c>
 800c23c:	d1e0      	bne.n	800c200 <_dtoa_r+0xa58>
 800c23e:	f01a 0f01 	tst.w	sl, #1
 800c242:	d0dd      	beq.n	800c200 <_dtoa_r+0xa58>
 800c244:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c248:	d1d7      	bne.n	800c1fa <_dtoa_r+0xa52>
 800c24a:	2339      	movs	r3, #57	; 0x39
 800c24c:	f88b 3000 	strb.w	r3, [fp]
 800c250:	462b      	mov	r3, r5
 800c252:	461d      	mov	r5, r3
 800c254:	3b01      	subs	r3, #1
 800c256:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c25a:	2a39      	cmp	r2, #57	; 0x39
 800c25c:	d071      	beq.n	800c342 <_dtoa_r+0xb9a>
 800c25e:	3201      	adds	r2, #1
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	e746      	b.n	800c0f2 <_dtoa_r+0x94a>
 800c264:	2a00      	cmp	r2, #0
 800c266:	dd07      	ble.n	800c278 <_dtoa_r+0xad0>
 800c268:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c26c:	d0ed      	beq.n	800c24a <_dtoa_r+0xaa2>
 800c26e:	f10a 0301 	add.w	r3, sl, #1
 800c272:	f88b 3000 	strb.w	r3, [fp]
 800c276:	e73c      	b.n	800c0f2 <_dtoa_r+0x94a>
 800c278:	9b05      	ldr	r3, [sp, #20]
 800c27a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c27e:	4599      	cmp	r9, r3
 800c280:	d047      	beq.n	800c312 <_dtoa_r+0xb6a>
 800c282:	ee18 1a10 	vmov	r1, s16
 800c286:	2300      	movs	r3, #0
 800c288:	220a      	movs	r2, #10
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 fb0c 	bl	800c8a8 <__multadd>
 800c290:	45b8      	cmp	r8, r7
 800c292:	ee08 0a10 	vmov	s16, r0
 800c296:	f04f 0300 	mov.w	r3, #0
 800c29a:	f04f 020a 	mov.w	r2, #10
 800c29e:	4641      	mov	r1, r8
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	d106      	bne.n	800c2b2 <_dtoa_r+0xb0a>
 800c2a4:	f000 fb00 	bl	800c8a8 <__multadd>
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	4607      	mov	r7, r0
 800c2ac:	f109 0901 	add.w	r9, r9, #1
 800c2b0:	e772      	b.n	800c198 <_dtoa_r+0x9f0>
 800c2b2:	f000 faf9 	bl	800c8a8 <__multadd>
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	4680      	mov	r8, r0
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	220a      	movs	r2, #10
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 faf2 	bl	800c8a8 <__multadd>
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	e7f1      	b.n	800c2ac <_dtoa_r+0xb04>
 800c2c8:	9b03      	ldr	r3, [sp, #12]
 800c2ca:	9302      	str	r3, [sp, #8]
 800c2cc:	9d01      	ldr	r5, [sp, #4]
 800c2ce:	ee18 0a10 	vmov	r0, s16
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	f7ff f9dc 	bl	800b690 <quorem>
 800c2d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	f805 ab01 	strb.w	sl, [r5], #1
 800c2e2:	1aea      	subs	r2, r5, r3
 800c2e4:	9b02      	ldr	r3, [sp, #8]
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	dd09      	ble.n	800c2fe <_dtoa_r+0xb56>
 800c2ea:	ee18 1a10 	vmov	r1, s16
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	220a      	movs	r2, #10
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 fad8 	bl	800c8a8 <__multadd>
 800c2f8:	ee08 0a10 	vmov	s16, r0
 800c2fc:	e7e7      	b.n	800c2ce <_dtoa_r+0xb26>
 800c2fe:	9b02      	ldr	r3, [sp, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	bfc8      	it	gt
 800c304:	461d      	movgt	r5, r3
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	bfd8      	it	le
 800c30a:	2501      	movle	r5, #1
 800c30c:	441d      	add	r5, r3
 800c30e:	f04f 0800 	mov.w	r8, #0
 800c312:	ee18 1a10 	vmov	r1, s16
 800c316:	2201      	movs	r2, #1
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 fc75 	bl	800cc08 <__lshift>
 800c31e:	4631      	mov	r1, r6
 800c320:	ee08 0a10 	vmov	s16, r0
 800c324:	f000 fce0 	bl	800cce8 <__mcmp>
 800c328:	2800      	cmp	r0, #0
 800c32a:	dc91      	bgt.n	800c250 <_dtoa_r+0xaa8>
 800c32c:	d102      	bne.n	800c334 <_dtoa_r+0xb8c>
 800c32e:	f01a 0f01 	tst.w	sl, #1
 800c332:	d18d      	bne.n	800c250 <_dtoa_r+0xaa8>
 800c334:	462b      	mov	r3, r5
 800c336:	461d      	mov	r5, r3
 800c338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c33c:	2a30      	cmp	r2, #48	; 0x30
 800c33e:	d0fa      	beq.n	800c336 <_dtoa_r+0xb8e>
 800c340:	e6d7      	b.n	800c0f2 <_dtoa_r+0x94a>
 800c342:	9a01      	ldr	r2, [sp, #4]
 800c344:	429a      	cmp	r2, r3
 800c346:	d184      	bne.n	800c252 <_dtoa_r+0xaaa>
 800c348:	9b00      	ldr	r3, [sp, #0]
 800c34a:	3301      	adds	r3, #1
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	2331      	movs	r3, #49	; 0x31
 800c350:	7013      	strb	r3, [r2, #0]
 800c352:	e6ce      	b.n	800c0f2 <_dtoa_r+0x94a>
 800c354:	4b09      	ldr	r3, [pc, #36]	; (800c37c <_dtoa_r+0xbd4>)
 800c356:	f7ff ba95 	b.w	800b884 <_dtoa_r+0xdc>
 800c35a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f47f aa6e 	bne.w	800b83e <_dtoa_r+0x96>
 800c362:	4b07      	ldr	r3, [pc, #28]	; (800c380 <_dtoa_r+0xbd8>)
 800c364:	f7ff ba8e 	b.w	800b884 <_dtoa_r+0xdc>
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	dcae      	bgt.n	800c2cc <_dtoa_r+0xb24>
 800c36e:	9b06      	ldr	r3, [sp, #24]
 800c370:	2b02      	cmp	r3, #2
 800c372:	f73f aea8 	bgt.w	800c0c6 <_dtoa_r+0x91e>
 800c376:	e7a9      	b.n	800c2cc <_dtoa_r+0xb24>
 800c378:	08015d53 	.word	0x08015d53
 800c37c:	08015cb0 	.word	0x08015cb0
 800c380:	08015cd4 	.word	0x08015cd4

0800c384 <__sflush_r>:
 800c384:	898a      	ldrh	r2, [r1, #12]
 800c386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38a:	4605      	mov	r5, r0
 800c38c:	0710      	lsls	r0, r2, #28
 800c38e:	460c      	mov	r4, r1
 800c390:	d458      	bmi.n	800c444 <__sflush_r+0xc0>
 800c392:	684b      	ldr	r3, [r1, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	dc05      	bgt.n	800c3a4 <__sflush_r+0x20>
 800c398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dc02      	bgt.n	800c3a4 <__sflush_r+0x20>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	d0f9      	beq.n	800c39e <__sflush_r+0x1a>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3b0:	682f      	ldr	r7, [r5, #0]
 800c3b2:	602b      	str	r3, [r5, #0]
 800c3b4:	d032      	beq.n	800c41c <__sflush_r+0x98>
 800c3b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	075a      	lsls	r2, r3, #29
 800c3bc:	d505      	bpl.n	800c3ca <__sflush_r+0x46>
 800c3be:	6863      	ldr	r3, [r4, #4]
 800c3c0:	1ac0      	subs	r0, r0, r3
 800c3c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3c4:	b10b      	cbz	r3, 800c3ca <__sflush_r+0x46>
 800c3c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3c8:	1ac0      	subs	r0, r0, r3
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3d0:	6a21      	ldr	r1, [r4, #32]
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	47b0      	blx	r6
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	d106      	bne.n	800c3ea <__sflush_r+0x66>
 800c3dc:	6829      	ldr	r1, [r5, #0]
 800c3de:	291d      	cmp	r1, #29
 800c3e0:	d82c      	bhi.n	800c43c <__sflush_r+0xb8>
 800c3e2:	4a2a      	ldr	r2, [pc, #168]	; (800c48c <__sflush_r+0x108>)
 800c3e4:	40ca      	lsrs	r2, r1
 800c3e6:	07d6      	lsls	r6, r2, #31
 800c3e8:	d528      	bpl.n	800c43c <__sflush_r+0xb8>
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	6062      	str	r2, [r4, #4]
 800c3ee:	04d9      	lsls	r1, r3, #19
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	6022      	str	r2, [r4, #0]
 800c3f4:	d504      	bpl.n	800c400 <__sflush_r+0x7c>
 800c3f6:	1c42      	adds	r2, r0, #1
 800c3f8:	d101      	bne.n	800c3fe <__sflush_r+0x7a>
 800c3fa:	682b      	ldr	r3, [r5, #0]
 800c3fc:	b903      	cbnz	r3, 800c400 <__sflush_r+0x7c>
 800c3fe:	6560      	str	r0, [r4, #84]	; 0x54
 800c400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c402:	602f      	str	r7, [r5, #0]
 800c404:	2900      	cmp	r1, #0
 800c406:	d0ca      	beq.n	800c39e <__sflush_r+0x1a>
 800c408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c40c:	4299      	cmp	r1, r3
 800c40e:	d002      	beq.n	800c416 <__sflush_r+0x92>
 800c410:	4628      	mov	r0, r5
 800c412:	f7fe fa75 	bl	800a900 <_free_r>
 800c416:	2000      	movs	r0, #0
 800c418:	6360      	str	r0, [r4, #52]	; 0x34
 800c41a:	e7c1      	b.n	800c3a0 <__sflush_r+0x1c>
 800c41c:	6a21      	ldr	r1, [r4, #32]
 800c41e:	2301      	movs	r3, #1
 800c420:	4628      	mov	r0, r5
 800c422:	47b0      	blx	r6
 800c424:	1c41      	adds	r1, r0, #1
 800c426:	d1c7      	bne.n	800c3b8 <__sflush_r+0x34>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0c4      	beq.n	800c3b8 <__sflush_r+0x34>
 800c42e:	2b1d      	cmp	r3, #29
 800c430:	d001      	beq.n	800c436 <__sflush_r+0xb2>
 800c432:	2b16      	cmp	r3, #22
 800c434:	d101      	bne.n	800c43a <__sflush_r+0xb6>
 800c436:	602f      	str	r7, [r5, #0]
 800c438:	e7b1      	b.n	800c39e <__sflush_r+0x1a>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c440:	81a3      	strh	r3, [r4, #12]
 800c442:	e7ad      	b.n	800c3a0 <__sflush_r+0x1c>
 800c444:	690f      	ldr	r7, [r1, #16]
 800c446:	2f00      	cmp	r7, #0
 800c448:	d0a9      	beq.n	800c39e <__sflush_r+0x1a>
 800c44a:	0793      	lsls	r3, r2, #30
 800c44c:	680e      	ldr	r6, [r1, #0]
 800c44e:	bf08      	it	eq
 800c450:	694b      	ldreq	r3, [r1, #20]
 800c452:	600f      	str	r7, [r1, #0]
 800c454:	bf18      	it	ne
 800c456:	2300      	movne	r3, #0
 800c458:	eba6 0807 	sub.w	r8, r6, r7
 800c45c:	608b      	str	r3, [r1, #8]
 800c45e:	f1b8 0f00 	cmp.w	r8, #0
 800c462:	dd9c      	ble.n	800c39e <__sflush_r+0x1a>
 800c464:	6a21      	ldr	r1, [r4, #32]
 800c466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c468:	4643      	mov	r3, r8
 800c46a:	463a      	mov	r2, r7
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b0      	blx	r6
 800c470:	2800      	cmp	r0, #0
 800c472:	dc06      	bgt.n	800c482 <__sflush_r+0xfe>
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47a:	81a3      	strh	r3, [r4, #12]
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	e78e      	b.n	800c3a0 <__sflush_r+0x1c>
 800c482:	4407      	add	r7, r0
 800c484:	eba8 0800 	sub.w	r8, r8, r0
 800c488:	e7e9      	b.n	800c45e <__sflush_r+0xda>
 800c48a:	bf00      	nop
 800c48c:	20400001 	.word	0x20400001

0800c490 <_fflush_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	690b      	ldr	r3, [r1, #16]
 800c494:	4605      	mov	r5, r0
 800c496:	460c      	mov	r4, r1
 800c498:	b913      	cbnz	r3, 800c4a0 <_fflush_r+0x10>
 800c49a:	2500      	movs	r5, #0
 800c49c:	4628      	mov	r0, r5
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	b118      	cbz	r0, 800c4aa <_fflush_r+0x1a>
 800c4a2:	6983      	ldr	r3, [r0, #24]
 800c4a4:	b90b      	cbnz	r3, 800c4aa <_fflush_r+0x1a>
 800c4a6:	f000 f887 	bl	800c5b8 <__sinit>
 800c4aa:	4b14      	ldr	r3, [pc, #80]	; (800c4fc <_fflush_r+0x6c>)
 800c4ac:	429c      	cmp	r4, r3
 800c4ae:	d11b      	bne.n	800c4e8 <_fflush_r+0x58>
 800c4b0:	686c      	ldr	r4, [r5, #4]
 800c4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0ef      	beq.n	800c49a <_fflush_r+0xa>
 800c4ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4bc:	07d0      	lsls	r0, r2, #31
 800c4be:	d404      	bmi.n	800c4ca <_fflush_r+0x3a>
 800c4c0:	0599      	lsls	r1, r3, #22
 800c4c2:	d402      	bmi.n	800c4ca <_fflush_r+0x3a>
 800c4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4c6:	f000 f91a 	bl	800c6fe <__retarget_lock_acquire_recursive>
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	4621      	mov	r1, r4
 800c4ce:	f7ff ff59 	bl	800c384 <__sflush_r>
 800c4d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4d4:	07da      	lsls	r2, r3, #31
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	d4e0      	bmi.n	800c49c <_fflush_r+0xc>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	059b      	lsls	r3, r3, #22
 800c4de:	d4dd      	bmi.n	800c49c <_fflush_r+0xc>
 800c4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4e2:	f000 f90d 	bl	800c700 <__retarget_lock_release_recursive>
 800c4e6:	e7d9      	b.n	800c49c <_fflush_r+0xc>
 800c4e8:	4b05      	ldr	r3, [pc, #20]	; (800c500 <_fflush_r+0x70>)
 800c4ea:	429c      	cmp	r4, r3
 800c4ec:	d101      	bne.n	800c4f2 <_fflush_r+0x62>
 800c4ee:	68ac      	ldr	r4, [r5, #8]
 800c4f0:	e7df      	b.n	800c4b2 <_fflush_r+0x22>
 800c4f2:	4b04      	ldr	r3, [pc, #16]	; (800c504 <_fflush_r+0x74>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	bf08      	it	eq
 800c4f8:	68ec      	ldreq	r4, [r5, #12]
 800c4fa:	e7da      	b.n	800c4b2 <_fflush_r+0x22>
 800c4fc:	08015d84 	.word	0x08015d84
 800c500:	08015da4 	.word	0x08015da4
 800c504:	08015d64 	.word	0x08015d64

0800c508 <std>:
 800c508:	2300      	movs	r3, #0
 800c50a:	b510      	push	{r4, lr}
 800c50c:	4604      	mov	r4, r0
 800c50e:	e9c0 3300 	strd	r3, r3, [r0]
 800c512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c516:	6083      	str	r3, [r0, #8]
 800c518:	8181      	strh	r1, [r0, #12]
 800c51a:	6643      	str	r3, [r0, #100]	; 0x64
 800c51c:	81c2      	strh	r2, [r0, #14]
 800c51e:	6183      	str	r3, [r0, #24]
 800c520:	4619      	mov	r1, r3
 800c522:	2208      	movs	r2, #8
 800c524:	305c      	adds	r0, #92	; 0x5c
 800c526:	f7fe f9e3 	bl	800a8f0 <memset>
 800c52a:	4b05      	ldr	r3, [pc, #20]	; (800c540 <std+0x38>)
 800c52c:	6263      	str	r3, [r4, #36]	; 0x24
 800c52e:	4b05      	ldr	r3, [pc, #20]	; (800c544 <std+0x3c>)
 800c530:	62a3      	str	r3, [r4, #40]	; 0x28
 800c532:	4b05      	ldr	r3, [pc, #20]	; (800c548 <std+0x40>)
 800c534:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c536:	4b05      	ldr	r3, [pc, #20]	; (800c54c <std+0x44>)
 800c538:	6224      	str	r4, [r4, #32]
 800c53a:	6323      	str	r3, [r4, #48]	; 0x30
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	bf00      	nop
 800c540:	0800d4e1 	.word	0x0800d4e1
 800c544:	0800d503 	.word	0x0800d503
 800c548:	0800d53b 	.word	0x0800d53b
 800c54c:	0800d55f 	.word	0x0800d55f

0800c550 <_cleanup_r>:
 800c550:	4901      	ldr	r1, [pc, #4]	; (800c558 <_cleanup_r+0x8>)
 800c552:	f000 b8af 	b.w	800c6b4 <_fwalk_reent>
 800c556:	bf00      	nop
 800c558:	0800c491 	.word	0x0800c491

0800c55c <__sfmoreglue>:
 800c55c:	b570      	push	{r4, r5, r6, lr}
 800c55e:	2268      	movs	r2, #104	; 0x68
 800c560:	1e4d      	subs	r5, r1, #1
 800c562:	4355      	muls	r5, r2
 800c564:	460e      	mov	r6, r1
 800c566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c56a:	f7fe fa35 	bl	800a9d8 <_malloc_r>
 800c56e:	4604      	mov	r4, r0
 800c570:	b140      	cbz	r0, 800c584 <__sfmoreglue+0x28>
 800c572:	2100      	movs	r1, #0
 800c574:	e9c0 1600 	strd	r1, r6, [r0]
 800c578:	300c      	adds	r0, #12
 800c57a:	60a0      	str	r0, [r4, #8]
 800c57c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c580:	f7fe f9b6 	bl	800a8f0 <memset>
 800c584:	4620      	mov	r0, r4
 800c586:	bd70      	pop	{r4, r5, r6, pc}

0800c588 <__sfp_lock_acquire>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__sfp_lock_acquire+0x8>)
 800c58a:	f000 b8b8 	b.w	800c6fe <__retarget_lock_acquire_recursive>
 800c58e:	bf00      	nop
 800c590:	2000a611 	.word	0x2000a611

0800c594 <__sfp_lock_release>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__sfp_lock_release+0x8>)
 800c596:	f000 b8b3 	b.w	800c700 <__retarget_lock_release_recursive>
 800c59a:	bf00      	nop
 800c59c:	2000a611 	.word	0x2000a611

0800c5a0 <__sinit_lock_acquire>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__sinit_lock_acquire+0x8>)
 800c5a2:	f000 b8ac 	b.w	800c6fe <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	2000a612 	.word	0x2000a612

0800c5ac <__sinit_lock_release>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__sinit_lock_release+0x8>)
 800c5ae:	f000 b8a7 	b.w	800c700 <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	2000a612 	.word	0x2000a612

0800c5b8 <__sinit>:
 800c5b8:	b510      	push	{r4, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	f7ff fff0 	bl	800c5a0 <__sinit_lock_acquire>
 800c5c0:	69a3      	ldr	r3, [r4, #24]
 800c5c2:	b11b      	cbz	r3, 800c5cc <__sinit+0x14>
 800c5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5c8:	f7ff bff0 	b.w	800c5ac <__sinit_lock_release>
 800c5cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c5d0:	6523      	str	r3, [r4, #80]	; 0x50
 800c5d2:	4b13      	ldr	r3, [pc, #76]	; (800c620 <__sinit+0x68>)
 800c5d4:	4a13      	ldr	r2, [pc, #76]	; (800c624 <__sinit+0x6c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c5da:	42a3      	cmp	r3, r4
 800c5dc:	bf04      	itt	eq
 800c5de:	2301      	moveq	r3, #1
 800c5e0:	61a3      	streq	r3, [r4, #24]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 f820 	bl	800c628 <__sfp>
 800c5e8:	6060      	str	r0, [r4, #4]
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 f81c 	bl	800c628 <__sfp>
 800c5f0:	60a0      	str	r0, [r4, #8]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 f818 	bl	800c628 <__sfp>
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	60e0      	str	r0, [r4, #12]
 800c5fc:	2104      	movs	r1, #4
 800c5fe:	6860      	ldr	r0, [r4, #4]
 800c600:	f7ff ff82 	bl	800c508 <std>
 800c604:	68a0      	ldr	r0, [r4, #8]
 800c606:	2201      	movs	r2, #1
 800c608:	2109      	movs	r1, #9
 800c60a:	f7ff ff7d 	bl	800c508 <std>
 800c60e:	68e0      	ldr	r0, [r4, #12]
 800c610:	2202      	movs	r2, #2
 800c612:	2112      	movs	r1, #18
 800c614:	f7ff ff78 	bl	800c508 <std>
 800c618:	2301      	movs	r3, #1
 800c61a:	61a3      	str	r3, [r4, #24]
 800c61c:	e7d2      	b.n	800c5c4 <__sinit+0xc>
 800c61e:	bf00      	nop
 800c620:	08015c9c 	.word	0x08015c9c
 800c624:	0800c551 	.word	0x0800c551

0800c628 <__sfp>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	4607      	mov	r7, r0
 800c62c:	f7ff ffac 	bl	800c588 <__sfp_lock_acquire>
 800c630:	4b1e      	ldr	r3, [pc, #120]	; (800c6ac <__sfp+0x84>)
 800c632:	681e      	ldr	r6, [r3, #0]
 800c634:	69b3      	ldr	r3, [r6, #24]
 800c636:	b913      	cbnz	r3, 800c63e <__sfp+0x16>
 800c638:	4630      	mov	r0, r6
 800c63a:	f7ff ffbd 	bl	800c5b8 <__sinit>
 800c63e:	3648      	adds	r6, #72	; 0x48
 800c640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c644:	3b01      	subs	r3, #1
 800c646:	d503      	bpl.n	800c650 <__sfp+0x28>
 800c648:	6833      	ldr	r3, [r6, #0]
 800c64a:	b30b      	cbz	r3, 800c690 <__sfp+0x68>
 800c64c:	6836      	ldr	r6, [r6, #0]
 800c64e:	e7f7      	b.n	800c640 <__sfp+0x18>
 800c650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c654:	b9d5      	cbnz	r5, 800c68c <__sfp+0x64>
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <__sfp+0x88>)
 800c658:	60e3      	str	r3, [r4, #12]
 800c65a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c65e:	6665      	str	r5, [r4, #100]	; 0x64
 800c660:	f000 f84c 	bl	800c6fc <__retarget_lock_init_recursive>
 800c664:	f7ff ff96 	bl	800c594 <__sfp_lock_release>
 800c668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c66c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c670:	6025      	str	r5, [r4, #0]
 800c672:	61a5      	str	r5, [r4, #24]
 800c674:	2208      	movs	r2, #8
 800c676:	4629      	mov	r1, r5
 800c678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c67c:	f7fe f938 	bl	800a8f0 <memset>
 800c680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c688:	4620      	mov	r0, r4
 800c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68c:	3468      	adds	r4, #104	; 0x68
 800c68e:	e7d9      	b.n	800c644 <__sfp+0x1c>
 800c690:	2104      	movs	r1, #4
 800c692:	4638      	mov	r0, r7
 800c694:	f7ff ff62 	bl	800c55c <__sfmoreglue>
 800c698:	4604      	mov	r4, r0
 800c69a:	6030      	str	r0, [r6, #0]
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d1d5      	bne.n	800c64c <__sfp+0x24>
 800c6a0:	f7ff ff78 	bl	800c594 <__sfp_lock_release>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	e7ee      	b.n	800c688 <__sfp+0x60>
 800c6aa:	bf00      	nop
 800c6ac:	08015c9c 	.word	0x08015c9c
 800c6b0:	ffff0001 	.word	0xffff0001

0800c6b4 <_fwalk_reent>:
 800c6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	4688      	mov	r8, r1
 800c6bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c6c0:	2700      	movs	r7, #0
 800c6c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6c6:	f1b9 0901 	subs.w	r9, r9, #1
 800c6ca:	d505      	bpl.n	800c6d8 <_fwalk_reent+0x24>
 800c6cc:	6824      	ldr	r4, [r4, #0]
 800c6ce:	2c00      	cmp	r4, #0
 800c6d0:	d1f7      	bne.n	800c6c2 <_fwalk_reent+0xe>
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d8:	89ab      	ldrh	r3, [r5, #12]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d907      	bls.n	800c6ee <_fwalk_reent+0x3a>
 800c6de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	d003      	beq.n	800c6ee <_fwalk_reent+0x3a>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	47c0      	blx	r8
 800c6ec:	4307      	orrs	r7, r0
 800c6ee:	3568      	adds	r5, #104	; 0x68
 800c6f0:	e7e9      	b.n	800c6c6 <_fwalk_reent+0x12>
	...

0800c6f4 <_localeconv_r>:
 800c6f4:	4800      	ldr	r0, [pc, #0]	; (800c6f8 <_localeconv_r+0x4>)
 800c6f6:	4770      	bx	lr
 800c6f8:	200007f0 	.word	0x200007f0

0800c6fc <__retarget_lock_init_recursive>:
 800c6fc:	4770      	bx	lr

0800c6fe <__retarget_lock_acquire_recursive>:
 800c6fe:	4770      	bx	lr

0800c700 <__retarget_lock_release_recursive>:
 800c700:	4770      	bx	lr

0800c702 <__swhatbuf_r>:
 800c702:	b570      	push	{r4, r5, r6, lr}
 800c704:	460e      	mov	r6, r1
 800c706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70a:	2900      	cmp	r1, #0
 800c70c:	b096      	sub	sp, #88	; 0x58
 800c70e:	4614      	mov	r4, r2
 800c710:	461d      	mov	r5, r3
 800c712:	da08      	bge.n	800c726 <__swhatbuf_r+0x24>
 800c714:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c718:	2200      	movs	r2, #0
 800c71a:	602a      	str	r2, [r5, #0]
 800c71c:	061a      	lsls	r2, r3, #24
 800c71e:	d410      	bmi.n	800c742 <__swhatbuf_r+0x40>
 800c720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c724:	e00e      	b.n	800c744 <__swhatbuf_r+0x42>
 800c726:	466a      	mov	r2, sp
 800c728:	f000 ff70 	bl	800d60c <_fstat_r>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	dbf1      	blt.n	800c714 <__swhatbuf_r+0x12>
 800c730:	9a01      	ldr	r2, [sp, #4]
 800c732:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c736:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c73a:	425a      	negs	r2, r3
 800c73c:	415a      	adcs	r2, r3
 800c73e:	602a      	str	r2, [r5, #0]
 800c740:	e7ee      	b.n	800c720 <__swhatbuf_r+0x1e>
 800c742:	2340      	movs	r3, #64	; 0x40
 800c744:	2000      	movs	r0, #0
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	b016      	add	sp, #88	; 0x58
 800c74a:	bd70      	pop	{r4, r5, r6, pc}

0800c74c <__smakebuf_r>:
 800c74c:	898b      	ldrh	r3, [r1, #12]
 800c74e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c750:	079d      	lsls	r5, r3, #30
 800c752:	4606      	mov	r6, r0
 800c754:	460c      	mov	r4, r1
 800c756:	d507      	bpl.n	800c768 <__smakebuf_r+0x1c>
 800c758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	6123      	str	r3, [r4, #16]
 800c760:	2301      	movs	r3, #1
 800c762:	6163      	str	r3, [r4, #20]
 800c764:	b002      	add	sp, #8
 800c766:	bd70      	pop	{r4, r5, r6, pc}
 800c768:	ab01      	add	r3, sp, #4
 800c76a:	466a      	mov	r2, sp
 800c76c:	f7ff ffc9 	bl	800c702 <__swhatbuf_r>
 800c770:	9900      	ldr	r1, [sp, #0]
 800c772:	4605      	mov	r5, r0
 800c774:	4630      	mov	r0, r6
 800c776:	f7fe f92f 	bl	800a9d8 <_malloc_r>
 800c77a:	b948      	cbnz	r0, 800c790 <__smakebuf_r+0x44>
 800c77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c780:	059a      	lsls	r2, r3, #22
 800c782:	d4ef      	bmi.n	800c764 <__smakebuf_r+0x18>
 800c784:	f023 0303 	bic.w	r3, r3, #3
 800c788:	f043 0302 	orr.w	r3, r3, #2
 800c78c:	81a3      	strh	r3, [r4, #12]
 800c78e:	e7e3      	b.n	800c758 <__smakebuf_r+0xc>
 800c790:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <__smakebuf_r+0x7c>)
 800c792:	62b3      	str	r3, [r6, #40]	; 0x28
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	6020      	str	r0, [r4, #0]
 800c798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c79c:	81a3      	strh	r3, [r4, #12]
 800c79e:	9b00      	ldr	r3, [sp, #0]
 800c7a0:	6163      	str	r3, [r4, #20]
 800c7a2:	9b01      	ldr	r3, [sp, #4]
 800c7a4:	6120      	str	r0, [r4, #16]
 800c7a6:	b15b      	cbz	r3, 800c7c0 <__smakebuf_r+0x74>
 800c7a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f000 ff3f 	bl	800d630 <_isatty_r>
 800c7b2:	b128      	cbz	r0, 800c7c0 <__smakebuf_r+0x74>
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	f023 0303 	bic.w	r3, r3, #3
 800c7ba:	f043 0301 	orr.w	r3, r3, #1
 800c7be:	81a3      	strh	r3, [r4, #12]
 800c7c0:	89a0      	ldrh	r0, [r4, #12]
 800c7c2:	4305      	orrs	r5, r0
 800c7c4:	81a5      	strh	r5, [r4, #12]
 800c7c6:	e7cd      	b.n	800c764 <__smakebuf_r+0x18>
 800c7c8:	0800c551 	.word	0x0800c551

0800c7cc <__malloc_lock>:
 800c7cc:	4801      	ldr	r0, [pc, #4]	; (800c7d4 <__malloc_lock+0x8>)
 800c7ce:	f7ff bf96 	b.w	800c6fe <__retarget_lock_acquire_recursive>
 800c7d2:	bf00      	nop
 800c7d4:	2000a610 	.word	0x2000a610

0800c7d8 <__malloc_unlock>:
 800c7d8:	4801      	ldr	r0, [pc, #4]	; (800c7e0 <__malloc_unlock+0x8>)
 800c7da:	f7ff bf91 	b.w	800c700 <__retarget_lock_release_recursive>
 800c7de:	bf00      	nop
 800c7e0:	2000a610 	.word	0x2000a610

0800c7e4 <_Balloc>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	460d      	mov	r5, r1
 800c7ec:	b976      	cbnz	r6, 800c80c <_Balloc+0x28>
 800c7ee:	2010      	movs	r0, #16
 800c7f0:	f7fe f868 	bl	800a8c4 <malloc>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	6260      	str	r0, [r4, #36]	; 0x24
 800c7f8:	b920      	cbnz	r0, 800c804 <_Balloc+0x20>
 800c7fa:	4b18      	ldr	r3, [pc, #96]	; (800c85c <_Balloc+0x78>)
 800c7fc:	4818      	ldr	r0, [pc, #96]	; (800c860 <_Balloc+0x7c>)
 800c7fe:	2166      	movs	r1, #102	; 0x66
 800c800:	f000 fec4 	bl	800d58c <__assert_func>
 800c804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c808:	6006      	str	r6, [r0, #0]
 800c80a:	60c6      	str	r6, [r0, #12]
 800c80c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c80e:	68f3      	ldr	r3, [r6, #12]
 800c810:	b183      	cbz	r3, 800c834 <_Balloc+0x50>
 800c812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c81a:	b9b8      	cbnz	r0, 800c84c <_Balloc+0x68>
 800c81c:	2101      	movs	r1, #1
 800c81e:	fa01 f605 	lsl.w	r6, r1, r5
 800c822:	1d72      	adds	r2, r6, #5
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	4620      	mov	r0, r4
 800c828:	f000 fb60 	bl	800ceec <_calloc_r>
 800c82c:	b160      	cbz	r0, 800c848 <_Balloc+0x64>
 800c82e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c832:	e00e      	b.n	800c852 <_Balloc+0x6e>
 800c834:	2221      	movs	r2, #33	; 0x21
 800c836:	2104      	movs	r1, #4
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fb57 	bl	800ceec <_calloc_r>
 800c83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c840:	60f0      	str	r0, [r6, #12]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1e4      	bne.n	800c812 <_Balloc+0x2e>
 800c848:	2000      	movs	r0, #0
 800c84a:	bd70      	pop	{r4, r5, r6, pc}
 800c84c:	6802      	ldr	r2, [r0, #0]
 800c84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c852:	2300      	movs	r3, #0
 800c854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c858:	e7f7      	b.n	800c84a <_Balloc+0x66>
 800c85a:	bf00      	nop
 800c85c:	08015ce1 	.word	0x08015ce1
 800c860:	08015dc4 	.word	0x08015dc4

0800c864 <_Bfree>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c868:	4605      	mov	r5, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	b976      	cbnz	r6, 800c88c <_Bfree+0x28>
 800c86e:	2010      	movs	r0, #16
 800c870:	f7fe f828 	bl	800a8c4 <malloc>
 800c874:	4602      	mov	r2, r0
 800c876:	6268      	str	r0, [r5, #36]	; 0x24
 800c878:	b920      	cbnz	r0, 800c884 <_Bfree+0x20>
 800c87a:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <_Bfree+0x3c>)
 800c87c:	4809      	ldr	r0, [pc, #36]	; (800c8a4 <_Bfree+0x40>)
 800c87e:	218a      	movs	r1, #138	; 0x8a
 800c880:	f000 fe84 	bl	800d58c <__assert_func>
 800c884:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c888:	6006      	str	r6, [r0, #0]
 800c88a:	60c6      	str	r6, [r0, #12]
 800c88c:	b13c      	cbz	r4, 800c89e <_Bfree+0x3a>
 800c88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c890:	6862      	ldr	r2, [r4, #4]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c898:	6021      	str	r1, [r4, #0]
 800c89a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c89e:	bd70      	pop	{r4, r5, r6, pc}
 800c8a0:	08015ce1 	.word	0x08015ce1
 800c8a4:	08015dc4 	.word	0x08015dc4

0800c8a8 <__multadd>:
 800c8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ac:	690d      	ldr	r5, [r1, #16]
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	461e      	mov	r6, r3
 800c8b4:	f101 0c14 	add.w	ip, r1, #20
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	f8dc 3000 	ldr.w	r3, [ip]
 800c8be:	b299      	uxth	r1, r3
 800c8c0:	fb02 6101 	mla	r1, r2, r1, r6
 800c8c4:	0c1e      	lsrs	r6, r3, #16
 800c8c6:	0c0b      	lsrs	r3, r1, #16
 800c8c8:	fb02 3306 	mla	r3, r2, r6, r3
 800c8cc:	b289      	uxth	r1, r1
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8d4:	4285      	cmp	r5, r0
 800c8d6:	f84c 1b04 	str.w	r1, [ip], #4
 800c8da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8de:	dcec      	bgt.n	800c8ba <__multadd+0x12>
 800c8e0:	b30e      	cbz	r6, 800c926 <__multadd+0x7e>
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	42ab      	cmp	r3, r5
 800c8e6:	dc19      	bgt.n	800c91c <__multadd+0x74>
 800c8e8:	6861      	ldr	r1, [r4, #4]
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	3101      	adds	r1, #1
 800c8ee:	f7ff ff79 	bl	800c7e4 <_Balloc>
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <__multadd+0x5a>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <__multadd+0x84>)
 800c8fa:	480d      	ldr	r0, [pc, #52]	; (800c930 <__multadd+0x88>)
 800c8fc:	21b5      	movs	r1, #181	; 0xb5
 800c8fe:	f000 fe45 	bl	800d58c <__assert_func>
 800c902:	6922      	ldr	r2, [r4, #16]
 800c904:	3202      	adds	r2, #2
 800c906:	f104 010c 	add.w	r1, r4, #12
 800c90a:	0092      	lsls	r2, r2, #2
 800c90c:	300c      	adds	r0, #12
 800c90e:	f7fd ffe1 	bl	800a8d4 <memcpy>
 800c912:	4621      	mov	r1, r4
 800c914:	4638      	mov	r0, r7
 800c916:	f7ff ffa5 	bl	800c864 <_Bfree>
 800c91a:	4644      	mov	r4, r8
 800c91c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c920:	3501      	adds	r5, #1
 800c922:	615e      	str	r6, [r3, #20]
 800c924:	6125      	str	r5, [r4, #16]
 800c926:	4620      	mov	r0, r4
 800c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c92c:	08015d53 	.word	0x08015d53
 800c930:	08015dc4 	.word	0x08015dc4

0800c934 <__hi0bits>:
 800c934:	0c03      	lsrs	r3, r0, #16
 800c936:	041b      	lsls	r3, r3, #16
 800c938:	b9d3      	cbnz	r3, 800c970 <__hi0bits+0x3c>
 800c93a:	0400      	lsls	r0, r0, #16
 800c93c:	2310      	movs	r3, #16
 800c93e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c942:	bf04      	itt	eq
 800c944:	0200      	lsleq	r0, r0, #8
 800c946:	3308      	addeq	r3, #8
 800c948:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c94c:	bf04      	itt	eq
 800c94e:	0100      	lsleq	r0, r0, #4
 800c950:	3304      	addeq	r3, #4
 800c952:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c956:	bf04      	itt	eq
 800c958:	0080      	lsleq	r0, r0, #2
 800c95a:	3302      	addeq	r3, #2
 800c95c:	2800      	cmp	r0, #0
 800c95e:	db05      	blt.n	800c96c <__hi0bits+0x38>
 800c960:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c964:	f103 0301 	add.w	r3, r3, #1
 800c968:	bf08      	it	eq
 800c96a:	2320      	moveq	r3, #32
 800c96c:	4618      	mov	r0, r3
 800c96e:	4770      	bx	lr
 800c970:	2300      	movs	r3, #0
 800c972:	e7e4      	b.n	800c93e <__hi0bits+0xa>

0800c974 <__lo0bits>:
 800c974:	6803      	ldr	r3, [r0, #0]
 800c976:	f013 0207 	ands.w	r2, r3, #7
 800c97a:	4601      	mov	r1, r0
 800c97c:	d00b      	beq.n	800c996 <__lo0bits+0x22>
 800c97e:	07da      	lsls	r2, r3, #31
 800c980:	d423      	bmi.n	800c9ca <__lo0bits+0x56>
 800c982:	0798      	lsls	r0, r3, #30
 800c984:	bf49      	itett	mi
 800c986:	085b      	lsrmi	r3, r3, #1
 800c988:	089b      	lsrpl	r3, r3, #2
 800c98a:	2001      	movmi	r0, #1
 800c98c:	600b      	strmi	r3, [r1, #0]
 800c98e:	bf5c      	itt	pl
 800c990:	600b      	strpl	r3, [r1, #0]
 800c992:	2002      	movpl	r0, #2
 800c994:	4770      	bx	lr
 800c996:	b298      	uxth	r0, r3
 800c998:	b9a8      	cbnz	r0, 800c9c6 <__lo0bits+0x52>
 800c99a:	0c1b      	lsrs	r3, r3, #16
 800c99c:	2010      	movs	r0, #16
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	b90a      	cbnz	r2, 800c9a6 <__lo0bits+0x32>
 800c9a2:	3008      	adds	r0, #8
 800c9a4:	0a1b      	lsrs	r3, r3, #8
 800c9a6:	071a      	lsls	r2, r3, #28
 800c9a8:	bf04      	itt	eq
 800c9aa:	091b      	lsreq	r3, r3, #4
 800c9ac:	3004      	addeq	r0, #4
 800c9ae:	079a      	lsls	r2, r3, #30
 800c9b0:	bf04      	itt	eq
 800c9b2:	089b      	lsreq	r3, r3, #2
 800c9b4:	3002      	addeq	r0, #2
 800c9b6:	07da      	lsls	r2, r3, #31
 800c9b8:	d403      	bmi.n	800c9c2 <__lo0bits+0x4e>
 800c9ba:	085b      	lsrs	r3, r3, #1
 800c9bc:	f100 0001 	add.w	r0, r0, #1
 800c9c0:	d005      	beq.n	800c9ce <__lo0bits+0x5a>
 800c9c2:	600b      	str	r3, [r1, #0]
 800c9c4:	4770      	bx	lr
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	e7e9      	b.n	800c99e <__lo0bits+0x2a>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	4770      	bx	lr
 800c9ce:	2020      	movs	r0, #32
 800c9d0:	4770      	bx	lr
	...

0800c9d4 <__i2b>:
 800c9d4:	b510      	push	{r4, lr}
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	2101      	movs	r1, #1
 800c9da:	f7ff ff03 	bl	800c7e4 <_Balloc>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	b928      	cbnz	r0, 800c9ee <__i2b+0x1a>
 800c9e2:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <__i2b+0x24>)
 800c9e4:	4805      	ldr	r0, [pc, #20]	; (800c9fc <__i2b+0x28>)
 800c9e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c9ea:	f000 fdcf 	bl	800d58c <__assert_func>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	6144      	str	r4, [r0, #20]
 800c9f2:	6103      	str	r3, [r0, #16]
 800c9f4:	bd10      	pop	{r4, pc}
 800c9f6:	bf00      	nop
 800c9f8:	08015d53 	.word	0x08015d53
 800c9fc:	08015dc4 	.word	0x08015dc4

0800ca00 <__multiply>:
 800ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca04:	4691      	mov	r9, r2
 800ca06:	690a      	ldr	r2, [r1, #16]
 800ca08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	bfb8      	it	lt
 800ca10:	460b      	movlt	r3, r1
 800ca12:	460c      	mov	r4, r1
 800ca14:	bfbc      	itt	lt
 800ca16:	464c      	movlt	r4, r9
 800ca18:	4699      	movlt	r9, r3
 800ca1a:	6927      	ldr	r7, [r4, #16]
 800ca1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca20:	68a3      	ldr	r3, [r4, #8]
 800ca22:	6861      	ldr	r1, [r4, #4]
 800ca24:	eb07 060a 	add.w	r6, r7, sl
 800ca28:	42b3      	cmp	r3, r6
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	bfb8      	it	lt
 800ca2e:	3101      	addlt	r1, #1
 800ca30:	f7ff fed8 	bl	800c7e4 <_Balloc>
 800ca34:	b930      	cbnz	r0, 800ca44 <__multiply+0x44>
 800ca36:	4602      	mov	r2, r0
 800ca38:	4b44      	ldr	r3, [pc, #272]	; (800cb4c <__multiply+0x14c>)
 800ca3a:	4845      	ldr	r0, [pc, #276]	; (800cb50 <__multiply+0x150>)
 800ca3c:	f240 115d 	movw	r1, #349	; 0x15d
 800ca40:	f000 fda4 	bl	800d58c <__assert_func>
 800ca44:	f100 0514 	add.w	r5, r0, #20
 800ca48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4543      	cmp	r3, r8
 800ca52:	d321      	bcc.n	800ca98 <__multiply+0x98>
 800ca54:	f104 0314 	add.w	r3, r4, #20
 800ca58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca5c:	f109 0314 	add.w	r3, r9, #20
 800ca60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca64:	9202      	str	r2, [sp, #8]
 800ca66:	1b3a      	subs	r2, r7, r4
 800ca68:	3a15      	subs	r2, #21
 800ca6a:	f022 0203 	bic.w	r2, r2, #3
 800ca6e:	3204      	adds	r2, #4
 800ca70:	f104 0115 	add.w	r1, r4, #21
 800ca74:	428f      	cmp	r7, r1
 800ca76:	bf38      	it	cc
 800ca78:	2204      	movcc	r2, #4
 800ca7a:	9201      	str	r2, [sp, #4]
 800ca7c:	9a02      	ldr	r2, [sp, #8]
 800ca7e:	9303      	str	r3, [sp, #12]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d80c      	bhi.n	800ca9e <__multiply+0x9e>
 800ca84:	2e00      	cmp	r6, #0
 800ca86:	dd03      	ble.n	800ca90 <__multiply+0x90>
 800ca88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d05a      	beq.n	800cb46 <__multiply+0x146>
 800ca90:	6106      	str	r6, [r0, #16]
 800ca92:	b005      	add	sp, #20
 800ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca98:	f843 2b04 	str.w	r2, [r3], #4
 800ca9c:	e7d8      	b.n	800ca50 <__multiply+0x50>
 800ca9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800caa2:	f1ba 0f00 	cmp.w	sl, #0
 800caa6:	d024      	beq.n	800caf2 <__multiply+0xf2>
 800caa8:	f104 0e14 	add.w	lr, r4, #20
 800caac:	46a9      	mov	r9, r5
 800caae:	f04f 0c00 	mov.w	ip, #0
 800cab2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cab6:	f8d9 1000 	ldr.w	r1, [r9]
 800caba:	fa1f fb82 	uxth.w	fp, r2
 800cabe:	b289      	uxth	r1, r1
 800cac0:	fb0a 110b 	mla	r1, sl, fp, r1
 800cac4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cac8:	f8d9 2000 	ldr.w	r2, [r9]
 800cacc:	4461      	add	r1, ip
 800cace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cad2:	fb0a c20b 	mla	r2, sl, fp, ip
 800cad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cada:	b289      	uxth	r1, r1
 800cadc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cae0:	4577      	cmp	r7, lr
 800cae2:	f849 1b04 	str.w	r1, [r9], #4
 800cae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caea:	d8e2      	bhi.n	800cab2 <__multiply+0xb2>
 800caec:	9a01      	ldr	r2, [sp, #4]
 800caee:	f845 c002 	str.w	ip, [r5, r2]
 800caf2:	9a03      	ldr	r2, [sp, #12]
 800caf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800caf8:	3304      	adds	r3, #4
 800cafa:	f1b9 0f00 	cmp.w	r9, #0
 800cafe:	d020      	beq.n	800cb42 <__multiply+0x142>
 800cb00:	6829      	ldr	r1, [r5, #0]
 800cb02:	f104 0c14 	add.w	ip, r4, #20
 800cb06:	46ae      	mov	lr, r5
 800cb08:	f04f 0a00 	mov.w	sl, #0
 800cb0c:	f8bc b000 	ldrh.w	fp, [ip]
 800cb10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb14:	fb09 220b 	mla	r2, r9, fp, r2
 800cb18:	4492      	add	sl, r2
 800cb1a:	b289      	uxth	r1, r1
 800cb1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cb20:	f84e 1b04 	str.w	r1, [lr], #4
 800cb24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb28:	f8be 1000 	ldrh.w	r1, [lr]
 800cb2c:	0c12      	lsrs	r2, r2, #16
 800cb2e:	fb09 1102 	mla	r1, r9, r2, r1
 800cb32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cb36:	4567      	cmp	r7, ip
 800cb38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb3c:	d8e6      	bhi.n	800cb0c <__multiply+0x10c>
 800cb3e:	9a01      	ldr	r2, [sp, #4]
 800cb40:	50a9      	str	r1, [r5, r2]
 800cb42:	3504      	adds	r5, #4
 800cb44:	e79a      	b.n	800ca7c <__multiply+0x7c>
 800cb46:	3e01      	subs	r6, #1
 800cb48:	e79c      	b.n	800ca84 <__multiply+0x84>
 800cb4a:	bf00      	nop
 800cb4c:	08015d53 	.word	0x08015d53
 800cb50:	08015dc4 	.word	0x08015dc4

0800cb54 <__pow5mult>:
 800cb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb58:	4615      	mov	r5, r2
 800cb5a:	f012 0203 	ands.w	r2, r2, #3
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460f      	mov	r7, r1
 800cb62:	d007      	beq.n	800cb74 <__pow5mult+0x20>
 800cb64:	4c25      	ldr	r4, [pc, #148]	; (800cbfc <__pow5mult+0xa8>)
 800cb66:	3a01      	subs	r2, #1
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb6e:	f7ff fe9b 	bl	800c8a8 <__multadd>
 800cb72:	4607      	mov	r7, r0
 800cb74:	10ad      	asrs	r5, r5, #2
 800cb76:	d03d      	beq.n	800cbf4 <__pow5mult+0xa0>
 800cb78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb7a:	b97c      	cbnz	r4, 800cb9c <__pow5mult+0x48>
 800cb7c:	2010      	movs	r0, #16
 800cb7e:	f7fd fea1 	bl	800a8c4 <malloc>
 800cb82:	4602      	mov	r2, r0
 800cb84:	6270      	str	r0, [r6, #36]	; 0x24
 800cb86:	b928      	cbnz	r0, 800cb94 <__pow5mult+0x40>
 800cb88:	4b1d      	ldr	r3, [pc, #116]	; (800cc00 <__pow5mult+0xac>)
 800cb8a:	481e      	ldr	r0, [pc, #120]	; (800cc04 <__pow5mult+0xb0>)
 800cb8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cb90:	f000 fcfc 	bl	800d58c <__assert_func>
 800cb94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb98:	6004      	str	r4, [r0, #0]
 800cb9a:	60c4      	str	r4, [r0, #12]
 800cb9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cba4:	b94c      	cbnz	r4, 800cbba <__pow5mult+0x66>
 800cba6:	f240 2171 	movw	r1, #625	; 0x271
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f7ff ff12 	bl	800c9d4 <__i2b>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	6003      	str	r3, [r0, #0]
 800cbba:	f04f 0900 	mov.w	r9, #0
 800cbbe:	07eb      	lsls	r3, r5, #31
 800cbc0:	d50a      	bpl.n	800cbd8 <__pow5mult+0x84>
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f7ff ff1a 	bl	800ca00 <__multiply>
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4680      	mov	r8, r0
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7ff fe47 	bl	800c864 <_Bfree>
 800cbd6:	4647      	mov	r7, r8
 800cbd8:	106d      	asrs	r5, r5, #1
 800cbda:	d00b      	beq.n	800cbf4 <__pow5mult+0xa0>
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	b938      	cbnz	r0, 800cbf0 <__pow5mult+0x9c>
 800cbe0:	4622      	mov	r2, r4
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	f7ff ff0b 	bl	800ca00 <__multiply>
 800cbea:	6020      	str	r0, [r4, #0]
 800cbec:	f8c0 9000 	str.w	r9, [r0]
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	e7e4      	b.n	800cbbe <__pow5mult+0x6a>
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbfa:	bf00      	nop
 800cbfc:	08015f10 	.word	0x08015f10
 800cc00:	08015ce1 	.word	0x08015ce1
 800cc04:	08015dc4 	.word	0x08015dc4

0800cc08 <__lshift>:
 800cc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	6849      	ldr	r1, [r1, #4]
 800cc10:	6923      	ldr	r3, [r4, #16]
 800cc12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	4607      	mov	r7, r0
 800cc1a:	4691      	mov	r9, r2
 800cc1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc20:	f108 0601 	add.w	r6, r8, #1
 800cc24:	42b3      	cmp	r3, r6
 800cc26:	db0b      	blt.n	800cc40 <__lshift+0x38>
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f7ff fddb 	bl	800c7e4 <_Balloc>
 800cc2e:	4605      	mov	r5, r0
 800cc30:	b948      	cbnz	r0, 800cc46 <__lshift+0x3e>
 800cc32:	4602      	mov	r2, r0
 800cc34:	4b2a      	ldr	r3, [pc, #168]	; (800cce0 <__lshift+0xd8>)
 800cc36:	482b      	ldr	r0, [pc, #172]	; (800cce4 <__lshift+0xdc>)
 800cc38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc3c:	f000 fca6 	bl	800d58c <__assert_func>
 800cc40:	3101      	adds	r1, #1
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	e7ee      	b.n	800cc24 <__lshift+0x1c>
 800cc46:	2300      	movs	r3, #0
 800cc48:	f100 0114 	add.w	r1, r0, #20
 800cc4c:	f100 0210 	add.w	r2, r0, #16
 800cc50:	4618      	mov	r0, r3
 800cc52:	4553      	cmp	r3, sl
 800cc54:	db37      	blt.n	800ccc6 <__lshift+0xbe>
 800cc56:	6920      	ldr	r0, [r4, #16]
 800cc58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc5c:	f104 0314 	add.w	r3, r4, #20
 800cc60:	f019 091f 	ands.w	r9, r9, #31
 800cc64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cc6c:	d02f      	beq.n	800ccce <__lshift+0xc6>
 800cc6e:	f1c9 0e20 	rsb	lr, r9, #32
 800cc72:	468a      	mov	sl, r1
 800cc74:	f04f 0c00 	mov.w	ip, #0
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	fa02 f209 	lsl.w	r2, r2, r9
 800cc7e:	ea42 020c 	orr.w	r2, r2, ip
 800cc82:	f84a 2b04 	str.w	r2, [sl], #4
 800cc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc8a:	4298      	cmp	r0, r3
 800cc8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cc90:	d8f2      	bhi.n	800cc78 <__lshift+0x70>
 800cc92:	1b03      	subs	r3, r0, r4
 800cc94:	3b15      	subs	r3, #21
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	f104 0215 	add.w	r2, r4, #21
 800cca0:	4290      	cmp	r0, r2
 800cca2:	bf38      	it	cc
 800cca4:	2304      	movcc	r3, #4
 800cca6:	f841 c003 	str.w	ip, [r1, r3]
 800ccaa:	f1bc 0f00 	cmp.w	ip, #0
 800ccae:	d001      	beq.n	800ccb4 <__lshift+0xac>
 800ccb0:	f108 0602 	add.w	r6, r8, #2
 800ccb4:	3e01      	subs	r6, #1
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	612e      	str	r6, [r5, #16]
 800ccba:	4621      	mov	r1, r4
 800ccbc:	f7ff fdd2 	bl	800c864 <_Bfree>
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccca:	3301      	adds	r3, #1
 800cccc:	e7c1      	b.n	800cc52 <__lshift+0x4a>
 800ccce:	3904      	subs	r1, #4
 800ccd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccd8:	4298      	cmp	r0, r3
 800ccda:	d8f9      	bhi.n	800ccd0 <__lshift+0xc8>
 800ccdc:	e7ea      	b.n	800ccb4 <__lshift+0xac>
 800ccde:	bf00      	nop
 800cce0:	08015d53 	.word	0x08015d53
 800cce4:	08015dc4 	.word	0x08015dc4

0800cce8 <__mcmp>:
 800cce8:	b530      	push	{r4, r5, lr}
 800ccea:	6902      	ldr	r2, [r0, #16]
 800ccec:	690c      	ldr	r4, [r1, #16]
 800ccee:	1b12      	subs	r2, r2, r4
 800ccf0:	d10e      	bne.n	800cd10 <__mcmp+0x28>
 800ccf2:	f100 0314 	add.w	r3, r0, #20
 800ccf6:	3114      	adds	r1, #20
 800ccf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd08:	42a5      	cmp	r5, r4
 800cd0a:	d003      	beq.n	800cd14 <__mcmp+0x2c>
 800cd0c:	d305      	bcc.n	800cd1a <__mcmp+0x32>
 800cd0e:	2201      	movs	r2, #1
 800cd10:	4610      	mov	r0, r2
 800cd12:	bd30      	pop	{r4, r5, pc}
 800cd14:	4283      	cmp	r3, r0
 800cd16:	d3f3      	bcc.n	800cd00 <__mcmp+0x18>
 800cd18:	e7fa      	b.n	800cd10 <__mcmp+0x28>
 800cd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd1e:	e7f7      	b.n	800cd10 <__mcmp+0x28>

0800cd20 <__mdiff>:
 800cd20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd24:	460c      	mov	r4, r1
 800cd26:	4606      	mov	r6, r0
 800cd28:	4611      	mov	r1, r2
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	4690      	mov	r8, r2
 800cd2e:	f7ff ffdb 	bl	800cce8 <__mcmp>
 800cd32:	1e05      	subs	r5, r0, #0
 800cd34:	d110      	bne.n	800cd58 <__mdiff+0x38>
 800cd36:	4629      	mov	r1, r5
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f7ff fd53 	bl	800c7e4 <_Balloc>
 800cd3e:	b930      	cbnz	r0, 800cd4e <__mdiff+0x2e>
 800cd40:	4b3a      	ldr	r3, [pc, #232]	; (800ce2c <__mdiff+0x10c>)
 800cd42:	4602      	mov	r2, r0
 800cd44:	f240 2132 	movw	r1, #562	; 0x232
 800cd48:	4839      	ldr	r0, [pc, #228]	; (800ce30 <__mdiff+0x110>)
 800cd4a:	f000 fc1f 	bl	800d58c <__assert_func>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd58:	bfa4      	itt	ge
 800cd5a:	4643      	movge	r3, r8
 800cd5c:	46a0      	movge	r8, r4
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd64:	bfa6      	itte	ge
 800cd66:	461c      	movge	r4, r3
 800cd68:	2500      	movge	r5, #0
 800cd6a:	2501      	movlt	r5, #1
 800cd6c:	f7ff fd3a 	bl	800c7e4 <_Balloc>
 800cd70:	b920      	cbnz	r0, 800cd7c <__mdiff+0x5c>
 800cd72:	4b2e      	ldr	r3, [pc, #184]	; (800ce2c <__mdiff+0x10c>)
 800cd74:	4602      	mov	r2, r0
 800cd76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd7a:	e7e5      	b.n	800cd48 <__mdiff+0x28>
 800cd7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd80:	6926      	ldr	r6, [r4, #16]
 800cd82:	60c5      	str	r5, [r0, #12]
 800cd84:	f104 0914 	add.w	r9, r4, #20
 800cd88:	f108 0514 	add.w	r5, r8, #20
 800cd8c:	f100 0e14 	add.w	lr, r0, #20
 800cd90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd98:	f108 0210 	add.w	r2, r8, #16
 800cd9c:	46f2      	mov	sl, lr
 800cd9e:	2100      	movs	r1, #0
 800cda0:	f859 3b04 	ldr.w	r3, [r9], #4
 800cda4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cda8:	fa1f f883 	uxth.w	r8, r3
 800cdac:	fa11 f18b 	uxtah	r1, r1, fp
 800cdb0:	0c1b      	lsrs	r3, r3, #16
 800cdb2:	eba1 0808 	sub.w	r8, r1, r8
 800cdb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cdbe:	fa1f f888 	uxth.w	r8, r8
 800cdc2:	1419      	asrs	r1, r3, #16
 800cdc4:	454e      	cmp	r6, r9
 800cdc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cdca:	f84a 3b04 	str.w	r3, [sl], #4
 800cdce:	d8e7      	bhi.n	800cda0 <__mdiff+0x80>
 800cdd0:	1b33      	subs	r3, r6, r4
 800cdd2:	3b15      	subs	r3, #21
 800cdd4:	f023 0303 	bic.w	r3, r3, #3
 800cdd8:	3304      	adds	r3, #4
 800cdda:	3415      	adds	r4, #21
 800cddc:	42a6      	cmp	r6, r4
 800cdde:	bf38      	it	cc
 800cde0:	2304      	movcc	r3, #4
 800cde2:	441d      	add	r5, r3
 800cde4:	4473      	add	r3, lr
 800cde6:	469e      	mov	lr, r3
 800cde8:	462e      	mov	r6, r5
 800cdea:	4566      	cmp	r6, ip
 800cdec:	d30e      	bcc.n	800ce0c <__mdiff+0xec>
 800cdee:	f10c 0203 	add.w	r2, ip, #3
 800cdf2:	1b52      	subs	r2, r2, r5
 800cdf4:	f022 0203 	bic.w	r2, r2, #3
 800cdf8:	3d03      	subs	r5, #3
 800cdfa:	45ac      	cmp	ip, r5
 800cdfc:	bf38      	it	cc
 800cdfe:	2200      	movcc	r2, #0
 800ce00:	441a      	add	r2, r3
 800ce02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce06:	b17b      	cbz	r3, 800ce28 <__mdiff+0x108>
 800ce08:	6107      	str	r7, [r0, #16]
 800ce0a:	e7a3      	b.n	800cd54 <__mdiff+0x34>
 800ce0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce10:	fa11 f288 	uxtah	r2, r1, r8
 800ce14:	1414      	asrs	r4, r2, #16
 800ce16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce1a:	b292      	uxth	r2, r2
 800ce1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce20:	f84e 2b04 	str.w	r2, [lr], #4
 800ce24:	1421      	asrs	r1, r4, #16
 800ce26:	e7e0      	b.n	800cdea <__mdiff+0xca>
 800ce28:	3f01      	subs	r7, #1
 800ce2a:	e7ea      	b.n	800ce02 <__mdiff+0xe2>
 800ce2c:	08015d53 	.word	0x08015d53
 800ce30:	08015dc4 	.word	0x08015dc4

0800ce34 <__d2b>:
 800ce34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce38:	4689      	mov	r9, r1
 800ce3a:	2101      	movs	r1, #1
 800ce3c:	ec57 6b10 	vmov	r6, r7, d0
 800ce40:	4690      	mov	r8, r2
 800ce42:	f7ff fccf 	bl	800c7e4 <_Balloc>
 800ce46:	4604      	mov	r4, r0
 800ce48:	b930      	cbnz	r0, 800ce58 <__d2b+0x24>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	4b25      	ldr	r3, [pc, #148]	; (800cee4 <__d2b+0xb0>)
 800ce4e:	4826      	ldr	r0, [pc, #152]	; (800cee8 <__d2b+0xb4>)
 800ce50:	f240 310a 	movw	r1, #778	; 0x30a
 800ce54:	f000 fb9a 	bl	800d58c <__assert_func>
 800ce58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ce5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce60:	bb35      	cbnz	r5, 800ceb0 <__d2b+0x7c>
 800ce62:	2e00      	cmp	r6, #0
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	d028      	beq.n	800ceba <__d2b+0x86>
 800ce68:	4668      	mov	r0, sp
 800ce6a:	9600      	str	r6, [sp, #0]
 800ce6c:	f7ff fd82 	bl	800c974 <__lo0bits>
 800ce70:	9900      	ldr	r1, [sp, #0]
 800ce72:	b300      	cbz	r0, 800ceb6 <__d2b+0x82>
 800ce74:	9a01      	ldr	r2, [sp, #4]
 800ce76:	f1c0 0320 	rsb	r3, r0, #32
 800ce7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce7e:	430b      	orrs	r3, r1
 800ce80:	40c2      	lsrs	r2, r0
 800ce82:	6163      	str	r3, [r4, #20]
 800ce84:	9201      	str	r2, [sp, #4]
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	61a3      	str	r3, [r4, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	bf14      	ite	ne
 800ce8e:	2202      	movne	r2, #2
 800ce90:	2201      	moveq	r2, #1
 800ce92:	6122      	str	r2, [r4, #16]
 800ce94:	b1d5      	cbz	r5, 800cecc <__d2b+0x98>
 800ce96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce9a:	4405      	add	r5, r0
 800ce9c:	f8c9 5000 	str.w	r5, [r9]
 800cea0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cea4:	f8c8 0000 	str.w	r0, [r8]
 800cea8:	4620      	mov	r0, r4
 800ceaa:	b003      	add	sp, #12
 800ceac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ceb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceb4:	e7d5      	b.n	800ce62 <__d2b+0x2e>
 800ceb6:	6161      	str	r1, [r4, #20]
 800ceb8:	e7e5      	b.n	800ce86 <__d2b+0x52>
 800ceba:	a801      	add	r0, sp, #4
 800cebc:	f7ff fd5a 	bl	800c974 <__lo0bits>
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	6163      	str	r3, [r4, #20]
 800cec4:	2201      	movs	r2, #1
 800cec6:	6122      	str	r2, [r4, #16]
 800cec8:	3020      	adds	r0, #32
 800ceca:	e7e3      	b.n	800ce94 <__d2b+0x60>
 800cecc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ced0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ced4:	f8c9 0000 	str.w	r0, [r9]
 800ced8:	6918      	ldr	r0, [r3, #16]
 800ceda:	f7ff fd2b 	bl	800c934 <__hi0bits>
 800cede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cee2:	e7df      	b.n	800cea4 <__d2b+0x70>
 800cee4:	08015d53 	.word	0x08015d53
 800cee8:	08015dc4 	.word	0x08015dc4

0800ceec <_calloc_r>:
 800ceec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceee:	fba1 2402 	umull	r2, r4, r1, r2
 800cef2:	b94c      	cbnz	r4, 800cf08 <_calloc_r+0x1c>
 800cef4:	4611      	mov	r1, r2
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	f7fd fd6e 	bl	800a9d8 <_malloc_r>
 800cefc:	9a01      	ldr	r2, [sp, #4]
 800cefe:	4605      	mov	r5, r0
 800cf00:	b930      	cbnz	r0, 800cf10 <_calloc_r+0x24>
 800cf02:	4628      	mov	r0, r5
 800cf04:	b003      	add	sp, #12
 800cf06:	bd30      	pop	{r4, r5, pc}
 800cf08:	220c      	movs	r2, #12
 800cf0a:	6002      	str	r2, [r0, #0]
 800cf0c:	2500      	movs	r5, #0
 800cf0e:	e7f8      	b.n	800cf02 <_calloc_r+0x16>
 800cf10:	4621      	mov	r1, r4
 800cf12:	f7fd fced 	bl	800a8f0 <memset>
 800cf16:	e7f4      	b.n	800cf02 <_calloc_r+0x16>

0800cf18 <_realloc_r>:
 800cf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	4614      	mov	r4, r2
 800cf20:	460e      	mov	r6, r1
 800cf22:	b921      	cbnz	r1, 800cf2e <_realloc_r+0x16>
 800cf24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf28:	4611      	mov	r1, r2
 800cf2a:	f7fd bd55 	b.w	800a9d8 <_malloc_r>
 800cf2e:	b92a      	cbnz	r2, 800cf3c <_realloc_r+0x24>
 800cf30:	f7fd fce6 	bl	800a900 <_free_r>
 800cf34:	4625      	mov	r5, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3c:	f000 fbc6 	bl	800d6cc <_malloc_usable_size_r>
 800cf40:	4284      	cmp	r4, r0
 800cf42:	4607      	mov	r7, r0
 800cf44:	d802      	bhi.n	800cf4c <_realloc_r+0x34>
 800cf46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf4a:	d812      	bhi.n	800cf72 <_realloc_r+0x5a>
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4640      	mov	r0, r8
 800cf50:	f7fd fd42 	bl	800a9d8 <_malloc_r>
 800cf54:	4605      	mov	r5, r0
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0ed      	beq.n	800cf36 <_realloc_r+0x1e>
 800cf5a:	42bc      	cmp	r4, r7
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4631      	mov	r1, r6
 800cf60:	bf28      	it	cs
 800cf62:	463a      	movcs	r2, r7
 800cf64:	f7fd fcb6 	bl	800a8d4 <memcpy>
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	f7fd fcc8 	bl	800a900 <_free_r>
 800cf70:	e7e1      	b.n	800cf36 <_realloc_r+0x1e>
 800cf72:	4635      	mov	r5, r6
 800cf74:	e7df      	b.n	800cf36 <_realloc_r+0x1e>

0800cf76 <__ssputs_r>:
 800cf76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf7a:	688e      	ldr	r6, [r1, #8]
 800cf7c:	429e      	cmp	r6, r3
 800cf7e:	4682      	mov	sl, r0
 800cf80:	460c      	mov	r4, r1
 800cf82:	4690      	mov	r8, r2
 800cf84:	461f      	mov	r7, r3
 800cf86:	d838      	bhi.n	800cffa <__ssputs_r+0x84>
 800cf88:	898a      	ldrh	r2, [r1, #12]
 800cf8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf8e:	d032      	beq.n	800cff6 <__ssputs_r+0x80>
 800cf90:	6825      	ldr	r5, [r4, #0]
 800cf92:	6909      	ldr	r1, [r1, #16]
 800cf94:	eba5 0901 	sub.w	r9, r5, r1
 800cf98:	6965      	ldr	r5, [r4, #20]
 800cf9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	444b      	add	r3, r9
 800cfa6:	106d      	asrs	r5, r5, #1
 800cfa8:	429d      	cmp	r5, r3
 800cfaa:	bf38      	it	cc
 800cfac:	461d      	movcc	r5, r3
 800cfae:	0553      	lsls	r3, r2, #21
 800cfb0:	d531      	bpl.n	800d016 <__ssputs_r+0xa0>
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	f7fd fd10 	bl	800a9d8 <_malloc_r>
 800cfb8:	4606      	mov	r6, r0
 800cfba:	b950      	cbnz	r0, 800cfd2 <__ssputs_r+0x5c>
 800cfbc:	230c      	movs	r3, #12
 800cfbe:	f8ca 3000 	str.w	r3, [sl]
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc8:	81a3      	strh	r3, [r4, #12]
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	6921      	ldr	r1, [r4, #16]
 800cfd4:	464a      	mov	r2, r9
 800cfd6:	f7fd fc7d 	bl	800a8d4 <memcpy>
 800cfda:	89a3      	ldrh	r3, [r4, #12]
 800cfdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfe4:	81a3      	strh	r3, [r4, #12]
 800cfe6:	6126      	str	r6, [r4, #16]
 800cfe8:	6165      	str	r5, [r4, #20]
 800cfea:	444e      	add	r6, r9
 800cfec:	eba5 0509 	sub.w	r5, r5, r9
 800cff0:	6026      	str	r6, [r4, #0]
 800cff2:	60a5      	str	r5, [r4, #8]
 800cff4:	463e      	mov	r6, r7
 800cff6:	42be      	cmp	r6, r7
 800cff8:	d900      	bls.n	800cffc <__ssputs_r+0x86>
 800cffa:	463e      	mov	r6, r7
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	4632      	mov	r2, r6
 800d000:	4641      	mov	r1, r8
 800d002:	f000 fb49 	bl	800d698 <memmove>
 800d006:	68a3      	ldr	r3, [r4, #8]
 800d008:	1b9b      	subs	r3, r3, r6
 800d00a:	60a3      	str	r3, [r4, #8]
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	4433      	add	r3, r6
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	2000      	movs	r0, #0
 800d014:	e7db      	b.n	800cfce <__ssputs_r+0x58>
 800d016:	462a      	mov	r2, r5
 800d018:	f7ff ff7e 	bl	800cf18 <_realloc_r>
 800d01c:	4606      	mov	r6, r0
 800d01e:	2800      	cmp	r0, #0
 800d020:	d1e1      	bne.n	800cfe6 <__ssputs_r+0x70>
 800d022:	6921      	ldr	r1, [r4, #16]
 800d024:	4650      	mov	r0, sl
 800d026:	f7fd fc6b 	bl	800a900 <_free_r>
 800d02a:	e7c7      	b.n	800cfbc <__ssputs_r+0x46>

0800d02c <_svfiprintf_r>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	4698      	mov	r8, r3
 800d032:	898b      	ldrh	r3, [r1, #12]
 800d034:	061b      	lsls	r3, r3, #24
 800d036:	b09d      	sub	sp, #116	; 0x74
 800d038:	4607      	mov	r7, r0
 800d03a:	460d      	mov	r5, r1
 800d03c:	4614      	mov	r4, r2
 800d03e:	d50e      	bpl.n	800d05e <_svfiprintf_r+0x32>
 800d040:	690b      	ldr	r3, [r1, #16]
 800d042:	b963      	cbnz	r3, 800d05e <_svfiprintf_r+0x32>
 800d044:	2140      	movs	r1, #64	; 0x40
 800d046:	f7fd fcc7 	bl	800a9d8 <_malloc_r>
 800d04a:	6028      	str	r0, [r5, #0]
 800d04c:	6128      	str	r0, [r5, #16]
 800d04e:	b920      	cbnz	r0, 800d05a <_svfiprintf_r+0x2e>
 800d050:	230c      	movs	r3, #12
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	e0d1      	b.n	800d1fe <_svfiprintf_r+0x1d2>
 800d05a:	2340      	movs	r3, #64	; 0x40
 800d05c:	616b      	str	r3, [r5, #20]
 800d05e:	2300      	movs	r3, #0
 800d060:	9309      	str	r3, [sp, #36]	; 0x24
 800d062:	2320      	movs	r3, #32
 800d064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d068:	f8cd 800c 	str.w	r8, [sp, #12]
 800d06c:	2330      	movs	r3, #48	; 0x30
 800d06e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d218 <_svfiprintf_r+0x1ec>
 800d072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d076:	f04f 0901 	mov.w	r9, #1
 800d07a:	4623      	mov	r3, r4
 800d07c:	469a      	mov	sl, r3
 800d07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d082:	b10a      	cbz	r2, 800d088 <_svfiprintf_r+0x5c>
 800d084:	2a25      	cmp	r2, #37	; 0x25
 800d086:	d1f9      	bne.n	800d07c <_svfiprintf_r+0x50>
 800d088:	ebba 0b04 	subs.w	fp, sl, r4
 800d08c:	d00b      	beq.n	800d0a6 <_svfiprintf_r+0x7a>
 800d08e:	465b      	mov	r3, fp
 800d090:	4622      	mov	r2, r4
 800d092:	4629      	mov	r1, r5
 800d094:	4638      	mov	r0, r7
 800d096:	f7ff ff6e 	bl	800cf76 <__ssputs_r>
 800d09a:	3001      	adds	r0, #1
 800d09c:	f000 80aa 	beq.w	800d1f4 <_svfiprintf_r+0x1c8>
 800d0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a2:	445a      	add	r2, fp
 800d0a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f000 80a2 	beq.w	800d1f4 <_svfiprintf_r+0x1c8>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0ba:	f10a 0a01 	add.w	sl, sl, #1
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	9307      	str	r3, [sp, #28]
 800d0c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0c6:	931a      	str	r3, [sp, #104]	; 0x68
 800d0c8:	4654      	mov	r4, sl
 800d0ca:	2205      	movs	r2, #5
 800d0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d0:	4851      	ldr	r0, [pc, #324]	; (800d218 <_svfiprintf_r+0x1ec>)
 800d0d2:	f7f3 f885 	bl	80001e0 <memchr>
 800d0d6:	9a04      	ldr	r2, [sp, #16]
 800d0d8:	b9d8      	cbnz	r0, 800d112 <_svfiprintf_r+0xe6>
 800d0da:	06d0      	lsls	r0, r2, #27
 800d0dc:	bf44      	itt	mi
 800d0de:	2320      	movmi	r3, #32
 800d0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e4:	0711      	lsls	r1, r2, #28
 800d0e6:	bf44      	itt	mi
 800d0e8:	232b      	movmi	r3, #43	; 0x2b
 800d0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f4:	d015      	beq.n	800d122 <_svfiprintf_r+0xf6>
 800d0f6:	9a07      	ldr	r2, [sp, #28]
 800d0f8:	4654      	mov	r4, sl
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	f04f 0c0a 	mov.w	ip, #10
 800d100:	4621      	mov	r1, r4
 800d102:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d106:	3b30      	subs	r3, #48	; 0x30
 800d108:	2b09      	cmp	r3, #9
 800d10a:	d94e      	bls.n	800d1aa <_svfiprintf_r+0x17e>
 800d10c:	b1b0      	cbz	r0, 800d13c <_svfiprintf_r+0x110>
 800d10e:	9207      	str	r2, [sp, #28]
 800d110:	e014      	b.n	800d13c <_svfiprintf_r+0x110>
 800d112:	eba0 0308 	sub.w	r3, r0, r8
 800d116:	fa09 f303 	lsl.w	r3, r9, r3
 800d11a:	4313      	orrs	r3, r2
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	46a2      	mov	sl, r4
 800d120:	e7d2      	b.n	800d0c8 <_svfiprintf_r+0x9c>
 800d122:	9b03      	ldr	r3, [sp, #12]
 800d124:	1d19      	adds	r1, r3, #4
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	9103      	str	r1, [sp, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfbb      	ittet	lt
 800d12e:	425b      	neglt	r3, r3
 800d130:	f042 0202 	orrlt.w	r2, r2, #2
 800d134:	9307      	strge	r3, [sp, #28]
 800d136:	9307      	strlt	r3, [sp, #28]
 800d138:	bfb8      	it	lt
 800d13a:	9204      	strlt	r2, [sp, #16]
 800d13c:	7823      	ldrb	r3, [r4, #0]
 800d13e:	2b2e      	cmp	r3, #46	; 0x2e
 800d140:	d10c      	bne.n	800d15c <_svfiprintf_r+0x130>
 800d142:	7863      	ldrb	r3, [r4, #1]
 800d144:	2b2a      	cmp	r3, #42	; 0x2a
 800d146:	d135      	bne.n	800d1b4 <_svfiprintf_r+0x188>
 800d148:	9b03      	ldr	r3, [sp, #12]
 800d14a:	1d1a      	adds	r2, r3, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	9203      	str	r2, [sp, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bfb8      	it	lt
 800d154:	f04f 33ff 	movlt.w	r3, #4294967295
 800d158:	3402      	adds	r4, #2
 800d15a:	9305      	str	r3, [sp, #20]
 800d15c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d228 <_svfiprintf_r+0x1fc>
 800d160:	7821      	ldrb	r1, [r4, #0]
 800d162:	2203      	movs	r2, #3
 800d164:	4650      	mov	r0, sl
 800d166:	f7f3 f83b 	bl	80001e0 <memchr>
 800d16a:	b140      	cbz	r0, 800d17e <_svfiprintf_r+0x152>
 800d16c:	2340      	movs	r3, #64	; 0x40
 800d16e:	eba0 000a 	sub.w	r0, r0, sl
 800d172:	fa03 f000 	lsl.w	r0, r3, r0
 800d176:	9b04      	ldr	r3, [sp, #16]
 800d178:	4303      	orrs	r3, r0
 800d17a:	3401      	adds	r4, #1
 800d17c:	9304      	str	r3, [sp, #16]
 800d17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d182:	4826      	ldr	r0, [pc, #152]	; (800d21c <_svfiprintf_r+0x1f0>)
 800d184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d188:	2206      	movs	r2, #6
 800d18a:	f7f3 f829 	bl	80001e0 <memchr>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d038      	beq.n	800d204 <_svfiprintf_r+0x1d8>
 800d192:	4b23      	ldr	r3, [pc, #140]	; (800d220 <_svfiprintf_r+0x1f4>)
 800d194:	bb1b      	cbnz	r3, 800d1de <_svfiprintf_r+0x1b2>
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	3307      	adds	r3, #7
 800d19a:	f023 0307 	bic.w	r3, r3, #7
 800d19e:	3308      	adds	r3, #8
 800d1a0:	9303      	str	r3, [sp, #12]
 800d1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a4:	4433      	add	r3, r6
 800d1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a8:	e767      	b.n	800d07a <_svfiprintf_r+0x4e>
 800d1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	2001      	movs	r0, #1
 800d1b2:	e7a5      	b.n	800d100 <_svfiprintf_r+0xd4>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	3401      	adds	r4, #1
 800d1b8:	9305      	str	r3, [sp, #20]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f04f 0c0a 	mov.w	ip, #10
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1c6:	3a30      	subs	r2, #48	; 0x30
 800d1c8:	2a09      	cmp	r2, #9
 800d1ca:	d903      	bls.n	800d1d4 <_svfiprintf_r+0x1a8>
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0c5      	beq.n	800d15c <_svfiprintf_r+0x130>
 800d1d0:	9105      	str	r1, [sp, #20]
 800d1d2:	e7c3      	b.n	800d15c <_svfiprintf_r+0x130>
 800d1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1d8:	4604      	mov	r4, r0
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e7f0      	b.n	800d1c0 <_svfiprintf_r+0x194>
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <_svfiprintf_r+0x1f8>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f7fd fd09 	bl	800ac00 <_printf_float>
 800d1ee:	1c42      	adds	r2, r0, #1
 800d1f0:	4606      	mov	r6, r0
 800d1f2:	d1d6      	bne.n	800d1a2 <_svfiprintf_r+0x176>
 800d1f4:	89ab      	ldrh	r3, [r5, #12]
 800d1f6:	065b      	lsls	r3, r3, #25
 800d1f8:	f53f af2c 	bmi.w	800d054 <_svfiprintf_r+0x28>
 800d1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1fe:	b01d      	add	sp, #116	; 0x74
 800d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d204:	ab03      	add	r3, sp, #12
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	462a      	mov	r2, r5
 800d20a:	4b06      	ldr	r3, [pc, #24]	; (800d224 <_svfiprintf_r+0x1f8>)
 800d20c:	a904      	add	r1, sp, #16
 800d20e:	4638      	mov	r0, r7
 800d210:	f7fd ff9a 	bl	800b148 <_printf_i>
 800d214:	e7eb      	b.n	800d1ee <_svfiprintf_r+0x1c2>
 800d216:	bf00      	nop
 800d218:	08015f1c 	.word	0x08015f1c
 800d21c:	08015f26 	.word	0x08015f26
 800d220:	0800ac01 	.word	0x0800ac01
 800d224:	0800cf77 	.word	0x0800cf77
 800d228:	08015f22 	.word	0x08015f22

0800d22c <__sfputc_r>:
 800d22c:	6893      	ldr	r3, [r2, #8]
 800d22e:	3b01      	subs	r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	b410      	push	{r4}
 800d234:	6093      	str	r3, [r2, #8]
 800d236:	da08      	bge.n	800d24a <__sfputc_r+0x1e>
 800d238:	6994      	ldr	r4, [r2, #24]
 800d23a:	42a3      	cmp	r3, r4
 800d23c:	db01      	blt.n	800d242 <__sfputc_r+0x16>
 800d23e:	290a      	cmp	r1, #10
 800d240:	d103      	bne.n	800d24a <__sfputc_r+0x1e>
 800d242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d246:	f7fe b963 	b.w	800b510 <__swbuf_r>
 800d24a:	6813      	ldr	r3, [r2, #0]
 800d24c:	1c58      	adds	r0, r3, #1
 800d24e:	6010      	str	r0, [r2, #0]
 800d250:	7019      	strb	r1, [r3, #0]
 800d252:	4608      	mov	r0, r1
 800d254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <__sfputs_r>:
 800d25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25c:	4606      	mov	r6, r0
 800d25e:	460f      	mov	r7, r1
 800d260:	4614      	mov	r4, r2
 800d262:	18d5      	adds	r5, r2, r3
 800d264:	42ac      	cmp	r4, r5
 800d266:	d101      	bne.n	800d26c <__sfputs_r+0x12>
 800d268:	2000      	movs	r0, #0
 800d26a:	e007      	b.n	800d27c <__sfputs_r+0x22>
 800d26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d270:	463a      	mov	r2, r7
 800d272:	4630      	mov	r0, r6
 800d274:	f7ff ffda 	bl	800d22c <__sfputc_r>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d1f3      	bne.n	800d264 <__sfputs_r+0xa>
 800d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d280 <_vfiprintf_r>:
 800d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	460d      	mov	r5, r1
 800d286:	b09d      	sub	sp, #116	; 0x74
 800d288:	4614      	mov	r4, r2
 800d28a:	4698      	mov	r8, r3
 800d28c:	4606      	mov	r6, r0
 800d28e:	b118      	cbz	r0, 800d298 <_vfiprintf_r+0x18>
 800d290:	6983      	ldr	r3, [r0, #24]
 800d292:	b90b      	cbnz	r3, 800d298 <_vfiprintf_r+0x18>
 800d294:	f7ff f990 	bl	800c5b8 <__sinit>
 800d298:	4b89      	ldr	r3, [pc, #548]	; (800d4c0 <_vfiprintf_r+0x240>)
 800d29a:	429d      	cmp	r5, r3
 800d29c:	d11b      	bne.n	800d2d6 <_vfiprintf_r+0x56>
 800d29e:	6875      	ldr	r5, [r6, #4]
 800d2a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a2:	07d9      	lsls	r1, r3, #31
 800d2a4:	d405      	bmi.n	800d2b2 <_vfiprintf_r+0x32>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	059a      	lsls	r2, r3, #22
 800d2aa:	d402      	bmi.n	800d2b2 <_vfiprintf_r+0x32>
 800d2ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ae:	f7ff fa26 	bl	800c6fe <__retarget_lock_acquire_recursive>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	071b      	lsls	r3, r3, #28
 800d2b6:	d501      	bpl.n	800d2bc <_vfiprintf_r+0x3c>
 800d2b8:	692b      	ldr	r3, [r5, #16]
 800d2ba:	b9eb      	cbnz	r3, 800d2f8 <_vfiprintf_r+0x78>
 800d2bc:	4629      	mov	r1, r5
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7fe f978 	bl	800b5b4 <__swsetup_r>
 800d2c4:	b1c0      	cbz	r0, 800d2f8 <_vfiprintf_r+0x78>
 800d2c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2c8:	07dc      	lsls	r4, r3, #31
 800d2ca:	d50e      	bpl.n	800d2ea <_vfiprintf_r+0x6a>
 800d2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d0:	b01d      	add	sp, #116	; 0x74
 800d2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d6:	4b7b      	ldr	r3, [pc, #492]	; (800d4c4 <_vfiprintf_r+0x244>)
 800d2d8:	429d      	cmp	r5, r3
 800d2da:	d101      	bne.n	800d2e0 <_vfiprintf_r+0x60>
 800d2dc:	68b5      	ldr	r5, [r6, #8]
 800d2de:	e7df      	b.n	800d2a0 <_vfiprintf_r+0x20>
 800d2e0:	4b79      	ldr	r3, [pc, #484]	; (800d4c8 <_vfiprintf_r+0x248>)
 800d2e2:	429d      	cmp	r5, r3
 800d2e4:	bf08      	it	eq
 800d2e6:	68f5      	ldreq	r5, [r6, #12]
 800d2e8:	e7da      	b.n	800d2a0 <_vfiprintf_r+0x20>
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	0598      	lsls	r0, r3, #22
 800d2ee:	d4ed      	bmi.n	800d2cc <_vfiprintf_r+0x4c>
 800d2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2f2:	f7ff fa05 	bl	800c700 <__retarget_lock_release_recursive>
 800d2f6:	e7e9      	b.n	800d2cc <_vfiprintf_r+0x4c>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d2fc:	2320      	movs	r3, #32
 800d2fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d302:	f8cd 800c 	str.w	r8, [sp, #12]
 800d306:	2330      	movs	r3, #48	; 0x30
 800d308:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4cc <_vfiprintf_r+0x24c>
 800d30c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d310:	f04f 0901 	mov.w	r9, #1
 800d314:	4623      	mov	r3, r4
 800d316:	469a      	mov	sl, r3
 800d318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d31c:	b10a      	cbz	r2, 800d322 <_vfiprintf_r+0xa2>
 800d31e:	2a25      	cmp	r2, #37	; 0x25
 800d320:	d1f9      	bne.n	800d316 <_vfiprintf_r+0x96>
 800d322:	ebba 0b04 	subs.w	fp, sl, r4
 800d326:	d00b      	beq.n	800d340 <_vfiprintf_r+0xc0>
 800d328:	465b      	mov	r3, fp
 800d32a:	4622      	mov	r2, r4
 800d32c:	4629      	mov	r1, r5
 800d32e:	4630      	mov	r0, r6
 800d330:	f7ff ff93 	bl	800d25a <__sfputs_r>
 800d334:	3001      	adds	r0, #1
 800d336:	f000 80aa 	beq.w	800d48e <_vfiprintf_r+0x20e>
 800d33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d33c:	445a      	add	r2, fp
 800d33e:	9209      	str	r2, [sp, #36]	; 0x24
 800d340:	f89a 3000 	ldrb.w	r3, [sl]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 80a2 	beq.w	800d48e <_vfiprintf_r+0x20e>
 800d34a:	2300      	movs	r3, #0
 800d34c:	f04f 32ff 	mov.w	r2, #4294967295
 800d350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d354:	f10a 0a01 	add.w	sl, sl, #1
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	9307      	str	r3, [sp, #28]
 800d35c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d360:	931a      	str	r3, [sp, #104]	; 0x68
 800d362:	4654      	mov	r4, sl
 800d364:	2205      	movs	r2, #5
 800d366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36a:	4858      	ldr	r0, [pc, #352]	; (800d4cc <_vfiprintf_r+0x24c>)
 800d36c:	f7f2 ff38 	bl	80001e0 <memchr>
 800d370:	9a04      	ldr	r2, [sp, #16]
 800d372:	b9d8      	cbnz	r0, 800d3ac <_vfiprintf_r+0x12c>
 800d374:	06d1      	lsls	r1, r2, #27
 800d376:	bf44      	itt	mi
 800d378:	2320      	movmi	r3, #32
 800d37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d37e:	0713      	lsls	r3, r2, #28
 800d380:	bf44      	itt	mi
 800d382:	232b      	movmi	r3, #43	; 0x2b
 800d384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d388:	f89a 3000 	ldrb.w	r3, [sl]
 800d38c:	2b2a      	cmp	r3, #42	; 0x2a
 800d38e:	d015      	beq.n	800d3bc <_vfiprintf_r+0x13c>
 800d390:	9a07      	ldr	r2, [sp, #28]
 800d392:	4654      	mov	r4, sl
 800d394:	2000      	movs	r0, #0
 800d396:	f04f 0c0a 	mov.w	ip, #10
 800d39a:	4621      	mov	r1, r4
 800d39c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3a0:	3b30      	subs	r3, #48	; 0x30
 800d3a2:	2b09      	cmp	r3, #9
 800d3a4:	d94e      	bls.n	800d444 <_vfiprintf_r+0x1c4>
 800d3a6:	b1b0      	cbz	r0, 800d3d6 <_vfiprintf_r+0x156>
 800d3a8:	9207      	str	r2, [sp, #28]
 800d3aa:	e014      	b.n	800d3d6 <_vfiprintf_r+0x156>
 800d3ac:	eba0 0308 	sub.w	r3, r0, r8
 800d3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	9304      	str	r3, [sp, #16]
 800d3b8:	46a2      	mov	sl, r4
 800d3ba:	e7d2      	b.n	800d362 <_vfiprintf_r+0xe2>
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	1d19      	adds	r1, r3, #4
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	9103      	str	r1, [sp, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	bfbb      	ittet	lt
 800d3c8:	425b      	neglt	r3, r3
 800d3ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ce:	9307      	strge	r3, [sp, #28]
 800d3d0:	9307      	strlt	r3, [sp, #28]
 800d3d2:	bfb8      	it	lt
 800d3d4:	9204      	strlt	r2, [sp, #16]
 800d3d6:	7823      	ldrb	r3, [r4, #0]
 800d3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d3da:	d10c      	bne.n	800d3f6 <_vfiprintf_r+0x176>
 800d3dc:	7863      	ldrb	r3, [r4, #1]
 800d3de:	2b2a      	cmp	r3, #42	; 0x2a
 800d3e0:	d135      	bne.n	800d44e <_vfiprintf_r+0x1ce>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	1d1a      	adds	r2, r3, #4
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	9203      	str	r2, [sp, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	bfb8      	it	lt
 800d3ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3f2:	3402      	adds	r4, #2
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4dc <_vfiprintf_r+0x25c>
 800d3fa:	7821      	ldrb	r1, [r4, #0]
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	4650      	mov	r0, sl
 800d400:	f7f2 feee 	bl	80001e0 <memchr>
 800d404:	b140      	cbz	r0, 800d418 <_vfiprintf_r+0x198>
 800d406:	2340      	movs	r3, #64	; 0x40
 800d408:	eba0 000a 	sub.w	r0, r0, sl
 800d40c:	fa03 f000 	lsl.w	r0, r3, r0
 800d410:	9b04      	ldr	r3, [sp, #16]
 800d412:	4303      	orrs	r3, r0
 800d414:	3401      	adds	r4, #1
 800d416:	9304      	str	r3, [sp, #16]
 800d418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41c:	482c      	ldr	r0, [pc, #176]	; (800d4d0 <_vfiprintf_r+0x250>)
 800d41e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d422:	2206      	movs	r2, #6
 800d424:	f7f2 fedc 	bl	80001e0 <memchr>
 800d428:	2800      	cmp	r0, #0
 800d42a:	d03f      	beq.n	800d4ac <_vfiprintf_r+0x22c>
 800d42c:	4b29      	ldr	r3, [pc, #164]	; (800d4d4 <_vfiprintf_r+0x254>)
 800d42e:	bb1b      	cbnz	r3, 800d478 <_vfiprintf_r+0x1f8>
 800d430:	9b03      	ldr	r3, [sp, #12]
 800d432:	3307      	adds	r3, #7
 800d434:	f023 0307 	bic.w	r3, r3, #7
 800d438:	3308      	adds	r3, #8
 800d43a:	9303      	str	r3, [sp, #12]
 800d43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d43e:	443b      	add	r3, r7
 800d440:	9309      	str	r3, [sp, #36]	; 0x24
 800d442:	e767      	b.n	800d314 <_vfiprintf_r+0x94>
 800d444:	fb0c 3202 	mla	r2, ip, r2, r3
 800d448:	460c      	mov	r4, r1
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7a5      	b.n	800d39a <_vfiprintf_r+0x11a>
 800d44e:	2300      	movs	r3, #0
 800d450:	3401      	adds	r4, #1
 800d452:	9305      	str	r3, [sp, #20]
 800d454:	4619      	mov	r1, r3
 800d456:	f04f 0c0a 	mov.w	ip, #10
 800d45a:	4620      	mov	r0, r4
 800d45c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d460:	3a30      	subs	r2, #48	; 0x30
 800d462:	2a09      	cmp	r2, #9
 800d464:	d903      	bls.n	800d46e <_vfiprintf_r+0x1ee>
 800d466:	2b00      	cmp	r3, #0
 800d468:	d0c5      	beq.n	800d3f6 <_vfiprintf_r+0x176>
 800d46a:	9105      	str	r1, [sp, #20]
 800d46c:	e7c3      	b.n	800d3f6 <_vfiprintf_r+0x176>
 800d46e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d472:	4604      	mov	r4, r0
 800d474:	2301      	movs	r3, #1
 800d476:	e7f0      	b.n	800d45a <_vfiprintf_r+0x1da>
 800d478:	ab03      	add	r3, sp, #12
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	462a      	mov	r2, r5
 800d47e:	4b16      	ldr	r3, [pc, #88]	; (800d4d8 <_vfiprintf_r+0x258>)
 800d480:	a904      	add	r1, sp, #16
 800d482:	4630      	mov	r0, r6
 800d484:	f7fd fbbc 	bl	800ac00 <_printf_float>
 800d488:	4607      	mov	r7, r0
 800d48a:	1c78      	adds	r0, r7, #1
 800d48c:	d1d6      	bne.n	800d43c <_vfiprintf_r+0x1bc>
 800d48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d490:	07d9      	lsls	r1, r3, #31
 800d492:	d405      	bmi.n	800d4a0 <_vfiprintf_r+0x220>
 800d494:	89ab      	ldrh	r3, [r5, #12]
 800d496:	059a      	lsls	r2, r3, #22
 800d498:	d402      	bmi.n	800d4a0 <_vfiprintf_r+0x220>
 800d49a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d49c:	f7ff f930 	bl	800c700 <__retarget_lock_release_recursive>
 800d4a0:	89ab      	ldrh	r3, [r5, #12]
 800d4a2:	065b      	lsls	r3, r3, #25
 800d4a4:	f53f af12 	bmi.w	800d2cc <_vfiprintf_r+0x4c>
 800d4a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4aa:	e711      	b.n	800d2d0 <_vfiprintf_r+0x50>
 800d4ac:	ab03      	add	r3, sp, #12
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	462a      	mov	r2, r5
 800d4b2:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <_vfiprintf_r+0x258>)
 800d4b4:	a904      	add	r1, sp, #16
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f7fd fe46 	bl	800b148 <_printf_i>
 800d4bc:	e7e4      	b.n	800d488 <_vfiprintf_r+0x208>
 800d4be:	bf00      	nop
 800d4c0:	08015d84 	.word	0x08015d84
 800d4c4:	08015da4 	.word	0x08015da4
 800d4c8:	08015d64 	.word	0x08015d64
 800d4cc:	08015f1c 	.word	0x08015f1c
 800d4d0:	08015f26 	.word	0x08015f26
 800d4d4:	0800ac01 	.word	0x0800ac01
 800d4d8:	0800d25b 	.word	0x0800d25b
 800d4dc:	08015f22 	.word	0x08015f22

0800d4e0 <__sread>:
 800d4e0:	b510      	push	{r4, lr}
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e8:	f000 f8f8 	bl	800d6dc <_read_r>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	bfab      	itete	ge
 800d4f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d4f4:	181b      	addge	r3, r3, r0
 800d4f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4fa:	bfac      	ite	ge
 800d4fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4fe:	81a3      	strhlt	r3, [r4, #12]
 800d500:	bd10      	pop	{r4, pc}

0800d502 <__swrite>:
 800d502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d506:	461f      	mov	r7, r3
 800d508:	898b      	ldrh	r3, [r1, #12]
 800d50a:	05db      	lsls	r3, r3, #23
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	4616      	mov	r6, r2
 800d512:	d505      	bpl.n	800d520 <__swrite+0x1e>
 800d514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d518:	2302      	movs	r3, #2
 800d51a:	2200      	movs	r2, #0
 800d51c:	f000 f898 	bl	800d650 <_lseek_r>
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	4632      	mov	r2, r6
 800d52e:	463b      	mov	r3, r7
 800d530:	4628      	mov	r0, r5
 800d532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d536:	f000 b817 	b.w	800d568 <_write_r>

0800d53a <__sseek>:
 800d53a:	b510      	push	{r4, lr}
 800d53c:	460c      	mov	r4, r1
 800d53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d542:	f000 f885 	bl	800d650 <_lseek_r>
 800d546:	1c43      	adds	r3, r0, #1
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	bf15      	itete	ne
 800d54c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d54e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d556:	81a3      	strheq	r3, [r4, #12]
 800d558:	bf18      	it	ne
 800d55a:	81a3      	strhne	r3, [r4, #12]
 800d55c:	bd10      	pop	{r4, pc}

0800d55e <__sclose>:
 800d55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d562:	f000 b831 	b.w	800d5c8 <_close_r>
	...

0800d568 <_write_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4d07      	ldr	r5, [pc, #28]	; (800d588 <_write_r+0x20>)
 800d56c:	4604      	mov	r4, r0
 800d56e:	4608      	mov	r0, r1
 800d570:	4611      	mov	r1, r2
 800d572:	2200      	movs	r2, #0
 800d574:	602a      	str	r2, [r5, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	f000 faaa 	bl	800dad0 <_write>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_write_r+0x1e>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	b103      	cbz	r3, 800d586 <_write_r+0x1e>
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	2000a614 	.word	0x2000a614

0800d58c <__assert_func>:
 800d58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d58e:	4614      	mov	r4, r2
 800d590:	461a      	mov	r2, r3
 800d592:	4b09      	ldr	r3, [pc, #36]	; (800d5b8 <__assert_func+0x2c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4605      	mov	r5, r0
 800d598:	68d8      	ldr	r0, [r3, #12]
 800d59a:	b14c      	cbz	r4, 800d5b0 <__assert_func+0x24>
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <__assert_func+0x30>)
 800d59e:	9100      	str	r1, [sp, #0]
 800d5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5a4:	4906      	ldr	r1, [pc, #24]	; (800d5c0 <__assert_func+0x34>)
 800d5a6:	462b      	mov	r3, r5
 800d5a8:	f000 f81e 	bl	800d5e8 <fiprintf>
 800d5ac:	f000 f8b5 	bl	800d71a <abort>
 800d5b0:	4b04      	ldr	r3, [pc, #16]	; (800d5c4 <__assert_func+0x38>)
 800d5b2:	461c      	mov	r4, r3
 800d5b4:	e7f3      	b.n	800d59e <__assert_func+0x12>
 800d5b6:	bf00      	nop
 800d5b8:	2000069c 	.word	0x2000069c
 800d5bc:	08015f2d 	.word	0x08015f2d
 800d5c0:	08015f3a 	.word	0x08015f3a
 800d5c4:	08015f68 	.word	0x08015f68

0800d5c8 <_close_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4d06      	ldr	r5, [pc, #24]	; (800d5e4 <_close_r+0x1c>)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	4608      	mov	r0, r1
 800d5d2:	602b      	str	r3, [r5, #0]
 800d5d4:	f000 fa44 	bl	800da60 <_close>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d102      	bne.n	800d5e2 <_close_r+0x1a>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	b103      	cbz	r3, 800d5e2 <_close_r+0x1a>
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	2000a614 	.word	0x2000a614

0800d5e8 <fiprintf>:
 800d5e8:	b40e      	push	{r1, r2, r3}
 800d5ea:	b503      	push	{r0, r1, lr}
 800d5ec:	4601      	mov	r1, r0
 800d5ee:	ab03      	add	r3, sp, #12
 800d5f0:	4805      	ldr	r0, [pc, #20]	; (800d608 <fiprintf+0x20>)
 800d5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5f6:	6800      	ldr	r0, [r0, #0]
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	f7ff fe41 	bl	800d280 <_vfiprintf_r>
 800d5fe:	b002      	add	sp, #8
 800d600:	f85d eb04 	ldr.w	lr, [sp], #4
 800d604:	b003      	add	sp, #12
 800d606:	4770      	bx	lr
 800d608:	2000069c 	.word	0x2000069c

0800d60c <_fstat_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d07      	ldr	r5, [pc, #28]	; (800d62c <_fstat_r+0x20>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	602b      	str	r3, [r5, #0]
 800d61a:	f000 fa29 	bl	800da70 <_fstat>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d102      	bne.n	800d628 <_fstat_r+0x1c>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	b103      	cbz	r3, 800d628 <_fstat_r+0x1c>
 800d626:	6023      	str	r3, [r4, #0]
 800d628:	bd38      	pop	{r3, r4, r5, pc}
 800d62a:	bf00      	nop
 800d62c:	2000a614 	.word	0x2000a614

0800d630 <_isatty_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d06      	ldr	r5, [pc, #24]	; (800d64c <_isatty_r+0x1c>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f000 fa28 	bl	800da90 <_isatty>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_isatty_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_isatty_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	2000a614 	.word	0x2000a614

0800d650 <_lseek_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d07      	ldr	r5, [pc, #28]	; (800d670 <_lseek_r+0x20>)
 800d654:	4604      	mov	r4, r0
 800d656:	4608      	mov	r0, r1
 800d658:	4611      	mov	r1, r2
 800d65a:	2200      	movs	r2, #0
 800d65c:	602a      	str	r2, [r5, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	f000 fa26 	bl	800dab0 <_lseek>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_lseek_r+0x1e>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_lseek_r+0x1e>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	2000a614 	.word	0x2000a614

0800d674 <__ascii_mbtowc>:
 800d674:	b082      	sub	sp, #8
 800d676:	b901      	cbnz	r1, 800d67a <__ascii_mbtowc+0x6>
 800d678:	a901      	add	r1, sp, #4
 800d67a:	b142      	cbz	r2, 800d68e <__ascii_mbtowc+0x1a>
 800d67c:	b14b      	cbz	r3, 800d692 <__ascii_mbtowc+0x1e>
 800d67e:	7813      	ldrb	r3, [r2, #0]
 800d680:	600b      	str	r3, [r1, #0]
 800d682:	7812      	ldrb	r2, [r2, #0]
 800d684:	1e10      	subs	r0, r2, #0
 800d686:	bf18      	it	ne
 800d688:	2001      	movne	r0, #1
 800d68a:	b002      	add	sp, #8
 800d68c:	4770      	bx	lr
 800d68e:	4610      	mov	r0, r2
 800d690:	e7fb      	b.n	800d68a <__ascii_mbtowc+0x16>
 800d692:	f06f 0001 	mvn.w	r0, #1
 800d696:	e7f8      	b.n	800d68a <__ascii_mbtowc+0x16>

0800d698 <memmove>:
 800d698:	4288      	cmp	r0, r1
 800d69a:	b510      	push	{r4, lr}
 800d69c:	eb01 0402 	add.w	r4, r1, r2
 800d6a0:	d902      	bls.n	800d6a8 <memmove+0x10>
 800d6a2:	4284      	cmp	r4, r0
 800d6a4:	4623      	mov	r3, r4
 800d6a6:	d807      	bhi.n	800d6b8 <memmove+0x20>
 800d6a8:	1e43      	subs	r3, r0, #1
 800d6aa:	42a1      	cmp	r1, r4
 800d6ac:	d008      	beq.n	800d6c0 <memmove+0x28>
 800d6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6b6:	e7f8      	b.n	800d6aa <memmove+0x12>
 800d6b8:	4402      	add	r2, r0
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	428a      	cmp	r2, r1
 800d6be:	d100      	bne.n	800d6c2 <memmove+0x2a>
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6ca:	e7f7      	b.n	800d6bc <memmove+0x24>

0800d6cc <_malloc_usable_size_r>:
 800d6cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6d0:	1f18      	subs	r0, r3, #4
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	bfbc      	itt	lt
 800d6d6:	580b      	ldrlt	r3, [r1, r0]
 800d6d8:	18c0      	addlt	r0, r0, r3
 800d6da:	4770      	bx	lr

0800d6dc <_read_r>:
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	4d07      	ldr	r5, [pc, #28]	; (800d6fc <_read_r+0x20>)
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	4608      	mov	r0, r1
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	602a      	str	r2, [r5, #0]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	f000 f9e8 	bl	800dac0 <_read>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_read_r+0x1e>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_read_r+0x1e>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	2000a614 	.word	0x2000a614

0800d700 <__ascii_wctomb>:
 800d700:	b149      	cbz	r1, 800d716 <__ascii_wctomb+0x16>
 800d702:	2aff      	cmp	r2, #255	; 0xff
 800d704:	bf85      	ittet	hi
 800d706:	238a      	movhi	r3, #138	; 0x8a
 800d708:	6003      	strhi	r3, [r0, #0]
 800d70a:	700a      	strbls	r2, [r1, #0]
 800d70c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d710:	bf98      	it	ls
 800d712:	2001      	movls	r0, #1
 800d714:	4770      	bx	lr
 800d716:	4608      	mov	r0, r1
 800d718:	4770      	bx	lr

0800d71a <abort>:
 800d71a:	b508      	push	{r3, lr}
 800d71c:	2006      	movs	r0, #6
 800d71e:	f000 f82b 	bl	800d778 <raise>
 800d722:	2001      	movs	r0, #1
 800d724:	f000 f9dc 	bl	800dae0 <_exit>

0800d728 <_raise_r>:
 800d728:	291f      	cmp	r1, #31
 800d72a:	b538      	push	{r3, r4, r5, lr}
 800d72c:	4604      	mov	r4, r0
 800d72e:	460d      	mov	r5, r1
 800d730:	d904      	bls.n	800d73c <_raise_r+0x14>
 800d732:	2316      	movs	r3, #22
 800d734:	6003      	str	r3, [r0, #0]
 800d736:	f04f 30ff 	mov.w	r0, #4294967295
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d73e:	b112      	cbz	r2, 800d746 <_raise_r+0x1e>
 800d740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d744:	b94b      	cbnz	r3, 800d75a <_raise_r+0x32>
 800d746:	4620      	mov	r0, r4
 800d748:	f000 f830 	bl	800d7ac <_getpid_r>
 800d74c:	462a      	mov	r2, r5
 800d74e:	4601      	mov	r1, r0
 800d750:	4620      	mov	r0, r4
 800d752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d756:	f000 b817 	b.w	800d788 <_kill_r>
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d00a      	beq.n	800d774 <_raise_r+0x4c>
 800d75e:	1c59      	adds	r1, r3, #1
 800d760:	d103      	bne.n	800d76a <_raise_r+0x42>
 800d762:	2316      	movs	r3, #22
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	2001      	movs	r0, #1
 800d768:	e7e7      	b.n	800d73a <_raise_r+0x12>
 800d76a:	2400      	movs	r4, #0
 800d76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d770:	4628      	mov	r0, r5
 800d772:	4798      	blx	r3
 800d774:	2000      	movs	r0, #0
 800d776:	e7e0      	b.n	800d73a <_raise_r+0x12>

0800d778 <raise>:
 800d778:	4b02      	ldr	r3, [pc, #8]	; (800d784 <raise+0xc>)
 800d77a:	4601      	mov	r1, r0
 800d77c:	6818      	ldr	r0, [r3, #0]
 800d77e:	f7ff bfd3 	b.w	800d728 <_raise_r>
 800d782:	bf00      	nop
 800d784:	2000069c 	.word	0x2000069c

0800d788 <_kill_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d07      	ldr	r5, [pc, #28]	; (800d7a8 <_kill_r+0x20>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	4611      	mov	r1, r2
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	f000 f983 	bl	800daa0 <_kill>
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	d102      	bne.n	800d7a4 <_kill_r+0x1c>
 800d79e:	682b      	ldr	r3, [r5, #0]
 800d7a0:	b103      	cbz	r3, 800d7a4 <_kill_r+0x1c>
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	2000a614 	.word	0x2000a614

0800d7ac <_getpid_r>:
 800d7ac:	f000 b968 	b.w	800da80 <_getpid>

0800d7b0 <roundf>:
 800d7b0:	ee10 0a10 	vmov	r0, s0
 800d7b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d7b8:	3a7f      	subs	r2, #127	; 0x7f
 800d7ba:	2a16      	cmp	r2, #22
 800d7bc:	dc15      	bgt.n	800d7ea <roundf+0x3a>
 800d7be:	2a00      	cmp	r2, #0
 800d7c0:	da08      	bge.n	800d7d4 <roundf+0x24>
 800d7c2:	3201      	adds	r2, #1
 800d7c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d7c8:	d101      	bne.n	800d7ce <roundf+0x1e>
 800d7ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d7ce:	ee00 3a10 	vmov	s0, r3
 800d7d2:	4770      	bx	lr
 800d7d4:	4907      	ldr	r1, [pc, #28]	; (800d7f4 <roundf+0x44>)
 800d7d6:	4111      	asrs	r1, r2
 800d7d8:	4208      	tst	r0, r1
 800d7da:	d0fa      	beq.n	800d7d2 <roundf+0x22>
 800d7dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d7e0:	4113      	asrs	r3, r2
 800d7e2:	4403      	add	r3, r0
 800d7e4:	ea23 0301 	bic.w	r3, r3, r1
 800d7e8:	e7f1      	b.n	800d7ce <roundf+0x1e>
 800d7ea:	2a80      	cmp	r2, #128	; 0x80
 800d7ec:	d1f1      	bne.n	800d7d2 <roundf+0x22>
 800d7ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d7f2:	4770      	bx	lr
 800d7f4:	007fffff 	.word	0x007fffff

0800d7f8 <expf>:
 800d7f8:	b508      	push	{r3, lr}
 800d7fa:	ed2d 8b02 	vpush	{d8}
 800d7fe:	eef0 8a40 	vmov.f32	s17, s0
 800d802:	f000 f82f 	bl	800d864 <__ieee754_expf>
 800d806:	eeb0 8a40 	vmov.f32	s16, s0
 800d80a:	eeb0 0a68 	vmov.f32	s0, s17
 800d80e:	f000 f919 	bl	800da44 <finitef>
 800d812:	b160      	cbz	r0, 800d82e <expf+0x36>
 800d814:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d854 <expf+0x5c>
 800d818:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d820:	dd0a      	ble.n	800d838 <expf+0x40>
 800d822:	f7fd f825 	bl	800a870 <__errno>
 800d826:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800d858 <expf+0x60>
 800d82a:	2322      	movs	r3, #34	; 0x22
 800d82c:	6003      	str	r3, [r0, #0]
 800d82e:	eeb0 0a48 	vmov.f32	s0, s16
 800d832:	ecbd 8b02 	vpop	{d8}
 800d836:	bd08      	pop	{r3, pc}
 800d838:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d85c <expf+0x64>
 800d83c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d844:	d5f3      	bpl.n	800d82e <expf+0x36>
 800d846:	f7fd f813 	bl	800a870 <__errno>
 800d84a:	2322      	movs	r3, #34	; 0x22
 800d84c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d860 <expf+0x68>
 800d850:	6003      	str	r3, [r0, #0]
 800d852:	e7ec      	b.n	800d82e <expf+0x36>
 800d854:	42b17180 	.word	0x42b17180
 800d858:	7f800000 	.word	0x7f800000
 800d85c:	c2cff1b5 	.word	0xc2cff1b5
 800d860:	00000000 	.word	0x00000000

0800d864 <__ieee754_expf>:
 800d864:	ee10 2a10 	vmov	r2, s0
 800d868:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d86c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d870:	d902      	bls.n	800d878 <__ieee754_expf+0x14>
 800d872:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d876:	4770      	bx	lr
 800d878:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800d87c:	d106      	bne.n	800d88c <__ieee754_expf+0x28>
 800d87e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800d9b8 <__ieee754_expf+0x154>
 800d882:	2b00      	cmp	r3, #0
 800d884:	bf18      	it	ne
 800d886:	eeb0 0a67 	vmovne.f32	s0, s15
 800d88a:	4770      	bx	lr
 800d88c:	484b      	ldr	r0, [pc, #300]	; (800d9bc <__ieee754_expf+0x158>)
 800d88e:	4282      	cmp	r2, r0
 800d890:	dd02      	ble.n	800d898 <__ieee754_expf+0x34>
 800d892:	2000      	movs	r0, #0
 800d894:	f000 b8d0 	b.w	800da38 <__math_oflowf>
 800d898:	2a00      	cmp	r2, #0
 800d89a:	da05      	bge.n	800d8a8 <__ieee754_expf+0x44>
 800d89c:	4a48      	ldr	r2, [pc, #288]	; (800d9c0 <__ieee754_expf+0x15c>)
 800d89e:	4291      	cmp	r1, r2
 800d8a0:	d902      	bls.n	800d8a8 <__ieee754_expf+0x44>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f000 b8c2 	b.w	800da2c <__math_uflowf>
 800d8a8:	4a46      	ldr	r2, [pc, #280]	; (800d9c4 <__ieee754_expf+0x160>)
 800d8aa:	4291      	cmp	r1, r2
 800d8ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d8b0:	d952      	bls.n	800d958 <__ieee754_expf+0xf4>
 800d8b2:	4a45      	ldr	r2, [pc, #276]	; (800d9c8 <__ieee754_expf+0x164>)
 800d8b4:	4291      	cmp	r1, r2
 800d8b6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d8ba:	d834      	bhi.n	800d926 <__ieee754_expf+0xc2>
 800d8bc:	4943      	ldr	r1, [pc, #268]	; (800d9cc <__ieee754_expf+0x168>)
 800d8be:	4411      	add	r1, r2
 800d8c0:	ed91 7a00 	vldr	s14, [r1]
 800d8c4:	4942      	ldr	r1, [pc, #264]	; (800d9d0 <__ieee754_expf+0x16c>)
 800d8c6:	440a      	add	r2, r1
 800d8c8:	edd2 7a00 	vldr	s15, [r2]
 800d8cc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d8d0:	f1c3 0201 	rsb	r2, r3, #1
 800d8d4:	1ad2      	subs	r2, r2, r3
 800d8d6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d8da:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d8de:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800d9d4 <__ieee754_expf+0x170>
 800d8e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9d8 <__ieee754_expf+0x174>
 800d8e6:	eee6 6a05 	vfma.f32	s13, s12, s10
 800d8ea:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d9dc <__ieee754_expf+0x178>
 800d8ee:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d8f2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d9e0 <__ieee754_expf+0x17c>
 800d8f6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800d8fa:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d9e4 <__ieee754_expf+0x180>
 800d8fe:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d902:	eef0 6a40 	vmov.f32	s13, s0
 800d906:	eee5 6a46 	vfms.f32	s13, s10, s12
 800d90a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d90e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800d912:	bb92      	cbnz	r2, 800d97a <__ieee754_expf+0x116>
 800d914:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d918:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d91c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d920:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800d924:	4770      	bx	lr
 800d926:	4b30      	ldr	r3, [pc, #192]	; (800d9e8 <__ieee754_expf+0x184>)
 800d928:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d9ec <__ieee754_expf+0x188>
 800d92c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d9f0 <__ieee754_expf+0x18c>
 800d930:	4413      	add	r3, r2
 800d932:	edd3 7a00 	vldr	s15, [r3]
 800d936:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d93a:	eeb0 7a40 	vmov.f32	s14, s0
 800d93e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d942:	ee17 2a90 	vmov	r2, s15
 800d946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d94a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d94e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d9f4 <__ieee754_expf+0x190>
 800d952:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d956:	e7be      	b.n	800d8d6 <__ieee754_expf+0x72>
 800d958:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800d95c:	d20b      	bcs.n	800d976 <__ieee754_expf+0x112>
 800d95e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d9f8 <__ieee754_expf+0x194>
 800d962:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d966:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96e:	dd02      	ble.n	800d976 <__ieee754_expf+0x112>
 800d970:	ee30 0a25 	vadd.f32	s0, s0, s11
 800d974:	4770      	bx	lr
 800d976:	2200      	movs	r2, #0
 800d978:	e7af      	b.n	800d8da <__ieee754_expf+0x76>
 800d97a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d97e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d982:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800d986:	bfb8      	it	lt
 800d988:	3264      	addlt	r2, #100	; 0x64
 800d98a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d98e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d992:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800d996:	ee17 3a90 	vmov	r3, s15
 800d99a:	bfab      	itete	ge
 800d99c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d9a0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d9a4:	ee00 3a10 	vmovge	s0, r3
 800d9a8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800d9fc <__ieee754_expf+0x198>
 800d9ac:	bfbc      	itt	lt
 800d9ae:	ee00 3a10 	vmovlt	s0, r3
 800d9b2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d9b6:	4770      	bx	lr
 800d9b8:	00000000 	.word	0x00000000
 800d9bc:	42b17217 	.word	0x42b17217
 800d9c0:	42cff1b5 	.word	0x42cff1b5
 800d9c4:	3eb17218 	.word	0x3eb17218
 800d9c8:	3f851591 	.word	0x3f851591
 800d9cc:	0801607c 	.word	0x0801607c
 800d9d0:	08016084 	.word	0x08016084
 800d9d4:	3331bb4c 	.word	0x3331bb4c
 800d9d8:	b5ddea0e 	.word	0xb5ddea0e
 800d9dc:	388ab355 	.word	0x388ab355
 800d9e0:	bb360b61 	.word	0xbb360b61
 800d9e4:	3e2aaaab 	.word	0x3e2aaaab
 800d9e8:	08016074 	.word	0x08016074
 800d9ec:	3fb8aa3b 	.word	0x3fb8aa3b
 800d9f0:	3f317180 	.word	0x3f317180
 800d9f4:	3717f7d1 	.word	0x3717f7d1
 800d9f8:	7149f2ca 	.word	0x7149f2ca
 800d9fc:	0d800000 	.word	0x0d800000

0800da00 <with_errnof>:
 800da00:	b513      	push	{r0, r1, r4, lr}
 800da02:	4604      	mov	r4, r0
 800da04:	ed8d 0a01 	vstr	s0, [sp, #4]
 800da08:	f7fc ff32 	bl	800a870 <__errno>
 800da0c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800da10:	6004      	str	r4, [r0, #0]
 800da12:	b002      	add	sp, #8
 800da14:	bd10      	pop	{r4, pc}

0800da16 <xflowf>:
 800da16:	b130      	cbz	r0, 800da26 <xflowf+0x10>
 800da18:	eef1 7a40 	vneg.f32	s15, s0
 800da1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800da20:	2022      	movs	r0, #34	; 0x22
 800da22:	f7ff bfed 	b.w	800da00 <with_errnof>
 800da26:	eef0 7a40 	vmov.f32	s15, s0
 800da2a:	e7f7      	b.n	800da1c <xflowf+0x6>

0800da2c <__math_uflowf>:
 800da2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da34 <__math_uflowf+0x8>
 800da30:	f7ff bff1 	b.w	800da16 <xflowf>
 800da34:	10000000 	.word	0x10000000

0800da38 <__math_oflowf>:
 800da38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da40 <__math_oflowf+0x8>
 800da3c:	f7ff bfeb 	b.w	800da16 <xflowf>
 800da40:	70000000 	.word	0x70000000

0800da44 <finitef>:
 800da44:	b082      	sub	sp, #8
 800da46:	ed8d 0a01 	vstr	s0, [sp, #4]
 800da4a:	9801      	ldr	r0, [sp, #4]
 800da4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800da50:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800da54:	bfac      	ite	ge
 800da56:	2000      	movge	r0, #0
 800da58:	2001      	movlt	r0, #1
 800da5a:	b002      	add	sp, #8
 800da5c:	4770      	bx	lr
	...

0800da60 <_close>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <_close+0xc>)
 800da62:	2258      	movs	r2, #88	; 0x58
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	f04f 30ff 	mov.w	r0, #4294967295
 800da6a:	4770      	bx	lr
 800da6c:	2000a614 	.word	0x2000a614

0800da70 <_fstat>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <_fstat+0xc>)
 800da72:	2258      	movs	r2, #88	; 0x58
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	f04f 30ff 	mov.w	r0, #4294967295
 800da7a:	4770      	bx	lr
 800da7c:	2000a614 	.word	0x2000a614

0800da80 <_getpid>:
 800da80:	4b02      	ldr	r3, [pc, #8]	; (800da8c <_getpid+0xc>)
 800da82:	2258      	movs	r2, #88	; 0x58
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295
 800da8a:	4770      	bx	lr
 800da8c:	2000a614 	.word	0x2000a614

0800da90 <_isatty>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <_isatty+0xc>)
 800da92:	2258      	movs	r2, #88	; 0x58
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	2000      	movs	r0, #0
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	2000a614 	.word	0x2000a614

0800daa0 <_kill>:
 800daa0:	4b02      	ldr	r3, [pc, #8]	; (800daac <_kill+0xc>)
 800daa2:	2258      	movs	r2, #88	; 0x58
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	f04f 30ff 	mov.w	r0, #4294967295
 800daaa:	4770      	bx	lr
 800daac:	2000a614 	.word	0x2000a614

0800dab0 <_lseek>:
 800dab0:	4b02      	ldr	r3, [pc, #8]	; (800dabc <_lseek+0xc>)
 800dab2:	2258      	movs	r2, #88	; 0x58
 800dab4:	601a      	str	r2, [r3, #0]
 800dab6:	f04f 30ff 	mov.w	r0, #4294967295
 800daba:	4770      	bx	lr
 800dabc:	2000a614 	.word	0x2000a614

0800dac0 <_read>:
 800dac0:	4b02      	ldr	r3, [pc, #8]	; (800dacc <_read+0xc>)
 800dac2:	2258      	movs	r2, #88	; 0x58
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	f04f 30ff 	mov.w	r0, #4294967295
 800daca:	4770      	bx	lr
 800dacc:	2000a614 	.word	0x2000a614

0800dad0 <_write>:
 800dad0:	4b02      	ldr	r3, [pc, #8]	; (800dadc <_write+0xc>)
 800dad2:	2258      	movs	r2, #88	; 0x58
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	f04f 30ff 	mov.w	r0, #4294967295
 800dada:	4770      	bx	lr
 800dadc:	2000a614 	.word	0x2000a614

0800dae0 <_exit>:
 800dae0:	e7fe      	b.n	800dae0 <_exit>
	...

0800dae4 <_init>:
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae6:	bf00      	nop
 800dae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daea:	bc08      	pop	{r3}
 800daec:	469e      	mov	lr, r3
 800daee:	4770      	bx	lr

0800daf0 <_fini>:
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	bf00      	nop
 800daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf6:	bc08      	pop	{r3}
 800daf8:	469e      	mov	lr, r3
 800dafa:	4770      	bx	lr
